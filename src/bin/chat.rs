use fodifood_bot::ai::{AIEngine, IntentClassifier};
use fodifood_bot::config::Config;
use std::env;
use std::io::{self, Write};

#[tokio::main]
async fn main() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ --debug
    let args: Vec<String> = env::args().collect();
    let debug_mode = args.contains(&"--debug".to_string());

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if debug_mode {
        tracing_subscriber::fmt()
            .with_max_level(tracing::Level::DEBUG)
            .init();
        println!("üêõ DEBUG MODE ENABLED");
    } else {
        tracing_subscriber::fmt()
            .with_max_level(tracing::Level::INFO)
            .init();
    }

    println!("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AIEngine...");

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let config = Config {
        openai_api_key: String::new(),
        go_backend_url: std::env::var("GO_BACKEND_URL")
            .unwrap_or_else(|_| "http://localhost:8080/api".to_string()),
        jwt_secret: "test_secret".to_string(),
        orchestrator_enabled: false,
        orchestrator_managed: false,
        go_backend_bin: String::new(),
    };

    let engine = AIEngine::new(&config);
    let user_id = "test_user";

    println!("‚úÖ FodiFood Bot –∑–∞–ø—É—â–µ–Ω!");
    if debug_mode {
        println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
        println!("ÔøΩ –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò –ò–ù–¢–ï–ù–¢–û–í");
        println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
    } else {
        println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
    }
    println!("ÔøΩüí¨ –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–Ω—Ç–æ–≤");
    println!("üß™ –ü—Ä–∏–º–µ—Ä—ã:");
    println!("   ‚Ä¢ –ª–æ—Å–æ—Å—å");
    println!("   ‚Ä¢ —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏");
    println!("   ‚Ä¢ –±–ª—é–¥–∞ —Å —Ç—É–Ω—Ü–æ–º");
    println!("   ‚Ä¢ –ø–æ–∫–∞–∂–∏ –º–µ–Ω—é");
    println!("   ‚Ä¢ –ø—Ä–∏–≤–µ—Ç");
    println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
    if debug_mode {
        println!("üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏");
    }
    println!("‚å®Ô∏è  –í–≤–µ–¥–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n");

    loop {
        print!("üë§ > ");
        io::stdout().flush().unwrap();

        let mut input = String::new();
        io::stdin().read_line(&mut input).unwrap();
        let input = input.trim();

        if input.is_empty() {
            continue;
        }

        if input == "exit" || input == "–≤—ã—Ö–æ–¥" || input == "quit" {
            println!("üëã –ü–æ–∫–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!");
            break;
        }

        // üêõ DEBUG MODE: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if debug_mode {
            println!("\n‚îÅ‚îÅ‚îÅ üêõ DEBUG INFO ‚îÅ‚îÅ‚îÅ");
            let intent = IntentClassifier::classify(input);
            println!("üéØ Intent: {:?}", intent);

            // –ï—Å–ª–∏ —ç—Ç–æ SearchByIngredient - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
            if matches!(intent, fodifood_bot::ai::Intent::SearchByIngredient) {
                let ingredient = IntentClassifier::extract_ingredient(input);
                println!("üß© Extracted: \"{}\"", ingredient);
                println!("üí° Will search products containing: {}", ingredient);
            }

            // –ï—Å–ª–∏ –µ—Å—Ç—å order ID - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            if let Some(order_id) = IntentClassifier::extract_order_id(input) {
                println!("üì¶ Order ID: {}", order_id);
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if let Some(product) = IntentClassifier::extract_product_name(input) {
                println!("üç± Product name: {}", product);
            }

            println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        match engine.process_message(user_id, input).await {
            Ok(response) => {
                println!("ü§ñ {}\n", response);
            }
            Err(e) => {
                println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {}\n", e);
            }
        }
    }
}
