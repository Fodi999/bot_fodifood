use anyhow::{Context, Result};
use reqwest::Client;

use super::types::Product;

/// üçΩÔ∏è Products service
pub struct ProductsClient {
    client: Client,
    base_url: String,
}

impl ProductsClient {
    pub fn new(client: Client, base_url: String) -> Self {
        Self { client, base_url }
    }

    /// Get all visible products (public menu)
    pub async fn get_products(&self) -> Result<Vec<Product>> {
        let url = format!("{}/products", self.base_url);

        let response = self
            .client
            .get(&url)
            .send()
            .await
            .context("Failed to fetch products")?;

        // If backend returns 404, use fallback menu
        if response.status() == 404 {
            tracing::warn!("‚ö†Ô∏è Backend /products endpoint not found, using fallback menu");
            return Ok(Self::get_fallback_menu());
        }

        let products = response
            .json::<Vec<Product>>()
            .await
            .context("Failed to parse products response")?;

        Ok(products)
    }

    /// üçΩÔ∏è Fallback menu (used when backend is unavailable)
    fn get_fallback_menu() -> Vec<Product> {
        vec![
            Product {
                id: "1".to_string(),
                name: "–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è".to_string(),
                description: Some("–õ–æ—Å–æ—Å—å, —Å–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä, –æ–≥—É—Ä–µ—Ü".to_string()),
                price: 450.0,
                category: Some("–†–æ–ª–ª—ã".to_string()),
                weight: Some("250–≥".to_string()),
                is_visible: Some(true),
                image_url: None,
                created_at: None,
            },
            Product {
                id: "2".to_string(),
                name: "–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è".to_string(),
                description: Some("–ö—Ä–∞–±, –∞–≤–æ–∫–∞–¥–æ, –∏–∫—Ä–∞ —Ç–æ–±–∏–∫–æ".to_string()),
                price: 380.0,
                category: Some("–†–æ–ª–ª—ã".to_string()),
                weight: Some("240–≥".to_string()),
                is_visible: Some(true),
                image_url: None,
                created_at: None,
            },
            Product {
                id: "3".to_string(),
                name: "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞".to_string(),
                description: Some("–¢–æ–º–∞—Ç—ã, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –±–∞–∑–∏–ª–∏–∫".to_string()),
                price: 350.0,
                category: Some("–ü–∏—Ü—Ü–∞".to_string()),
                weight: Some("400–≥".to_string()),
                is_visible: Some(true),
                image_url: None,
                created_at: None,
            },
            Product {
                id: "4".to_string(),
                name: "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏".to_string(),
                description: Some("–°–∞–ª—è–º–∏, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, —Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å".to_string()),
                price: 420.0,
                category: Some("–ü–∏—Ü—Ü–∞".to_string()),
                weight: Some("450–≥".to_string()),
                is_visible: Some(true),
                image_url: None,
                created_at: None,
            },
            Product {
                id: "5".to_string(),
                name: "–¢–æ–º –Ø–º".to_string(),
                description: Some("–û—Å—Ç—Ä—ã–π —Ç–∞–π—Å–∫–∏–π —Å—É–ø —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏".to_string()),
                price: 320.0,
                category: Some("–°—É–ø—ã".to_string()),
                weight: Some("350–º–ª".to_string()),
                is_visible: Some(true),
                image_url: None,
                created_at: None,
            },
            Product {
                id: "6".to_string(),
                name: "Coca-Cola".to_string(),
                description: Some("–ì–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫".to_string()),
                price: 90.0,
                category: Some("–ù–∞–ø–∏—Ç–∫–∏".to_string()),
                weight: Some("330–º–ª".to_string()),
                is_visible: Some(true),
                image_url: None,
                created_at: None,
            },
        ]
    }

    /// üìã Format products list for display
    pub fn format_products_list(products: &[Product]) -> String {
        if products.is_empty() {
            return "ü§î –ú–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–æ. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –±–ª—é–¥–∞!".to_string();
        }

        let mut result = String::from("üçΩÔ∏è **–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏:**\n\n");

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        let mut by_category: std::collections::HashMap<String, Vec<&Product>> =
            std::collections::HashMap::new();

        for product in products {
            if product.is_visible.unwrap_or(true) {
                let category = product
                    .category
                    .clone()
                    .unwrap_or_else(|| "–î—Ä—É–≥–æ–µ".to_string());
                by_category.entry(category).or_default().push(product);
            }
        }

        // –ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        let category_order = vec!["–†–æ–ª–ª—ã", "–°—É—à–∏", "–ó–∞–∫—É—Å–∫–∏", "–ù–∞–ø–∏—Ç–∫–∏", "–î—Ä—É–≥–æ–µ"];

        for category_name in category_order {
            if let Some(items) = by_category.get(category_name) {
                result.push_str(&format!("üìÇ **{}:**\n", category_name));

                for product in items {
                    let price = format!("{}‚ÇΩ", product.price as i32);
                    let weight = product.weight.as_deref().unwrap_or("");
                    let desc = product.description.as_deref().unwrap_or("");

                    result.push_str(&format!(
                        "‚Ä¢ **{}** ‚Äî {} {}\n",
                        product.name,
                        price,
                        if !weight.is_empty() {
                            format!("({})", weight)
                        } else {
                            String::new()
                        }
                    ));

                    if !desc.is_empty() && desc.len() < 100 {
                        result.push_str(&format!("  _{}_\n", desc));
                    }
                }
                result.push('\n');
            }
        }

        result.push_str("üí° –í—Å–µ –±–ª—é–¥–∞ –≥–æ—Ç–æ–≤—è—Ç—Å—è –∏–∑ —Å–≤–µ–∂–∞–π—à–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤!\n");
        result.push_str("üöö –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 1500‚ÇΩ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ!");

        result
    }

    /// üîç Search product by name
    pub fn find_product_by_name<'a>(products: &'a [Product], query: &str) -> Option<&'a Product> {
        let query_lower = query.to_lowercase();

        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if let Some(p) = products
            .iter()
            .find(|p| p.name.to_lowercase() == query_lower)
        {
            return Some(p);
        }

        // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        products
            .iter()
            .find(|p| p.name.to_lowercase().contains(&query_lower))
    }

    /// üêü Filter products by ingredient
    pub fn filter_by_ingredient<'a>(products: &'a [Product], ingredient: &str) -> Vec<&'a Product> {
        let ing_lower = ingredient.to_lowercase();
        let ingredient_forms = normalize_ingredient(&ing_lower);

        products
            .iter()
            .filter(|p| {
                let name_lower = p.name.to_lowercase();
                let desc_lower = p.description.as_deref().unwrap_or("").to_lowercase();

                ingredient_forms
                    .iter()
                    .any(|form| name_lower.contains(form) || desc_lower.contains(form))
            })
            .collect()
    }
}

/// üîÑ Normalize ingredient for search (generates word forms)
fn normalize_ingredient(ingredient: &str) -> Vec<String> {
    let mut forms = vec![ingredient.to_string()];

    let ingredient_map = vec![
        (
            "–ª–æ—Å–æ—Å—å",
            vec!["–ª–æ—Å–æ—Å—å", "–ª–æ—Å–æ—Å—è", "–ª–æ—Å–æ—Å–µ–º", "–ª–æ—Å–æ—Å—é", "salmon"],
        ),
        (
            "–ª–æ—Å–æ—Å—è",
            vec!["–ª–æ—Å–æ—Å—å", "–ª–æ—Å–æ—Å—è", "–ª–æ—Å–æ—Å–µ–º", "–ª–æ—Å–æ—Å—é", "salmon"],
        ),
        (
            "–ª–æ—Å–æ—Å–µ–º",
            vec!["–ª–æ—Å–æ—Å—å", "–ª–æ—Å–æ—Å—è", "–ª–æ—Å–æ—Å–µ–º", "–ª–æ—Å–æ—Å—é", "salmon"],
        ),
        (
            "salmon",
            vec!["–ª–æ—Å–æ—Å—å", "–ª–æ—Å–æ—Å—è", "–ª–æ—Å–æ—Å–µ–º", "–ª–æ—Å–æ—Å—é", "salmon"],
        ),
        (
            "–∫—Ä–µ–≤–µ—Ç–∫–∏",
            vec!["–∫—Ä–µ–≤–µ—Ç–∫–∏", "–∫—Ä–µ–≤–µ—Ç–æ–∫", "–∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏", "–∫—Ä–µ–≤–µ—Ç–∫–µ", "shrimp"],
        ),
        (
            "–∫—Ä–µ–≤–µ—Ç–æ–∫",
            vec!["–∫—Ä–µ–≤–µ—Ç–∫–∏", "–∫—Ä–µ–≤–µ—Ç–æ–∫", "–∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏", "–∫—Ä–µ–≤–µ—Ç–∫–µ", "shrimp"],
        ),
        (
            "–∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏",
            vec!["–∫—Ä–µ–≤–µ—Ç–∫–∏", "–∫—Ä–µ–≤–µ—Ç–æ–∫", "–∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏", "–∫—Ä–µ–≤–µ—Ç–∫–µ", "shrimp"],
        ),
        (
            "shrimp",
            vec!["–∫—Ä–µ–≤–µ—Ç–∫–∏", "–∫—Ä–µ–≤–µ—Ç–æ–∫", "–∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏", "–∫—Ä–µ–≤–µ—Ç–∫–µ", "shrimp"],
        ),
        ("—Ç—É–Ω–µ—Ü", vec!["—Ç—É–Ω–µ—Ü", "—Ç—É–Ω—Ü–∞", "—Ç—É–Ω—Ü–æ–º", "—Ç—É–Ω—Ü—É", "tuna"]),
        ("—Ç—É–Ω—Ü–∞", vec!["—Ç—É–Ω–µ—Ü", "—Ç—É–Ω—Ü–∞", "—Ç—É–Ω—Ü–æ–º", "—Ç—É–Ω—Ü—É", "tuna"]),
        ("—Ç—É–Ω—Ü–æ–º", vec!["—Ç—É–Ω–µ—Ü", "—Ç—É–Ω—Ü–∞", "—Ç—É–Ω—Ü–æ–º", "—Ç—É–Ω—Ü—É", "tuna"]),
        ("tuna", vec!["—Ç—É–Ω–µ—Ü", "—Ç—É–Ω—Ü–∞", "—Ç—É–Ω—Ü–æ–º", "—Ç—É–Ω—Ü—É", "tuna"]),
        ("—É–≥–æ—Ä—å", vec!["—É–≥–æ—Ä—å", "—É–≥—Ä—è", "—É–≥—Ä—ë–º", "—É–≥—Ä—é", "eel"]),
        ("—É–≥—Ä—è", vec!["—É–≥–æ—Ä—å", "—É–≥—Ä—è", "—É–≥—Ä—ë–º", "—É–≥—Ä—é", "eel"]),
        ("—É–≥—Ä—ë–º", vec!["—É–≥–æ—Ä—å", "—É–≥—Ä—è", "—É–≥—Ä—ë–º", "—É–≥—Ä—é", "eel"]),
        ("eel", vec!["—É–≥–æ—Ä—å", "—É–≥—Ä—è", "—É–≥—Ä—ë–º", "—É–≥—Ä—é", "eel"]),
        ("–∞–≤–æ–∫–∞–¥–æ", vec!["–∞–≤–æ–∫–∞–¥–æ", "avocado"]),
        ("avocado", vec!["–∞–≤–æ–∫–∞–¥–æ", "avocado"]),
        ("–æ–≥—É—Ä–µ—Ü", vec!["–æ–≥—É—Ä–µ—Ü", "–æ–≥—É—Ä—Ü–∞", "–æ–≥—É—Ä—Ü–æ–º", "cucumber"]),
        ("–æ–≥—É—Ä—Ü–∞", vec!["–æ–≥—É—Ä–µ—Ü", "–æ–≥—É—Ä—Ü–∞", "–æ–≥—É—Ä—Ü–æ–º", "cucumber"]),
        ("–æ–≥—É—Ä—Ü–æ–º", vec!["–æ–≥—É—Ä–µ—Ü", "–æ–≥—É—Ä—Ü–∞", "–æ–≥—É—Ä—Ü–æ–º", "cucumber"]),
        ("cucumber", vec!["–æ–≥—É—Ä–µ—Ü", "–æ–≥—É—Ä—Ü–∞", "–æ–≥—É—Ä—Ü–æ–º", "cucumber"]),
        ("—Å—ã—Ä", vec!["—Å—ã—Ä", "—Å—ã—Ä–∞", "—Å—ã—Ä–æ–º", "—Å—ã—Ä—É", "cheese"]),
        ("—Å—ã—Ä–∞", vec!["—Å—ã—Ä", "—Å—ã—Ä–∞", "—Å—ã—Ä–æ–º", "—Å—ã—Ä—É", "cheese"]),
        ("—Å—ã—Ä–æ–º", vec!["—Å—ã—Ä", "—Å—ã—Ä–∞", "—Å—ã—Ä–æ–º", "—Å—ã—Ä—É", "cheese"]),
        ("cheese", vec!["—Å—ã—Ä", "—Å—ã—Ä–∞", "—Å—ã—Ä–æ–º", "—Å—ã—Ä—É", "cheese"]),
        ("–∏–∫—Ä–∞", vec!["–∏–∫—Ä–∞", "–∏–∫—Ä—ã", "–∏–∫—Ä–æ–π", "–∏–∫—Ä–µ", "caviar"]),
        ("–∏–∫—Ä—ã", vec!["–∏–∫—Ä–∞", "–∏–∫—Ä—ã", "–∏–∫—Ä–æ–π", "–∏–∫—Ä–µ", "caviar"]),
        ("–∏–∫—Ä–æ–π", vec!["–∏–∫—Ä–∞", "–∏–∫—Ä—ã", "–∏–∫—Ä–æ–π", "–∏–∫—Ä–µ", "caviar"]),
        ("caviar", vec!["–∏–∫—Ä–∞", "–∏–∫—Ä—ã", "–∏–∫—Ä–æ–π", "–∏–∫—Ä–µ", "caviar"]),
    ];

    for (key, variants) in ingredient_map {
        if ingredient.contains(key) {
            for variant in variants {
                if !forms.contains(&variant.to_string()) {
                    forms.push(variant.to_string());
                }
            }
            break;
        }
    }

    forms
}
