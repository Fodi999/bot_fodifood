// üåê Social Tasks Module - AI-—É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –º–∏—Å—Å–∏–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
//
// –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–∏–∑–Ω–µ—Å—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö,
// –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª—è—Ç—å —Ç–æ–∫–µ–Ω—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–º–ø–∞–Ω–∏–π.

use std::collections::HashMap;
use chrono::{DateTime, Utc, Duration};
use serde::{Deserialize, Serialize};

/// üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–∏—Å—Å–∏–π
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq, Hash)]
pub enum TaskPlatform {
    /// Instagram (–ø–æ—Å—Ç—ã, stories, reels)
    Instagram,
    /// TikTok (–∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ)
    TikTok,
    /// Twitter/X (—Ç–≤–∏—Ç—ã, —Ä–µ—Ç–≤–∏—Ç—ã)
    Twitter,
    /// YouTube (shorts, –≤–∏–¥–µ–æ)
    YouTube,
    /// Telegram (–∫–∞–Ω–∞–ª—ã, –≥—Ä—É–ø–ø—ã)
    Telegram,
    /// VK (–ø–æ—Å—Ç—ã, —Ä–µ–ø–æ—Å—Ç—ã)
    VK,
    /// Threads (Meta's text platform)
    Threads,
    /// Reddit (–ø–æ—Å—Ç—ã –≤ —Å–∞–±—Ä–µ–¥–¥–∏—Ç–∞—Ö)
    Reddit,
    /// Medium (—Å—Ç–∞—Ç—å–∏)
    Medium,
}

impl TaskPlatform {
    /// –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    pub fn emoji(&self) -> &str {
        match self {
            TaskPlatform::Instagram => "üì∏",
            TaskPlatform::TikTok => "üé•",
            TaskPlatform::Twitter => "üê¶",
            TaskPlatform::YouTube => "‚ñ∂Ô∏è",
            TaskPlatform::Telegram => "üí¨",
            TaskPlatform::VK => "üîµ",
            TaskPlatform::Threads => "üßµ",
            TaskPlatform::Reddit => "üî¥",
            TaskPlatform::Medium => "üìù",
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    pub fn name(&self) -> &str {
        match self {
            TaskPlatform::Instagram => "Instagram",
            TaskPlatform::TikTok => "TikTok",
            TaskPlatform::Twitter => "Twitter/X",
            TaskPlatform::YouTube => "YouTube",
            TaskPlatform::Telegram => "Telegram",
            TaskPlatform::VK => "VK",
            TaskPlatform::Threads => "Threads",
            TaskPlatform::Reddit => "Reddit",
            TaskPlatform::Medium => "Medium",
        }
    }
}

/// üìã –¢–∏–ø –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –º–∏—Å—Å–∏–∏
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum TaskType {
    /// –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±—Ä–µ–Ω–¥–∞
    CreatePost,
    /// –°–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç/—à–µ—Ä
    Share,
    /// –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤
    Review,
    /// –°–Ω—è—Ç—å –≤–∏–¥–µ–æ
    CreateVideo,
    /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
    Follow,
    /// –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫
    Like,
    /// –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    Comment,
    /// –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞)
    Referral,
    /// –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
    Contest,
}

/// ‚úÖ –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum TaskStatus {
    /// –ê–∫—Ç–∏–≤–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    Active,
    /// –ó–∞–≤–µ—Ä—à–µ–Ω–∞ (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω)
    Completed,
    /// –û—Ç–º–µ–Ω–µ–Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
    Cancelled,
    /// –ò—Å—Ç—ë–∫ —Å—Ä–æ–∫
    Expired,
}

/// üéØ –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –º–∏—Å—Å–∏—è
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SocialTask {
    /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏
    pub id: String,
    /// –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞-—Å–æ–∑–¥–∞—Ç–µ–ª—è
    pub business: String,
    /// –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    pub platform: TaskPlatform,
    /// –¢–∏–ø –∑–∞–¥–∞—á–∏
    pub task_type: TaskType,
    /// –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    pub description: String,
    /// –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
    pub reward_tokens: f64,
    /// –î–µ–¥–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    pub deadline: DateTime<Utc>,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (None = –±–µ–∑ –ª–∏–º–∏—Ç–∞)
    pub max_completions: Option<usize>,
    /// –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö –∑–∞–¥–∞—á—É
    pub completed_by: Vec<String>,
    /// –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    pub status: TaskStatus,
    /// –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    pub created_at: DateTime<Utc>,
    /// URL –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    pub verification_url: Option<String>,
    /// –•—ç—à—Ç–µ–≥–∏ –¥–ª—è –∑–∞–¥–∞—á–∏
    pub hashtags: Vec<String>,
    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç –¥–ª—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    pub min_reach: Option<usize>,
}

impl SocialTask {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    pub fn new(
        business: &str,
        platform: TaskPlatform,
        task_type: TaskType,
        description: &str,
        reward_tokens: f64,
        deadline_hours: i64,
    ) -> Self {
        let id = format!(
            "TASK-{}-{}-{}",
            business.replace(" ", "-"),
            platform.name().replace("/", "-"),
            Utc::now().timestamp()
        );

        Self {
            id,
            business: business.to_string(),
            platform,
            task_type,
            description: description.to_string(),
            reward_tokens,
            deadline: Utc::now() + Duration::hours(deadline_hours),
            max_completions: None,
            completed_by: Vec::new(),
            status: TaskStatus::Active,
            created_at: Utc::now(),
            verification_url: None,
            hashtags: Vec::new(),
            min_reach: None,
        }
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    pub fn with_max_completions(mut self, max: usize) -> Self {
        self.max_completions = Some(max);
        self
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å URL –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    pub fn with_verification_url(mut self, url: &str) -> Self {
        self.verification_url = Some(url.to_string());
        self
    }

    /// –î–æ–±–∞–≤–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏
    pub fn with_hashtags(mut self, hashtags: Vec<String>) -> Self {
        self.hashtags = hashtags;
        self
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç
    pub fn with_min_reach(mut self, reach: usize) -> Self {
        self.min_reach = Some(reach);
        self
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É
    pub fn can_be_completed(&self) -> bool {
        if self.status != TaskStatus::Active {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω
        if Utc::now() > self.deadline {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        if let Some(max) = self.max_completions {
            if self.completed_by.len() >= max {
                return false;
            }
        }

        true
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—á—É
    pub fn is_completed_by(&self, user: &str) -> bool {
        self.completed_by.contains(&user.to_string())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç)
    pub fn completion_percentage(&self) -> Option<f64> {
        self.max_completions.map(|max| {
            (self.completed_by.len() as f64 / max as f64) * 100.0
        })
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
    pub fn time_remaining(&self) -> Duration {
        self.deadline.signed_duration_since(Utc::now())
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    pub fn update_status(&mut self) {
        if Utc::now() > self.deadline {
            self.status = TaskStatus::Expired;
        } else if let Some(max) = self.max_completions {
            if self.completed_by.len() >= max {
                self.status = TaskStatus::Completed;
            }
        }
    }
}

/// üéØ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–∏—Å—Å–∏–π
pub struct TaskManager {
    /// –í—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ ID
    pub tasks: HashMap<String, SocialTask>,
    /// –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
    pub total_rewards_distributed: f64,
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    pub platform_stats: HashMap<TaskPlatform, PlatformStats>,
}

/// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
#[derive(Debug, Clone, Default)]
pub struct PlatformStats {
    pub tasks_created: usize,
    pub tasks_completed: usize,
    pub tokens_distributed: f64,
    pub unique_participants: usize,
}

impl TaskManager {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
    pub fn new() -> Self {
        Self {
            tasks: HashMap::new(),
            total_rewards_distributed: 0.0,
            platform_stats: HashMap::new(),
        }
    }

    /// üéØ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –∑–∞–¥–∞—á—É
    pub fn create_task(
        &mut self,
        business: &str,
        platform: TaskPlatform,
        task_type: TaskType,
        description: &str,
        reward: f64,
        deadline_hours: i64,
    ) -> String {
        let task = SocialTask::new(
            business,
            platform.clone(),
            task_type,
            description,
            reward,
            deadline_hours,
        );

        let task_id = task.id.clone();

        // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        let stats = self.platform_stats.entry(platform).or_insert_with(PlatformStats::default);
        stats.tasks_created += 1;

        self.tasks.insert(task_id.clone(), task);

        println!("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –º–∏—Å—Å–∏—è: {}", task_id);

        task_id
    }

    /// ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    ///
    /// # Returns
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–∏–ª–∏ None –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)
    pub fn mark_completed(&mut self, task_id: &str, user: &str) -> Option<f64> {
        if let Some(task) = self.tasks.get_mut(task_id) {
            // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            task.update_status();

            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
            if !task.can_be_completed() {
                println!("üö´ –ó–∞–¥–∞—á–∞ {} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", task_id);
                return None;
            }

            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –∑–∞–¥–∞—á—É
            if task.is_completed_by(user) {
                println!("‚ö†Ô∏è  {} —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É {}", user, task_id);
                return None;
            }

            // –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            task.completed_by.push(user.to_string());

            // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.total_rewards_distributed += task.reward_tokens;
            
            if let Some(stats) = self.platform_stats.get_mut(&task.platform) {
                stats.tasks_completed += 1;
                stats.tokens_distributed += task.reward_tokens;
            }

            // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            task.update_status();

            println!(
                "‚úÖ {} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É {} ‚Üí +{:.2} —Ç–æ–∫–µ–Ω–æ–≤",
                user, task_id, task.reward_tokens
            );

            Some(task.reward_tokens)
        } else {
            println!("‚ùå –ó–∞–¥–∞—á–∞ {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", task_id);
            None
        }
    }

    /// üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    pub fn get_active_tasks(&self) -> Vec<&SocialTask> {
        self.tasks
            .values()
            .filter(|t| t.status == TaskStatus::Active && t.can_be_completed())
            .collect()
    }

    /// üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    pub fn get_tasks_by_platform(&self, platform: &TaskPlatform) -> Vec<&SocialTask> {
        self.tasks
            .values()
            .filter(|t| &t.platform == platform && t.status == TaskStatus::Active)
            .collect()
    }

    /// üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –±–∏–∑–Ω–µ—Å—É
    pub fn get_tasks_by_business(&self, business: &str) -> Vec<&SocialTask> {
        self.tasks
            .values()
            .filter(|t| t.business == business && t.status == TaskStatus::Active)
            .collect()
    }

    /// üë§ –ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pub fn get_user_completed_tasks(&self, user: &str) -> Vec<&SocialTask> {
        self.tasks
            .values()
            .filter(|t| t.is_completed_by(user))
            .collect()
    }

    /// üí∞ –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pub fn get_user_total_rewards(&self, user: &str) -> f64 {
        self.get_user_completed_tasks(user)
            .iter()
            .map(|t| t.reward_tokens)
            .sum()
    }

    /// üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç—ë–∫—à–∏–µ –∑–∞–¥–∞—á–∏
    pub fn cleanup_expired_tasks(&mut self) -> usize {
        let expired: Vec<String> = self
            .tasks
            .iter_mut()
            .filter_map(|(id, task)| {
                task.update_status();
                if task.status == TaskStatus::Expired {
                    Some(id.clone())
                } else {
                    None
                }
            })
            .collect();

        let count = expired.len();
        for id in expired {
            self.tasks.remove(&id);
        }

        if count > 0 {
            println!("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {} –∏—Å—Ç—ë–∫—à–∏—Ö –∑–∞–¥–∞—á", count);
        }

        count
    }

    /// üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º
    pub fn summary(&self) {
        println!("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        println!("‚ïë  üì£ –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –º–∏—Å—Å–∏–∏                          ‚ïë");
        println!("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");

        let active_tasks = self.get_active_tasks();

        if active_tasks.is_empty() {
            println!("üòï –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á");
            return;
        }

        println!("üìã –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π: {}\n", active_tasks.len());

        for task in active_tasks {
            let remaining = task.time_remaining();
            let hours_left = remaining.num_hours();
            
            println!("üéØ [{}]", task.id);
            println!("   {} {} | {} {}", 
                task.platform.emoji(),
                task.platform.name(),
                task.business,
                match &task.task_type {
                    TaskType::CreatePost => "‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç",
                    TaskType::Share => "üîÑ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                    TaskType::Review => "‚≠ê –û—Ç–∑—ã–≤",
                    TaskType::CreateVideo => "üé¨ –°–Ω—è—Ç—å –≤–∏–¥–µ–æ",
                    TaskType::Follow => "‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                    TaskType::Like => "‚ù§Ô∏è –õ–∞–π–∫",
                    TaskType::Comment => "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    TaskType::Referral => "üë• –†–µ—Ñ–µ—Ä–∞–ª",
                    TaskType::Contest => "üèÜ –ö–æ–Ω–∫—É—Ä—Å",
                }
            );
            println!("   üìù {}", task.description);
            println!("   üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {:.2} —Ç–æ–∫–µ–Ω–æ–≤", task.reward_tokens);
            println!("   ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {} —á–∞—Å–æ–≤", hours_left);
            
            if let Some(max) = task.max_completions {
                println!("   üë• –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {}/{} ({:.1}%)", 
                    task.completed_by.len(), 
                    max,
                    task.completion_percentage().unwrap_or(0.0)
                );
            } else {
                println!("   üë• –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", task.completed_by.len());
            }

            if !task.hashtags.is_empty() {
                println!("   üè∑Ô∏è  –•—ç—à—Ç–µ–≥–∏: {}", task.hashtags.join(" "));
            }

            println!();
        }

        println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
        println!("üí∞ –í—Å–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {:.2} —Ç–æ–∫–µ–Ω–æ–≤\n", self.total_rewards_distributed);
    }

    /// üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    pub fn platform_report(&self) {
        println!("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        println!("‚ïë  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º                               ‚ïë");
        println!("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");

        if self.platform_stats.is_empty() {
            println!("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è");
            return;
        }

        for (platform, stats) in &self.platform_stats {
            println!("{} **{}**", platform.emoji(), platform.name());
            println!("   üìã –ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: {}", stats.tasks_created);
            println!("   ‚úÖ –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {}", stats.tasks_completed);
            println!("   üí∞ –¢–æ–∫–µ–Ω–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {:.2}", stats.tokens_distributed);
            println!();
        }

        println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
    }

    /// üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è LinkHub –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
    ///
    /// –°–æ–∑–¥–∞—ë—Ç –µ–¥–∏–Ω—ã–π –ª–∏–Ω–∫-—Ö–∞–±, –∫—É–¥–∞ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –≤–µ—Å—å —Ç—Ä–∞—Ñ–∏–∫
    pub fn generate_linkhub(&self, business: &str, base_url: &str) -> String {
        let safe_business = business.replace(" ", "-").to_lowercase();
        let linkhub_url = format!("{}/go/{}", base_url, safe_business);

        println!("\nüîó **LinkHub –¥–ª—è {}**", business);
        println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
        println!("üåê {}", linkhub_url);
        println!();
        println!("üì± –ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∞—Ñ–∏–∫:");
        println!("   ‚Ä¢ üçΩÔ∏è  –ú–µ–Ω—é –∏ –∑–∞–∫–∞–∑");
        println!("   ‚Ä¢ ü§ñ Telegram Bot");
        println!("   ‚Ä¢ üì∏ Instagram");
        println!("   ‚Ä¢ üéÅ –ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞");
        println!("   ‚Ä¢ ‚≠ê –û—Ç–∑—ã–≤—ã");
        println!("   ‚Ä¢ üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
        println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");

        linkhub_url
    }
}

impl Default for TaskManager {
    fn default() -> Self {
        Self::new()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_create_task() {
        let mut manager = TaskManager::new();
        let task_id = manager.create_task(
            "Test Restaurant",
            TaskPlatform::Instagram,
            TaskType::CreatePost,
            "Test task",
            50.0,
            24,
        );

        assert!(manager.tasks.contains_key(&task_id));
        assert_eq!(manager.tasks[&task_id].reward_tokens, 50.0);
    }

    #[test]
    fn test_mark_completed() {
        let mut manager = TaskManager::new();
        let task_id = manager.create_task(
            "Test Restaurant",
            TaskPlatform::Instagram,
            TaskType::CreatePost,
            "Test task",
            50.0,
            24,
        );

        let reward = manager.mark_completed(&task_id, "@testuser");
        assert_eq!(reward, Some(50.0));
        assert_eq!(manager.total_rewards_distributed, 50.0);

        // –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–≤–∞–∂–¥—ã
        let reward2 = manager.mark_completed(&task_id, "@testuser");
        assert_eq!(reward2, None);
    }

    #[test]
    fn test_task_expiration() {
        let mut task = SocialTask::new(
            "Test",
            TaskPlatform::Instagram,
            TaskType::CreatePost,
            "Test",
            10.0,
            -1, // –ò—Å—Ç–µ–∫–ª–∞ —á–∞—Å –Ω–∞–∑–∞–¥
        );

        task.update_status();
        assert_eq!(task.status, TaskStatus::Expired);
        assert!(!task.can_be_completed());
    }

    #[test]
    fn test_max_completions() {
        let mut manager = TaskManager::new();
        let task_id = manager.create_task(
            "Test",
            TaskPlatform::Instagram,
            TaskType::CreatePost,
            "Test",
            10.0,
            24,
        );

        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç 2 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if let Some(task) = manager.tasks.get_mut(&task_id) {
            task.max_completions = Some(2);
        }

        manager.mark_completed(&task_id, "@user1");
        manager.mark_completed(&task_id, "@user2");
        
        // –¢—Ä–µ—Ç—å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
        let reward3 = manager.mark_completed(&task_id, "@user3");
        assert_eq!(reward3, None);
    }
}
