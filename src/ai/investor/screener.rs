// üîç Investment Screener - –°–∫—Ä–∏–Ω–∏–Ω–≥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
//
// –ê–ª–≥–æ—Ä–∏—Ç–º —Å–∫–æ—Ä–∏–Ω–≥–∞, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º

use super::opportunity::{CompanyMetrics, InvestmentOpportunity};

/// ‚öñÔ∏è –í–µ—Å–∞ –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞
#[derive(Clone, Debug)]
pub struct ScreenerWeights {
    /// –í–µ—Å —Ä–æ—Å—Ç–∞ –ø—Ä–æ–¥–∞–∂ (0.0..1.0)
    pub w_sales: f64,
    /// –í–µ—Å —Ä–æ—Å—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ (0.0..1.0)
    pub w_orders: f64,
    /// –í–µ—Å ROI –∫–∞–º–ø–∞–Ω–∏–π (0.0..1.0)
    pub w_roi: f64,
    /// –í–µ—Å retention (0.0..1.0)
    pub w_retention: f64,
    /// –í–µ—Å –º–∞—Ä–∂–∏ (0.0..1.0)
    pub w_margin: f64,
    /// –í–µ—Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (0.0..1.0)
    pub w_social: f64,
    /// –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–∏—Å–∫ (0.0..1.0)
    pub w_risk_penalty: f64,
}

impl Default for ScreenerWeights {
    fn default() -> Self {
        Self {
            w_sales: 0.22,
            w_orders: 0.18,
            w_roi: 0.18,
            w_retention: 0.16,
            w_margin: 0.14,
            w_social: 0.12,
            w_risk_penalty: 0.30,
        }
    }
}

impl ScreenerWeights {
    /// –°–æ–∑–¥–∞—Ç—å –≤–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    pub fn new() -> Self {
        Self::default()
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ —Ä–æ—Å—Ç
    pub fn growth_focused() -> Self {
        Self {
            w_sales: 0.30,
            w_orders: 0.25,
            w_roi: 0.20,
            w_retention: 0.10,
            w_margin: 0.05,
            w_social: 0.10,
            w_risk_penalty: 0.25,
        }
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    pub fn stability_focused() -> Self {
        Self {
            w_sales: 0.15,
            w_orders: 0.15,
            w_roi: 0.20,
            w_retention: 0.25,
            w_margin: 0.20,
            w_social: 0.05,
            w_risk_penalty: 0.40,
        }
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
    pub fn profitability_focused() -> Self {
        Self {
            w_sales: 0.15,
            w_orders: 0.10,
            w_roi: 0.30,
            w_retention: 0.15,
            w_margin: 0.25,
            w_social: 0.05,
            w_risk_penalty: 0.35,
        }
    }
}

/// üîç –°–∫—Ä–∏–Ω–µ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
pub struct InvestmentScreener {
    /// –í–µ—Å–∞ –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞
    pub weights: ScreenerWeights,
}

impl InvestmentScreener {
    /// –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω–µ—Ä —Å –≤–µ—Å–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    pub fn new() -> Self {
        Self {
            weights: ScreenerWeights::default(),
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
    pub fn with_weights(weights: ScreenerWeights) -> Self {
        Self { weights }
    }

    /// –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0.0..1.0
    fn normalize(&self, value: f64, min: f64, max: f64) -> f64 {
        if max <= min {
            return 0.5;
        }
        ((value - min) / (max - min)).clamp(0.0, 1.0)
    }

    /// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
    ///
    /// –§–æ—Ä–º—É–ª–∞: 
    /// raw_score = Œ£(weight_i * normalized_metric_i) - w_risk_penalty * risk
    /// final_score = raw_score * 100 (–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ 0..100)
    pub fn score_company(&self, metrics: &CompanyMetrics) -> f64 {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        // –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂: 0.5 (—Å—Ç–∞–≥–Ω–∞—Ü–∏—è) ‚Üí 2.0 (—É–¥–≤–æ–µ–Ω–∏–µ)
        let sales_norm = self.normalize(metrics.sales_growth_30d, 0.5, 2.0);
        
        // –†–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤: 0.5 ‚Üí 2.0
        let orders_norm = self.normalize(metrics.orders_growth_30d, 0.5, 2.0);
        
        // ROI: 0.0 ‚Üí 3.0 (300%)
        let roi_norm = self.normalize(metrics.roi_last_campaign, 0.0, 3.0);
        
        // Retention —É–∂–µ –≤ 0..1
        let retention_norm = metrics.retention_30d;
        
        // Margin: 0.0 ‚Üí 0.5 (50%)
        let margin_norm = self.normalize(metrics.margin, 0.0, 0.5);
        
        // Social momentum —É–∂–µ –≤ 0..1
        let social_norm = metrics.social_momentum;
        
        // –†–∏—Å–∫ —É–∂–µ –≤ 0..1 (–Ω–æ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —à—Ç—Ä–∞—Ñ–∞)
        let risk_penalty = metrics.risk;

        // –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞
        let raw_score = 
            self.weights.w_sales * sales_norm +
            self.weights.w_orders * orders_norm +
            self.weights.w_roi * roi_norm +
            self.weights.w_retention * retention_norm +
            self.weights.w_margin * margin_norm +
            self.weights.w_social * social_norm -
            self.weights.w_risk_penalty * risk_penalty;

        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤ 0..100
        (raw_score * 100.0).clamp(0.0, 100.0)
    }

    /// –°–∫—Ä–∏–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –∏ —Å–æ–∑–¥–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    pub fn screen(&self, companies: Vec<CompanyMetrics>) -> Vec<InvestmentOpportunity> {
        companies.into_iter()
            .map(|metrics| {
                let score = self.score_company(&metrics);
                InvestmentOpportunity::new(metrics, score)
            })
            .collect()
    }

    /// –°–∫—Ä–∏–Ω–∏—Ç—å –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–∫–æ—Ä–∏–Ω–≥—É
    pub fn screen_and_rank(&self, companies: Vec<CompanyMetrics>) -> Vec<InvestmentOpportunity> {
        let mut opportunities = self.screen(companies);
        opportunities.sort_by(|a, b| b.score.partial_cmp(&a.score).unwrap());
        opportunities
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø N –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    pub fn screen_top_n(&self, companies: Vec<CompanyMetrics>, n: usize) -> Vec<InvestmentOpportunity> {
        let ranked = self.screen_and_rank(companies);
        ranked.into_iter().take(n).collect()
    }

    /// –û—Ç—á–µ—Ç –ø–æ —Å–∫–æ—Ä–∏–Ω–≥—É (debug)
    pub fn score_breakdown(&self, metrics: &CompanyMetrics) {
        println!("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        println!("‚ïë  üîç –†–∞–∑–±–∏–≤–∫–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞                                       ‚ïë");
        println!("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");

        println!("üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {} ({})\n", metrics.name, metrics.symbol);

        let sales_norm = self.normalize(metrics.sales_growth_30d, 0.5, 2.0);
        let orders_norm = self.normalize(metrics.orders_growth_30d, 0.5, 2.0);
        let roi_norm = self.normalize(metrics.roi_last_campaign, 0.0, 3.0);
        let retention_norm = metrics.retention_30d;
        let margin_norm = self.normalize(metrics.margin, 0.0, 0.5);
        let social_norm = metrics.social_momentum;
        let risk_penalty = metrics.risk;

        println!("üìä **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∫–æ—Ä–∏–Ω–≥–∞:**\n");

        println!("   1. –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂: {:.1}% ‚Üí norm {:.2} √ó weight {:.2} = {:.2}",
            (metrics.sales_growth_30d - 1.0) * 100.0,
            sales_norm,
            self.weights.w_sales,
            sales_norm * self.weights.w_sales
        );

        println!("   2. –†–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤: {:.1}% ‚Üí norm {:.2} √ó weight {:.2} = {:.2}",
            (metrics.orders_growth_30d - 1.0) * 100.0,
            orders_norm,
            self.weights.w_orders,
            orders_norm * self.weights.w_orders
        );

        println!("   3. ROI –∫–∞–º–ø–∞–Ω–∏–π: {:.1}% ‚Üí norm {:.2} √ó weight {:.2} = {:.2}",
            metrics.roi_last_campaign * 100.0,
            roi_norm,
            self.weights.w_roi,
            roi_norm * self.weights.w_roi
        );

        println!("   4. Retention: {:.1}% ‚Üí norm {:.2} √ó weight {:.2} = {:.2}",
            retention_norm * 100.0,
            retention_norm,
            self.weights.w_retention,
            retention_norm * self.weights.w_retention
        );

        println!("   5. –ú–∞—Ä–∂–∞: {:.1}% ‚Üí norm {:.2} √ó weight {:.2} = {:.2}",
            metrics.margin * 100.0,
            margin_norm,
            self.weights.w_margin,
            margin_norm * self.weights.w_margin
        );

        println!("   6. –°–æ—Ü—Å–µ—Ç–∏: {:.1}/10 ‚Üí norm {:.2} √ó weight {:.2} = {:.2}",
            social_norm * 10.0,
            social_norm,
            self.weights.w_social,
            social_norm * self.weights.w_social
        );

        println!("\n   7. –®–¢–†–ê–§ –∑–∞ —Ä–∏—Å–∫: {:.1}/10 √ó weight {:.2} = -{:.2}",
            risk_penalty * 10.0,
            self.weights.w_risk_penalty,
            risk_penalty * self.weights.w_risk_penalty
        );

        let total_score = self.score_company(metrics);
        println!("\n‚ú® **–ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä–∏–Ω–≥: {:.1}/100**\n", total_score);

        println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
    }
}

impl Default for InvestmentScreener {
    fn default() -> Self {
        Self::new()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_normalize() {
        let screener = InvestmentScreener::new();
        assert_eq!(screener.normalize(0.5, 0.0, 1.0), 0.5);
        assert_eq!(screener.normalize(1.0, 0.0, 1.0), 1.0);
        assert_eq!(screener.normalize(0.0, 0.0, 1.0), 0.0);
    }

    #[test]
    fn test_score_company() {
        let screener = InvestmentScreener::new();
        let metrics = CompanyMetrics::new("TEST".to_string(), "Test".to_string(), 1.0)
            .with_growth(1.5, 1.3)
            .with_financials(0.4, 1.2)
            .with_operations(0.7, 0.2)
            .with_social(0.8);

        let score = screener.score_company(&metrics);
        assert!(score > 0.0);
        assert!(score <= 100.0);
    }

    #[test]
    fn test_screen_and_rank() {
        let screener = InvestmentScreener::new();
        
        let companies = vec![
            CompanyMetrics::new("A".to_string(), "A".to_string(), 1.0)
                .with_growth(1.2, 1.1)
                .with_financials(0.3, 0.8),
            CompanyMetrics::new("B".to_string(), "B".to_string(), 1.0)
                .with_growth(1.8, 1.5)
                .with_financials(0.4, 1.5),
        ];

        let ranked = screener.screen_and_rank(companies);
        assert!(ranked[0].score >= ranked[1].score);
    }
}
