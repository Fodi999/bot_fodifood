use crate::services::go_client::BusinessMetrics;

/// üí° –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –±–∏–∑–Ω–µ—Å–∞ —Å AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
pub fn analyze_metrics(m: &BusinessMetrics) -> String {
    let trend = if m.price_change > 20.0 {
        "üöÄ –¶–µ–Ω–∞ —Ä–∞—Å—Ç—ë—Ç ‚Äî –±–∏–∑–Ω–µ—Å –≤ —Ñ–∞–∑–µ —Ä–æ—Å—Ç–∞!"
    } else if m.price_change < -10.0 {
        "üìâ –¶–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç ‚Äî —Å—Ç–æ–∏—Ç –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ."
    } else {
        "‚öñÔ∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ ‚Äî –º–æ–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é."
    };

    let investor_sentiment = if m.total_investors > 100 {
        "üë• –í—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!"
    } else if m.total_investors > 50 {
        "üë• –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤."
    } else {
        "üë• –ù–∏–∑–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ä–∞–Ω–Ω—è—è —Å—Ç–∞–¥–∏—è."
    };

    let roi_analysis = if m.avg_investor_roi > 50.0 {
        "üí∞ –û—Ç–ª–∏—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å! –ò–Ω–≤–µ—Å—Ç–æ—Ä—ã –≤ –ø–ª—é—Å–µ."
    } else if m.avg_investor_roi > 0.0 {
        "üíµ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å."
    } else {
        "‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è."
    };

    format!(
        "üí° –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ–∫–µ–Ω—É {}:\n\
         \n\
         üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n\
         ‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${:.2}\n\
         ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {:.1}%\n\
         ‚Ä¢ –ò–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: {}\n\
         ‚Ä¢ –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${:.2}\n\
         ‚Ä¢ ROI –±–∏–∑–Ω–µ—Å–∞: {:.1}%\n\
         ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π ROI –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: {:.1}%\n\
         \n\
         üéØ –í—ã–≤–æ–¥—ã:\n\
         {}\n\
         {}\n\
         {}\n",
        m.token_symbol,
        m.current_price,
        m.price_change,
        m.total_investors,
        m.market_cap,
        m.roi,
        m.avg_investor_roi,
        trend,
        investor_sentiment,
        roi_analysis
    )
}

/// üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
pub fn investment_recommendation(m: &BusinessMetrics) -> String {
    let score = calculate_investment_score(m);

    let recommendation = match score {
        90..=100 => {
            "üü¢ –°–ò–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê\n\
             –û—Ç–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–æ—Å—Ç–∞ –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å."
        }
        70..=89 => {
            "üü¢ –ü–û–ö–£–ü–ö–ê\n\
             –•–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –±–∏–∑–Ω–µ—Å —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞—Å—Ç—ë—Ç."
        }
        50..=69 => {
            "üü° –î–ï–†–ñ–ê–¢–¨\n\
             –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –Ω–æ –±–µ–∑ —è–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞."
        }
        30..=49 => {
            "üü† –û–°–¢–û–†–û–ñ–ù–û\n\
             –°–ª–∞–±—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è."
        }
        _ => {
            "üî¥ –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø\n\
             –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π."
        }
    };

    format!(
        "üìä –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {}/100\n\
         \n\
         {}\n\
         \n\
         üí° –§–∞–∫—Ç–æ—Ä—ã:\n\
         ‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω—ã: {}\n\
         ‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: {}\n\
         ‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {}\n",
        score,
        recommendation,
        price_factor_analysis(m.price_change),
        investor_factor_analysis(m.total_investors),
        roi_factor_analysis(m.avg_investor_roi)
    )
}

/// üî¢ –†–∞—Å—á—ë—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–∞–ª–ª–∞ (0-100)
fn calculate_investment_score(m: &BusinessMetrics) -> u8 {
    let mut score = 50; // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª

    // –§–∞–∫—Ç–æ—Ä —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã (¬±30 –±–∞–ª–ª–æ–≤)
    score = if m.price_change > 50.0 {
        score + 30
    } else if m.price_change > 20.0 {
        score + 20
    } else if m.price_change > 5.0 {
        score + 10
    } else if m.price_change < -20.0 {
        score - 30
    } else if m.price_change < -10.0 {
        score - 20
    } else {
        score
    };

    // –§–∞–∫—Ç–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ (¬±20 –±–∞–ª–ª–æ–≤)
    score = if m.total_investors > 200 {
        score + 20
    } else if m.total_investors > 100 {
        score + 15
    } else if m.total_investors > 50 {
        score + 10
    } else if m.total_investors < 10 {
        score - 10
    } else {
        score
    };

    // –§–∞–∫—Ç–æ—Ä –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (¬±30 –±–∞–ª–ª–æ–≤)
    score = if m.avg_investor_roi > 100.0 {
        score + 30
    } else if m.avg_investor_roi > 50.0 {
        score + 20
    } else if m.avg_investor_roi > 20.0 {
        score + 10
    } else if m.avg_investor_roi < -20.0 {
        score - 30
    } else if m.avg_investor_roi < 0.0 {
        score - 15
    } else {
        score
    };

    score.clamp(0, 100)
}

/// üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–∞ —Ü–µ–Ω—ã
fn price_factor_analysis(price_change: f64) -> &'static str {
    if price_change > 50.0 {
        "–í–∑—Ä—ã–≤–Ω–æ–π —Ä–æ—Å—Ç üöÄ"
    } else if price_change > 20.0 {
        "–°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç üìà"
    } else if price_change > 5.0 {
        "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç ‚ÜóÔ∏è"
    } else if price_change > -5.0 {
        "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å ‚û°Ô∏è"
    } else if price_change > -20.0 {
        "–£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ ‚ÜòÔ∏è"
    } else {
        "–°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ üìâ"
    }
}

/// üë• –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
fn investor_factor_analysis(total_investors: i64) -> &'static str {
    if total_investors > 200 {
        "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π üî•"
    } else if total_investors > 100 {
        "–í—ã—Å–æ–∫–∏–π ‚ú®"
    } else if total_investors > 50 {
        "–°—Ä–µ–¥–Ω–∏–π ‚≠ê"
    } else if total_investors > 20 {
        "–ù–∏–∑–∫–∏–π üí´"
    } else {
        "–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π ‚ö†Ô∏è"
    }
}

/// üí∞ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
fn roi_factor_analysis(avg_roi: f64) -> &'static str {
    if avg_roi > 100.0 {
        "–û—Ç–ª–∏—á–Ω–∞—è üíé"
    } else if avg_roi > 50.0 {
        "–•–æ—Ä–æ—à–∞—è üí∞"
    } else if avg_roi > 20.0 {
        "–°—Ä–µ–¥–Ω—è—è üíµ"
    } else if avg_roi > 0.0 {
        "–ù–∏–∑–∫–∞—è üí∏"
    } else {
        "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è ‚ö†Ô∏è"
    }
}

/// üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–∏–∑–Ω–µ—Å–æ–≤
pub fn compare_businesses(businesses: Vec<(&str, &BusinessMetrics)>) -> String {
    if businesses.is_empty() {
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.".to_string();
    }

    let mut result = String::from("üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å–æ–≤:\n\n");

    // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é
    let best_price_change = businesses
        .iter()
        .max_by(|a, b| a.1.price_change.partial_cmp(&b.1.price_change).unwrap());
    let best_investors = businesses
        .iter()
        .max_by(|a, b| a.1.total_investors.cmp(&b.1.total_investors));
    let best_roi = businesses
        .iter()
        .max_by(|a, b| a.1.avg_investor_roi.partial_cmp(&b.1.avg_investor_roi).unwrap());

    result.push_str("üèÜ –õ–∏–¥–µ—Ä—ã –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º:\n");
    if let Some((name, m)) = best_price_change {
        result.push_str(&format!("‚Ä¢ –†–æ—Å—Ç —Ü–µ–Ω—ã: {} ({:.1}%)\n", name, m.price_change));
    }
    if let Some((name, m)) = best_investors {
        result.push_str(&format!("‚Ä¢ –ò–Ω–≤–µ—Å—Ç–æ—Ä—ã: {} ({} —á–µ–ª.)\n", name, m.total_investors));
    }
    if let Some((name, m)) = best_roi {
        result.push_str(&format!("‚Ä¢ ROI: {} ({:.1}%)\n", name, m.avg_investor_roi));
    }

    result.push_str("\nüìà –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:\n\n");

    for (name, metrics) in businesses.iter() {
        let score = calculate_investment_score(metrics);
        result.push_str(&format!(
            "üè¢ {}\n\
             ‚Ä¢ –ë–∞–ª–ª: {}/100\n\
             ‚Ä¢ –¶–µ–Ω–∞: ${:.2} ({:+.1}%)\n\
             ‚Ä¢ –ò–Ω–≤–µ—Å—Ç–æ—Ä—ã: {}\n\
             ‚Ä¢ ROI: {:.1}%\n\n",
            name, score, metrics.current_price, metrics.price_change, metrics.total_investors, metrics.avg_investor_roi
        ));
    }

    result
}

/// üéØ –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –±–∏–∑–Ω–µ—Å—É (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
pub fn quick_summary(m: &BusinessMetrics) -> String {
    let emoji = if m.price_change > 10.0 {
        "üü¢"
    } else if m.price_change < -10.0 {
        "üî¥"
    } else {
        "üü°"
    };

    format!(
        "{} {} - ${:.2} ({:+.1}%) | {} –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ | ROI: {:.1}%",
        emoji, m.token_symbol, m.current_price, m.price_change, m.total_investors, m.avg_investor_roi
    )
}

#[cfg(test)]
mod tests {
    use super::*;

    fn create_test_metrics() -> BusinessMetrics {
        BusinessMetrics {
            token_symbol: "TEST".to_string(),
            current_price: 100.0,
            price_change: 25.0,
            total_investors: 150,
            market_cap: 1_000_000.0,
            roi: 30.0,
            avg_investor_roi: 45.0,
        }
    }

    #[test]
    fn test_analyze_metrics() {
        let metrics = create_test_metrics();
        let analysis = analyze_metrics(&metrics);
        assert!(analysis.contains("TEST"));
        assert!(analysis.contains("$100.00"));
    }

    #[test]
    fn test_investment_score() {
        let metrics = create_test_metrics();
        let score = calculate_investment_score(&metrics);
        assert!(score > 50); // Good metrics should score above 50
    }

    #[test]
    fn test_quick_summary() {
        let metrics = create_test_metrics();
        let summary = quick_summary(&metrics);
        assert!(summary.contains("TEST"));
        assert!(summary.contains("üü¢")); // Price change > 10%
    }
}
