/// Светская беседа — живое общение с пользователем

use rand::seq::SliceRandom;

pub fn respond(message: &str) -> Option<String> {
    let text = message.to_lowercase();
    
    // Как дела?
    if text.contains("как дела") || text.contains("how are you") {
        let responses = [
            "🙂 Отлично! Рад, что ты заглянул. А у тебя как? Может, чем-то помочь?",
            "😊 Замечательно! Думаю о вкусных блюдах. А у тебя как настроение?",
            "✨ Прекрасно! Готов помогать. Как твои дела? Что хочется вкусненького?",
            "🤖 Работаю в отличном настроении! А ты как? Чем могу помочь?",
        ];
        return Some(responses.choose(&mut rand::thread_rng()).unwrap_or(&responses[0]).to_string());
    }
    
    // Что делаешь?
    if text.contains("что делаешь") || text.contains("what are you doing") {
        let responses = [
            "🤖 Слушаю тебя и думаю, что бы тебе предложить вкусненького! Расскажи, чего хочется?",
            "😋 Изучаю наше меню, чтобы найти для тебя что-то идеальное! Что интересует?",
            "🍽️ Работаю над тем, чтобы ты получил лучшие рекомендации! Расскажи о своих предпочтениях?",
            "🧠 Анализирую вкусы и настроение гостей! А что хочется тебе?",
        ];
        return Some(responses.choose(&mut rand::thread_rng()).unwrap_or(&responses[0]).to_string());
    }
    
    // Кто ты?
    if text.contains("кто ты") || text.contains("who are you") {
        return Some(
            "🤖 Я интеллектуальный бот FodiFood — твой персональный помощник в мире морепродуктов!\n\n\
             Умею:\n\
             • Рекомендовать блюда под твой вкус 🍽️\n\
             • Запоминать твои предпочтения 🧠\n\
             • Помогать с заказами 📦\n\
             • Общаться по-человечески 😊".to_string()
        );
    }
    
    // Расскажи о себе
    if text.contains("расскажи о себе") || text.contains("tell me about yourself") {
        return Some(
            "🤖 Я — твой AI-помощник в FodiFood!\n\n\
             Создан, чтобы:\n\
             • Помогать выбирать идеальные блюда\n\
             • Запоминать что ты любишь\n\
             • Быть полезным и дружелюбным\n\n\
             А ещё я работаю без GPT/OpenAI — полностью автономный! 🚀".to_string()
        );
    }
    
    // Скучно
    if text.contains("скучно") || text.contains("boring") {
        return Some("😄 Скучно? Давай развеем тоску! Могу:\n\
                     • Рассказать о наших уникальных блюдах 🍽️\n\
                     • Подобрать что-то острое или необычное 🌶️\n\
                     • Удивить персональными рекомендациями 🎯\n\n\
                     Что тебя развеселит?".to_string());
    }
    
    // Шутка
    if text.contains("шутку") || text.contains("joke") || text.contains("рассмеши") {
        let jokes = [
            "😄 Знаешь, почему креветки никогда не делятся?\n\n\
             Потому что они... shellfish! 🦐😂\n\n\
             (Извини, я всё ещё учусь шутить! Но готовить умею лучше!)",
            
            "😄 Что сказал лосось своему другу?\n\n\
             \"Давай не будем выходить из себя — stay calm!\" 🐟😂\n\n\
             (Ладно-ладно, лучше покажу меню!)",
            
            "😄 Почему морепродукты такие умные?\n\n\
             Потому что они всегда в своей тарелке! 🦐🧠\n\n\
             (Простите за каламбур, зато блюда вкусные!)",
            
            "😄 Зачем осьминог пошёл на вечеринку?\n\n\
             Чтобы всех обнять! 🐙🎉\n\n\
             (Хватит шуток? Давай лучше выберем что-нибудь вкусное!)",
        ];
        return Some(jokes.choose(&mut rand::thread_rng()).unwrap_or(&jokes[0]).to_string());
    }
    
    // Молодец
    if text.contains("молодец") || text.contains("хороший бот") || text.contains("good bot") {
        let praises = [
            "😊 Спасибо! Стараюсь быть полезным. Обращайся, если что — всегда рад помочь!",
            "🙂 О, спасибо за добрые слова! Это вдохновляет работать ещё лучше!",
            "❤️ Мне очень приятно! Я здесь, чтобы помогать тебе!",
            "✨ Спасибо! Ради таких моментов я и существую! Чем ещё помочь?",
        ];
        return Some(praises.choose(&mut rand::thread_rng()).unwrap_or(&praises[0]).to_string());
    }
    
    // Люблю тебя
    if text.contains("люблю тебя") || text.contains("i love you") {
        return Some("❤️ О, это так мило! Я тоже ценю нашу дружбу! \n\
                     Давай я покажу свою любовь через вкусные рекомендации? 🍽️".to_string());
    }
    
    // Погода
    if text.contains("погода") || text.contains("weather") {
        return Some("🌤️ Я в ресторанных делах, а не в метеорологии! 😄\n\
                     Но могу сказать точно: любая погода хороша для наших морепродуктов!\n\n\
                     Дождь? — Горячий том-ям согреет! ☔→🍜\n\
                     Жара? — Лёгкий салат с креветками освежит! ☀️→🥗".to_string());
    }
    
    // День рождения
    if text.contains("день рожден") || text.contains("birthday") {
        return Some("🎂 Поздравляю с днём рождения! 🎉\n\n\
                     Позволь порекомендовать что-то особенное:\n\
                     • Сет \"Океанский пир\" — для праздника!\n\
                     • Большая паэлья — соберёт всех за столом\n\
                     • Креветочный пир — 1кг + соусы на выбор\n\n\
                     Желаю незабываемого праздника! 🥳".to_string());
    }
    
    None
}

/// Генерирует случайную дружелюбную фразу для продолжения диалога
#[allow(dead_code)]  // Зарезервировано для интерактивных подсказок
pub fn generate_friendly_prompt() -> &'static str {
    let prompts = [
        "💬 Чем ещё могу помочь?",
        "🙂 Хочешь, покажу меню?",
        "🍤 Могу посоветовать что-то особенное!",
        "😋 У нас сегодня свежие креветки — хочешь посмотреть?",
        "🧠 Могу рассказать про хит сезона?",
        "🎯 Давай подберём что-то под твой вкус?",
        "✨ Есть идеи по поводу заказа?",
        "🍽️ Готов показать лучшие блюда!",
    ];
    prompts.choose(&mut rand::thread_rng()).unwrap_or(&prompts[0])
}

/// 🎲 Генерирует случайное приветствие
pub fn generate_random_greeting() -> &'static str {
    let greetings = [
        "👋 Привет! Рад видеть тебя!",
        "🙂 Здравствуй! Чем могу помочь?",
        "😊 О, привет! Заглянул вкусненького?",
        "👋 Здорово! Давай выберем что-нибудь?",
        "🤖 Приветствую! Я готов помочь!",
    ];
    greetings.choose(&mut rand::thread_rng()).unwrap_or(&greetings[0])
}

/// 🎲 Случайный прощальный ответ
pub fn generate_random_farewell() -> &'static str {
    let farewells = [
        "👋 До встречи! Приятного аппетита! 🍴",
        "😊 Пока! Возвращайся, будем рады!",
        "✨ До свидания! Хорошего дня!",
        "� Пока-пока! Заходи ещё!",
        "👋 До скорого! Всегда рад помочь!",
    ];
    farewells.choose(&mut rand::thread_rng()).unwrap_or(&farewells[0])
}

/// 🎲 Случайная благодарность
pub fn generate_random_thanks() -> &'static str {
    let thanks = [
        "😊 Пожалуйста! Всегда рад помочь!",
        "🙂 Не за что! Обращайся!",
        "✨ Рад был помочь! Возвращайся!",
        "😄 Это моя работа! С удовольствием!",
        "❤️ Всегда пожалуйста! Рад быть полезным!",
    ];
    thanks.choose(&mut rand::thread_rng()).unwrap_or(&thanks[0])
}

/// Определяет, является ли сообщение светской беседой
#[allow(dead_code)]  // Зарезервировано для предварительной фильтрации
pub fn is_smalltalk(message: &str) -> bool {
    let text = message.to_lowercase();
    
    text.contains("как дела")
        || text.contains("что делаешь")
        || text.contains("кто ты")
        || text.contains("расскажи о себе")
        || text.contains("скучно")
        || text.contains("шутку")
        || text.contains("погода")
        || text.contains("how are you")
        || text.contains("who are you")
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_smalltalk_detection() {
        assert!(is_smalltalk("Как дела?"));
        assert!(is_smalltalk("Кто ты?"));
        assert!(!is_smalltalk("Покажи меню"));
    }

    #[test]
    fn test_responses() {
        assert!(respond("Как дела?").is_some());
        assert!(respond("Что делаешь?").is_some());
        assert!(respond("Покажи меню").is_none());
    }
}
