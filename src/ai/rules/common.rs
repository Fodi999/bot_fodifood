/// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ–±—â–∏–µ –¥–∏–∞–ª–æ–≥–∏
use super::smalltalk;

pub fn greeting_response() -> String {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    let greeting = smalltalk::generate_random_greeting();

    format!(
        "{}\n\n\
         –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\
         ‚Ä¢ üì¶ –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞\n\
         ‚Ä¢ üçΩÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é\n\
         ‚Ä¢ üåü –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\
         ‚Ä¢ ÔøΩ –ù–∞–π—Ç–∏ –±–ª—é–¥–æ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É\n\n\
         –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ üòä",
        greeting
    )
}

pub fn farewell_response() -> String {
    // –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ
    smalltalk::generate_random_farewell().to_string()
}

pub fn thanks_response() -> String {
    // –°–ª—É—á–∞–π–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
    smalltalk::generate_random_thanks().to_string()
}

pub fn help_response() -> String {
    "ü§ñ **–ß—Ç–æ —è —É–º–µ—é:**\n\n\
     ÔøΩ **–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏ –º–µ–Ω—è:**\n\
     ‚Ä¢ \"–ü–æ–∫–∞–∂–∏ –º–µ–Ω—é\" ‚Äî —É–≤–∏–¥–∏—à—å –≤—Å–µ –Ω–∞—à–∏ –±–ª—é–¥–∞\n\
     ‚Ä¢ \"–ì–¥–µ –º–æ–π –∑–∞–∫–∞–∑?\" ‚Äî –ø—Ä–æ–≤–µ—Ä—é —Å—Ç–∞—Ç—É—Å\n\
     ‚Ä¢ \"–ß—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å?\" ‚Äî –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –±–ª—é–¥–æ\n\
     ‚Ä¢ \"–ü–æ–∫–∞–∂–∏ —á—Ç–æ –µ—Å—Ç—å —Å –ª–æ—Å–æ—Å–µ–º\" ‚Äî –Ω–∞–π–¥—É –±–ª—é–¥–∞ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É\n\
     ‚Ä¢ \"–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø–∞—ç–ª—å—è?\" ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É –æ —Ü–µ–Ω–∞—Ö\n\
     ‚Ä¢ \"–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫—Ä–µ–≤–µ—Ç–∫–∏\" ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –±–ª—é–¥–µ\n\n\
     üß† –Ø –ø–æ–Ω–∏–º–∞—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫, –ø–∏—à–∏ –∫–∞–∫ —É–¥–æ–±–Ω–æ!\n\n\
     üë®‚Äçüíº **–î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ:**\n\
     ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ\n\
     ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂\n\
     ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"
        .to_string()
}

/// üë§ –û—Ç–≤–µ—Ç –Ω–∞ "–ö—Ç–æ —è?" / "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?"
pub fn whoami_response(name: Option<&str>) -> String {
    if let Some(user_name) = name {
        format!(
            "üôÇ –¢–µ–±—è –∑–æ–≤—É—Ç **{}**!\n\n\
             üí° –Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ—ë –∏–º—è –∏ —Å–º–æ–≥—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
            user_name
        )
    } else {
        "ü§î –•–º... –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç.\n\n\
         üí° –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –ù–∞–ø—Ä–∏–º–µ—Ä:\n\
         ‚Ä¢ \"–ú–µ–Ω—è –∑–æ–≤—É—Ç –î–∏–º–∞\"\n\
         ‚Ä¢ \"–Ø –ê–Ω–¥—Ä–µ–π\"\n\n\
         –¢–∞–∫ —è —Å–º–æ–≥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –ø–æ –∏–º–µ–Ω–∏! üòä"
            .to_string()
    }
}

pub fn unknown_response() -> String {
    "ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å.\n\n\
     üí° –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å:\n\
     ‚Ä¢ \"–ü–æ–∫–∞–∂–∏ –º–µ–Ω—é\" ‚Äî —É–≤–∏–¥–∏—à—å –≤—Å–µ –±–ª—é–¥–∞\n\
     ‚Ä¢ \"–ì–¥–µ –º–æ–π –∑–∞–∫–∞–∑?\" ‚Äî –ø—Ä–æ–≤–µ—Ä—é —Å—Ç–∞—Ç—É—Å\n\
     ‚Ä¢ \"–ß—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å?\" ‚Äî –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ\n\
     ‚Ä¢ \"–ü–æ–∫–∞–∂–∏ –±–ª—é–¥–∞ —Å –ª–æ—Å–æ—Å–µ–º\" ‚Äî –Ω–∞–π–¥—É –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É\n\n\
     –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ \"–ø–æ–º–æ—â—å\" —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ üòä"
        .to_string()
}
