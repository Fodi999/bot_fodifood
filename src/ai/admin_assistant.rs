//! Admin AI Assistant - Natural language administrative commands
//! 
//! Provides AI-powered administrative interface with natural language processing.
//! Supports commands for backend control, metrics viewing, system status, etc.

use crate::metrics::MetricsCollector;
use crate::orchestration::BackendOrchestrator;
use std::sync::Arc;
use tokio::sync::RwLock;

/// Admin-specific intents for system management
#[derive(Debug, Clone, PartialEq)]
pub enum AdminIntent {
    /// Backend control: "–∑–∞–ø—É—Å—Ç–∏ backend", "–æ—Å—Ç–∞–Ω–æ–≤–∏ —Å–µ—Ä–≤–µ—Ä"
    BackendControl(BackendAction),
    
    /// System status: "—Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "–∫–∞–∫ –¥–µ–ª–∞?"
    SystemStatus,
    
    /// Metrics query: "–ø–æ–∫–∞–∂–∏ –º–µ—Ç—Ä–∏–∫–∏", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–Ω—Ç–æ–≤"
    MetricsQuery(MetricsType),
    
    /// Connection info: "—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω"
    ConnectionInfo,
    
    /// AI health: "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç AI", "–ø—Ä–æ–≤–µ—Ä—å AI engine"
    AIHealth,
    
    /// Logs request: "–ø–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏"
    LogsRequest(LogLevel),
    
    /// Performance: "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"
    Performance,
    
    /// Unknown admin command
    Unknown(String),
}

#[derive(Debug, Clone, PartialEq)]
pub enum BackendAction {
    Start,
    Stop,
    Restart,
    Status,
    Health,
}

#[derive(Debug, Clone, PartialEq)]
pub enum MetricsType {
    Intents,
    ResponseTimes,
    All,
    Dashboard,
}

#[derive(Debug, Clone, PartialEq)]
pub enum LogLevel {
    Errors,
    Warnings,
    All,
}

/// Admin AI Assistant
pub struct AdminAssistant {
    orchestrator: Option<Arc<BackendOrchestrator>>,
    metrics: Arc<RwLock<MetricsCollector>>,
}

impl AdminAssistant {
    /// Create new admin assistant
    pub fn new(
        orchestrator: Option<Arc<BackendOrchestrator>>,
        metrics: Arc<RwLock<MetricsCollector>>,
    ) -> Self {
        Self {
            orchestrator,
            metrics,
        }
    }

    /// Detect admin intent from natural language
    pub fn detect_admin_intent(&self, message: &str) -> AdminIntent {
        let msg = message.to_lowercase();

        // Backend control commands - check more specific first
        if msg.contains("–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏") || msg.contains("—Ä–µ—Å—Ç–∞—Ä—Ç") {
            return AdminIntent::BackendControl(BackendAction::Restart);
        }
        if msg.contains("–∑–∞–ø—É—Å—Ç–∏") && (msg.contains("backend") || msg.contains("—Å–µ—Ä–≤–µ—Ä") || msg.contains("–±—ç–∫–µ–Ω–¥")) {
            return AdminIntent::BackendControl(BackendAction::Start);
        }
        if msg.contains("–æ—Å—Ç–∞–Ω–æ–≤–∏") || msg.contains("–≤—ã–∫–ª—é—á–∏") {
            return AdminIntent::BackendControl(BackendAction::Stop);
        }
        if msg.contains("—Å—Ç–∞—Ç—É—Å") && (msg.contains("backend") || msg.contains("—Å–µ—Ä–≤–µ—Ä") || msg.contains("–±—ç–∫–µ–Ω–¥")) {
            return AdminIntent::BackendControl(BackendAction::Status);
        }

        // System status
        if (msg.contains("—Å—Ç–∞—Ç—É—Å") && msg.contains("—Å–∏—Å—Ç–µ–º")) 
            || msg.contains("–∫–∞–∫ –¥–µ–ª–∞")
            || msg.contains("–≤—Å–µ –æ–∫")
            || msg.contains("health check") {
            return AdminIntent::SystemStatus;
        }

        // Metrics queries - check more specific first
        if msg.contains("–º–µ—Ç—Ä–∏–∫") || msg.contains("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫") || msg.contains("–∞–Ω–∞–ª–∏—Ç–∏–∫") {
            if msg.contains("–∏–Ω—Ç–µ–Ω—Ç") {
                return AdminIntent::MetricsQuery(MetricsType::Intents);
            }
            if msg.contains("–≤—Ä–µ–º—è") || msg.contains("–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å") {
                return AdminIntent::MetricsQuery(MetricsType::ResponseTimes);
            }
            if msg.contains("–≤—Å–µ") || msg.contains("–ø–æ–ª–Ω") {
                return AdminIntent::MetricsQuery(MetricsType::All);
            }
            return AdminIntent::MetricsQuery(MetricsType::Dashboard);
        }

        // Connection info
        if (msg.contains("—Å–∫–æ–ª—å–∫–æ") || msg.contains("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")) 
            && (msg.contains("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª") || msg.contains("–ø–æ–¥–∫–ª—é—á–µ–Ω") || msg.contains("–æ–Ω–ª–∞–π–Ω")) {
            return AdminIntent::ConnectionInfo;
        }

        // AI health
        if msg.contains("ai") || msg.contains("–∞–∏") {
            if msg.contains("—Ä–∞–±–æ—Ç–∞") || msg.contains("–∑–¥–æ—Ä–æ–≤—å") || msg.contains("–ø—Ä–æ–≤–µ—Ä—å") {
                return AdminIntent::AIHealth;
            }
        }

        // Logs
        if msg.contains("–ª–æ–≥") || msg.contains("–æ—à–∏–±–∫") || msg.contains("error") {
            if msg.contains("–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω") || msg.contains("warning") {
                return AdminIntent::LogsRequest(LogLevel::Warnings);
            }
            if msg.contains("–æ—à–∏–±–∫") || msg.contains("error") {
                return AdminIntent::LogsRequest(LogLevel::Errors);
            }
            return AdminIntent::LogsRequest(LogLevel::All);
        }

        // Performance
        if msg.contains("–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å") || msg.contains("performance") {
            return AdminIntent::Performance;
        }

        AdminIntent::Unknown(message.to_string())
    }

    /// Process admin command and generate response
    pub async fn process_admin_command(&self, intent: AdminIntent) -> String {
        match intent {
            AdminIntent::BackendControl(action) => self.handle_backend_control(action).await,
            AdminIntent::SystemStatus => self.handle_system_status().await,
            AdminIntent::MetricsQuery(metrics_type) => self.handle_metrics_query(metrics_type).await,
            AdminIntent::ConnectionInfo => self.handle_connection_info().await,
            AdminIntent::AIHealth => self.handle_ai_health().await,
            AdminIntent::LogsRequest(level) => self.handle_logs_request(level).await,
            AdminIntent::Performance => self.handle_performance().await,
            AdminIntent::Unknown(msg) => {
                format!("‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É: \"{}\"\n\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ –∑–∞–ø—É—Å—Ç–∏/–æ—Å—Ç–∞–Ω–æ–≤–∏/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ backend\n‚Ä¢ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n‚Ä¢ –ø–æ–∫–∞–∂–∏ –º–µ—Ç—Ä–∏–∫–∏\n‚Ä¢ —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω\n‚Ä¢ –ø—Ä–æ–≤–µ—Ä—å AI engine\n‚Ä¢ –ø–æ–∫–∞–∂–∏ –æ—à–∏–±–∫–∏", msg)
            }
        }
    }

    async fn handle_backend_control(&self, action: BackendAction) -> String {
        if self.orchestrator.is_none() {
            return "‚ö†Ô∏è Backend orchestrator –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.".to_string();
        }

        let orchestrator = self.orchestrator.as_ref().unwrap();

        match action {
            BackendAction::Start => {
                match orchestrator.start().await {
                    Ok(()) => {
                        let info = orchestrator.get_info().await;
                        format!("‚úÖ **Backend –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ**\n\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚Ä¢ PID: {}\n‚Ä¢ –°—Ç–∞—Ç—É—Å: {:?}\n‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {} —Å–µ–∫", 
                            info.pid.map(|p| p.to_string()).unwrap_or("N/A".to_string()),
                            info.status,
                            info.uptime_secs.map(|u| u.to_string()).unwrap_or("N/A".to_string()))
                    }
                    Err(e) => format!("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ backend: {}", e),
                }
            }
            BackendAction::Stop => {
                match orchestrator.stop().await {
                    Ok(()) => "‚úÖ **Backend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**".to_string(),
                    Err(e) => format!("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ backend: {}", e),
                }
            }
            BackendAction::Restart => {
                match orchestrator.restart().await {
                    Ok(()) => {
                        let info = orchestrator.get_info().await;
                        format!("üîÑ **Backend –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω**\n\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚Ä¢ PID: {}\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤: {}", 
                            info.pid.map(|p| p.to_string()).unwrap_or("N/A".to_string()),
                            info.restart_count)
                    }
                    Err(e) => format!("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ backend: {}", e),
                }
            }
            BackendAction::Status => {
                let info = orchestrator.get_info().await;
                let is_running = orchestrator.is_running().await;
                format!("üìä **–°—Ç–∞—Ç—É—Å Backend**\n\n‚Ä¢ –°—Ç–∞—Ç—É—Å: {:?}\n‚Ä¢ PID: {}\n‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç: {}\n‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {} —Å–µ–∫\n‚Ä¢ –†–µ—Å—Ç–∞—Ä—Ç–æ–≤: {}\n‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {}", 
                    info.status,
                    info.pid.map(|p| p.to_string()).unwrap_or("N/A".to_string()),
                    if is_running { "‚úÖ –î–∞" } else { "‚ùå –ù–µ—Ç" },
                    info.uptime_secs.map(|u| u.to_string()).unwrap_or("N/A".to_string()),
                    info.restart_count,
                    info.last_health_check.as_ref().map(|s| s.as_str()).unwrap_or("–ù–∏–∫–æ–≥–¥–∞"))
            }
            BackendAction::Health => {
                let is_running = orchestrator.is_running().await;
                if is_running {
                    "‚úÖ **Backend –∑–¥–æ—Ä–æ–≤**\n\n–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.".to_string()
                } else {
                    "‚ö†Ô∏è **Backend –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç**\n\n–í–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.".to_string()
                }
            }
        }
    }

    async fn handle_system_status(&self) -> String {
        let metrics = self.metrics.read().await;
        let stats = metrics.get_stats();
        
        let backend_status = if let Some(orchestrator) = &self.orchestrator {
            let info = orchestrator.get_info().await;
            format!("‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (PID: {})", info.pid.map(|p| p.to_string()).unwrap_or("N/A".to_string()))
        } else {
            "‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω".to_string()
        };

        format!(
            "üñ•Ô∏è **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã FodiFood Bot v2.2**\n\n\
            üì° **AI Engine**\n\
            ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–Ω—Ç–µ–Ω—Ç–æ–≤: {}\n\
            ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {}\n\
            ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {:.2} —Å–µ–∫\n\n\
            üéØ **Backend Orchestrator**\n\
            ‚Ä¢ –°—Ç–∞—Ç—É—Å: {}\n\n\
            üìä **–ú–µ—Ç—Ä–∏–∫–∏**\n\
            ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {}%\n\
            ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}\n\n\
            ‚úÖ **–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ**",
            stats.total_intents,
            stats.active_connections,
            stats.avg_response_time,
            backend_status,
            if stats.total_intents > 0 {
                ((stats.total_intents as f64 - stats.failed_intents as f64) / stats.total_intents as f64 * 100.0).round() as u64
            } else {
                100
            },
            stats.total_intents
        )
    }

    async fn handle_metrics_query(&self, metrics_type: MetricsType) -> String {
        let metrics = self.metrics.read().await;
        
        match metrics_type {
            MetricsType::Intents => {
                let by_type = &metrics.get_stats().intents_by_type;
                let mut response = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–Ω—Ç–æ–≤**\n\n".to_string();
                
                let mut intents: Vec<_> = by_type.iter().collect();
                intents.sort_by(|a, b| b.1.cmp(a.1));
                
                for (intent, count) in intents.iter().take(10) {
                    response.push_str(&format!("‚Ä¢ {}: {} –∑–∞–ø—Ä–æ—Å–æ–≤\n", intent, count));
                }
                
                response
            }
            MetricsType::ResponseTimes => {
                let stats = metrics.get_stats();
                format!(
                    "‚è±Ô∏è **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å AI**\n\n\
                    ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {:.2} —Å–µ–∫\n\
                    ‚Ä¢ –ú–∏–Ω: {:.2} —Å–µ–∫\n\
                    ‚Ä¢ –ú–∞–∫—Å: {:.2} —Å–µ–∫\n\
                    ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}",
                    stats.avg_response_time,
                    stats.min_response_time,
                    stats.max_response_time,
                    stats.total_intents
                )
            }
            MetricsType::All | MetricsType::Dashboard => {
                let stats = metrics.get_stats();
                format!(
                    "üìä **–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n\
                    **–ò–Ω—Ç–µ–Ω—Ç—ã:**\n\
                    ‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}\n\
                    ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {}\n\
                    ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {}%\n\n\
                    **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**\n\
                    ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {:.2} —Å–µ–∫\n\
                    ‚Ä¢ –ú–∏–Ω/–ú–∞–∫—Å: {:.2}/{:.2} —Å–µ–∫\n\n\
                    **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**\n\
                    ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {}\n\
                    ‚Ä¢ –í—Å–µ–≥–æ –∑–∞ —Å–µ—Å—Å–∏—é: {}",
                    stats.total_intents,
                    stats.failed_intents,
                    if stats.total_intents > 0 {
                        ((stats.total_intents as f64 - stats.failed_intents as f64) / stats.total_intents as f64 * 100.0).round() as u64
                    } else {
                        100
                    },
                    stats.avg_response_time,
                    stats.min_response_time,
                    stats.max_response_time,
                    stats.active_connections,
                    stats.total_connections
                )
            }
        }
    }

    async fn handle_connection_info(&self) -> String {
        let metrics = self.metrics.read().await;
        let stats = metrics.get_stats();
        
        format!(
            "üë• **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö**\n\n\
            ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\
            ‚Ä¢ –í—Å–µ–≥–æ –∑–∞ —Å–µ—Å—Å–∏—é: {} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n\
            ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {:.1} –∑–∞–ø—Ä–æ—Å–æ–≤/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            stats.active_connections,
            stats.total_connections,
            if stats.total_connections > 0 {
                stats.total_intents as f64 / stats.total_connections as f64
            } else {
                0.0
            }
        )
    }

    async fn handle_ai_health(&self) -> String {
        let metrics = self.metrics.read().await;
        let stats = metrics.get_stats();
        
        let error_rate = if stats.total_intents > 0 {
            stats.failed_intents as f64 / stats.total_intents as f64
        } else {
            0.0
        };
        
        let health_status = if error_rate < 0.1 {
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ"
        } else if error_rate < 0.3 {
            "‚ö†Ô∏è –ü—Ä–∏–µ–º–ª–µ–º–æ"
        } else {
            "‚ùå –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        };

        format!(
            "üß† **–°—Ç–∞—Ç—É—Å AI Engine**\n\n\
            ‚Ä¢ –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {}\n\
            ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–Ω—Ç–µ–Ω—Ç–æ–≤: {}\n\
            ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {}%\n\
            ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {:.2} —Å–µ–∫\n\n\
            üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n\
            {}",
            health_status,
            stats.total_intents,
            if stats.total_intents > 0 {
                ((stats.total_intents as f64 - stats.failed_intents as f64) / stats.total_intents as f64 * 100.0).round() as u64
            } else {
                100
            },
            stats.avg_response_time,
            if stats.avg_response_time > 2.0 {
                "‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤—ã—Å–æ–∫–æ–µ, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é\n"
            } else {
                "‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ\n"
            }
        )
    }

    async fn handle_logs_request(&self, _level: LogLevel) -> String {
        "üìã **–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n‚ö†Ô∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n‚Ä¢ `cargo shuttle logs` (production)\n‚Ä¢ `RUST_LOG=debug cargo run --bin local` (local)\n\nüí° Tip: –õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ Shuttle CLI".to_string()
    }

    async fn handle_performance(&self) -> String {
        let metrics = self.metrics.read().await;
        let stats = metrics.get_stats();
        
        let performance_score = if stats.avg_response_time < 1.0 && stats.failed_intents == 0 {
            "üü¢ –û—Ç–ª–∏—á–Ω–æ (95/100)"
        } else if stats.avg_response_time < 2.0 && (stats.failed_intents as f64 / stats.total_intents.max(1) as f64) < 0.1 {
            "üü° –•–æ—Ä–æ—à–æ (75/100)"
        } else {
            "üî¥ –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è (50/100)"
        };

        format!(
            "‚ö° **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã**\n\n\
            ‚Ä¢ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {}\n\n\
            **–ú–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞:**\n\
            ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {:.2} —Å–µ–∫\n\
            ‚Ä¢ –ú–∏–Ω–∏–º—É–º: {:.2} —Å–µ–∫\n\
            ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {:.2} —Å–µ–∫\n\n\
            **–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:**\n\
            ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {}%\n\
            ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {}\n\n\
            **–ù–∞–≥—Ä—É–∑–∫–∞:**\n\
            ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}\n\
            ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {}",
            performance_score,
            stats.avg_response_time,
            stats.min_response_time,
            stats.max_response_time,
            if stats.total_intents > 0 {
                ((stats.total_intents as f64 - stats.failed_intents as f64) / stats.total_intents as f64 * 100.0).round() as u64
            } else {
                100
            },
            stats.failed_intents,
            stats.total_intents,
            stats.active_connections
        )
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_admin_intent_detection() {
        let metrics = Arc::new(RwLock::new(MetricsCollector::new()));
        let assistant = AdminAssistant::new(None, metrics);

        // Backend control
        assert_eq!(
            assistant.detect_admin_intent("–∑–∞–ø—É—Å—Ç–∏ backend"),
            AdminIntent::BackendControl(BackendAction::Start)
        );
        assert_eq!(
            assistant.detect_admin_intent("–æ—Å—Ç–∞–Ω–æ–≤–∏ —Å–µ—Ä–≤–µ—Ä"),
            AdminIntent::BackendControl(BackendAction::Stop)
        );
        assert_eq!(
            assistant.detect_admin_intent("–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ backend"),
            AdminIntent::BackendControl(BackendAction::Restart)
        );

        // System status
        assert_eq!(
            assistant.detect_admin_intent("—Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
            AdminIntent::SystemStatus
        );
        assert_eq!(
            assistant.detect_admin_intent("–∫–∞–∫ –¥–µ–ª–∞?"),
            AdminIntent::SystemStatus
        );

        // Metrics
        assert_eq!(
            assistant.detect_admin_intent("–ø–æ–∫–∞–∂–∏ –º–µ—Ç—Ä–∏–∫–∏"),
            AdminIntent::MetricsQuery(MetricsType::Dashboard)
        );
        assert_eq!(
            assistant.detect_admin_intent("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–Ω—Ç–æ–≤"),
            AdminIntent::MetricsQuery(MetricsType::Intents)
        );

        // Connection info
        assert_eq!(
            assistant.detect_admin_intent("—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω"),
            AdminIntent::ConnectionInfo
        );

        // AI health
        assert_eq!(
            assistant.detect_admin_intent("–ø—Ä–æ–≤–µ—Ä—å AI engine"),
            AdminIntent::AIHealth
        );
    }

    #[tokio::test]
    async fn test_system_status_response() {
        let metrics = Arc::new(RwLock::new(MetricsCollector::new()));
        let assistant = AdminAssistant::new(None, metrics.clone());

        let response = assistant.handle_system_status().await;
        assert!(response.contains("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"));
        assert!(response.contains("AI Engine"));
    }

    #[tokio::test]
    async fn test_metrics_query() {
        let metrics = Arc::new(RwLock::new(MetricsCollector::new()));
        let assistant = AdminAssistant::new(None, metrics.clone());

        let response = assistant.handle_metrics_query(MetricsType::Intents).await;
        assert!(response.contains("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–Ω—Ç–æ–≤"));
    }
}
