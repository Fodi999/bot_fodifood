// üå± AI Growth Campaign Engine - –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—Å—Ç–æ–º
//
// –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É,
// –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç, –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏.

use std::collections::HashMap;
use chrono::{DateTime, Utc, Duration};
use serde::{Deserialize, Serialize};

use crate::ai::social_tasks::{TaskManager, TaskPlatform, TaskType};
use crate::ai::airdrop_agent::AirdropAgent;

/// üéØ –¶–µ–ª—å —Ä–æ—Å—Ç–∞ –∫–∞–º–ø–∞–Ω–∏–∏
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum GrowthGoal {
    /// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ (%)
    IncreaseTraffic { target_percent: f64 },
    /// –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    AcquireUsers { target_count: usize },
    /// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç–∏
    BoostEngagement { target_actions: usize },
    /// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂
    IncreaseSales { target_revenue: f64 },
    /// –ü–æ–≤—ã—à–µ–Ω–∏–µ —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç–∏ –±—Ä–µ–Ω–¥–∞
    BrandAwareness { target_reach: usize },
    /// –í–∏—Ä—É—Å–Ω—ã–π —Ä–æ—Å—Ç
    GoViral { target_shares: usize },
}

impl GrowthGoal {
    /// –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏
    pub fn description(&self) -> String {
        match self {
            GrowthGoal::IncreaseTraffic { target_percent } => {
                format!("–£–≤–µ–ª–∏—á–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –Ω–∞ {:.1}%", target_percent)
            }
            GrowthGoal::AcquireUsers { target_count } => {
                format!("–ü—Ä–∏–≤–ª–µ—á—å {} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", target_count)
            }
            GrowthGoal::BoostEngagement { target_actions } => {
                format!("–ü–æ–ª—É—á–∏—Ç—å {} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π", target_actions)
            }
            GrowthGoal::IncreaseSales { target_revenue } => {
                format!("–£–≤–µ–ª–∏—á–∏—Ç—å –≤—ã—Ä—É—á–∫—É –Ω–∞ {:.2}‚ÇΩ", target_revenue)
            }
            GrowthGoal::BrandAwareness { target_reach } => {
                format!("–û—Ö–≤–∞—Ç {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", target_reach)
            }
            GrowthGoal::GoViral { target_shares } => {
                format!("–ü–æ–ª—É—á–∏—Ç—å {} —Ä–µ–ø–æ—Å—Ç–æ–≤", target_shares)
            }
        }
    }
}

/// üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum BudgetStrategy {
    /// –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
    Equal,
    /// –ü–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
    PerformanceBased,
    /// –§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    Focused { platform: TaskPlatform },
    /// –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ (AI –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)
    Adaptive,
}

/// üéØ Growth Campaign - –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è —Ä–æ—Å—Ç–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GrowthCampaign {
    /// ID –∫–∞–º–ø–∞–Ω–∏–∏
    pub id: String,
    /// –ù–∞–∑–≤–∞–Ω–∏–µ
    pub name: String,
    /// –ë–∏–∑–Ω–µ—Å-–≤–ª–∞–¥–µ–ª–µ—Ü
    pub business: String,
    /// –ë—é–¥–∂–µ—Ç –≤ —Ç–æ–∫–µ–Ω–∞—Ö
    pub budget_tokens: f64,
    /// –¶–µ–ª—å –∫–∞–º–ø–∞–Ω–∏–∏
    pub goal: GrowthGoal,
    /// –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    pub users_target: usize,
    /// –¶–µ–ª–µ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è (%)
    pub conversion_goal: f64,
    /// –°—Ç—Ä–∞—Ç–µ–≥–∏—è –±—é–¥–∂–µ—Ç–∞
    pub budget_strategy: BudgetStrategy,
    /// –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞
    pub launched_at: Option<DateTime<Utc>>,
    /// –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    pub ended_at: Option<DateTime<Utc>>,
    /// –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∞—Å—ã)
    pub duration_hours: i64,
    /// –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    pub platforms: Vec<TaskPlatform>,
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–º–ø–∞–Ω–∏–∏
    pub results: Option<CampaignResults>,
    /// –°—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏
    pub status: CampaignStatus,
}

/// ‚úÖ –°—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum CampaignStatus {
    /// –ì–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É
    Ready,
    /// –ó–∞–ø—É—â–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞
    Running,
    /// –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
    Completed,
    /// –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    Paused,
    /// –û—Ç–º–µ–Ω–µ–Ω–∞
    Cancelled,
}

/// üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–º–ø–∞–Ω–∏–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CampaignResults {
    /// –í—Å–µ–≥–æ –≤–æ–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    pub total_engagement: usize,
    /// –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤
    pub total_spent: f64,
    /// ROI (Return on Investment) %
    pub roi: f64,
    /// –ö–æ–Ω–≤–µ—Ä—Å–∏—è %
    pub conversion_rate: f64,
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    pub platform_results: HashMap<String, PlatformMetrics>,
    /// –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —Ü–µ–ª—å
    pub goal_achieved: bool,
}

/// üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct PlatformMetrics {
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
    pub tasks_created: usize,
    /// –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á
    pub tasks_completed: usize,
    /// –¢–æ–∫–µ–Ω–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
    pub tokens_spent: f64,
    /// –í–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å
    pub engagement: usize,
    /// CTR (Click-Through Rate) %
    pub ctr: f64,
    /// CPA (Cost Per Action)
    pub cpa: f64,
}

impl GrowthCampaign {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é growth campaign
    pub fn new(
        name: &str,
        business: &str,
        budget_tokens: f64,
        goal: GrowthGoal,
        users_target: usize,
        conversion_goal: f64,
        duration_hours: i64,
    ) -> Self {
        let id = format!(
            "CAMPAIGN-{}-{}",
            business.replace(" ", "-"),
            Utc::now().timestamp()
        );

        Self {
            id,
            name: name.to_string(),
            business: business.to_string(),
            budget_tokens,
            goal,
            users_target,
            conversion_goal,
            budget_strategy: BudgetStrategy::Equal,
            launched_at: None,
            ended_at: None,
            duration_hours,
            platforms: vec![
                TaskPlatform::Instagram,
                TaskPlatform::TikTok,
                TaskPlatform::Twitter,
                TaskPlatform::Telegram,
                TaskPlatform::VK,
            ],
            results: None,
            status: CampaignStatus::Ready,
        }
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –±—é–¥–∂–µ—Ç–∞
    pub fn with_budget_strategy(mut self, strategy: BudgetStrategy) -> Self {
        self.budget_strategy = strategy;
        self
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    pub fn with_platforms(mut self, platforms: Vec<TaskPlatform>) -> Self {
        self.platforms = platforms;
        self
    }

    /// üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é
    pub fn launch(
        &mut self,
        task_manager: &mut TaskManager,
        airdrop: &mut AirdropAgent,
    ) -> Vec<String> {
        println!("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        println!("‚ïë  üöÄ AI Growth Campaign Engine                              ‚ïë");
        println!("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");

        println!("üå± **{}**", self.name);
        println!("üè¢ –ë–∏–∑–Ω–µ—Å: {}", self.business);
        println!("üéØ –¶–µ–ª—å: {}", self.goal.description());
        println!("üí∞ –ë—é–¥–∂–µ—Ç: {:.2} —Ç–æ–∫–µ–Ω–æ–≤", self.budget_tokens);
        println!("üë• –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", self.users_target);
        println!("üìà –¶–µ–ª–µ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: {:.1}%", self.conversion_goal);
        println!("‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {} —á–∞—Å–æ–≤", self.duration_hours);
        println!("üé¨ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {}", self.platforms.len());
        println!();

        self.launched_at = Some(Utc::now());
        self.status = CampaignStatus::Running;

        let task_ids = self.create_missions(task_manager);

        println!("\n‚úÖ Growth Campaign –∑–∞–ø—É—â–µ–Ω–∞ [{}]", Utc::now().format("%Y-%m-%d %H:%M:%S"));
        println!("üìä –°–æ–∑–¥–∞–Ω–æ {} –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–∏—Å—Å–∏–π", task_ids.len());
        println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");

        task_ids
    }

    /// –°–æ–∑–¥–∞—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –º–∏—Å—Å–∏–∏
    fn create_missions(&self, task_manager: &mut TaskManager) -> Vec<String> {
        let mut task_ids = Vec::new();

        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        let budget_per_platform = match &self.budget_strategy {
            BudgetStrategy::Equal => {
                self.budget_tokens / self.platforms.len() as f64
            }
            BudgetStrategy::PerformanceBased => {
                // TODO: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
                self.budget_tokens / self.platforms.len() as f64
            }
            BudgetStrategy::Focused { .. } => {
                self.budget_tokens // –í–µ—Å—å –±—é–¥–∂–µ—Ç –Ω–∞ –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            }
            BudgetStrategy::Adaptive => {
                self.budget_tokens / self.platforms.len() as f64
            }
        };

        println!("üí∏ **–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–∏—Å—Å–∏–π:**\n");

        for platform in &self.platforms {
            // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            let task_type = match platform {
                TaskPlatform::Instagram => TaskType::CreatePost,
                TaskPlatform::TikTok => TaskType::CreateVideo,
                TaskPlatform::Twitter => TaskType::Share,
                TaskPlatform::YouTube => TaskType::CreateVideo,
                TaskPlatform::Telegram => TaskType::Referral,
                TaskPlatform::VK => TaskType::Review,
                TaskPlatform::Threads => TaskType::CreatePost,
                TaskPlatform::Reddit => TaskType::CreatePost,
                TaskPlatform::Medium => TaskType::CreatePost,
            };

            let description = self.generate_task_description(platform, &task_type);
            let reward = budget_per_platform / (self.users_target as f64 / self.platforms.len() as f64);

            let task_id = task_manager.create_task(
                &self.business,
                platform.clone(),
                task_type,
                &description,
                reward,
                self.duration_hours,
            );

            println!("   {} {} - {:.2} —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ", 
                platform.emoji(), platform.name(), reward);

            task_ids.push(task_id);
        }

        task_ids
    }

    /// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    fn generate_task_description(&self, platform: &TaskPlatform, task_type: &TaskType) -> String {
        match (platform, task_type) {
            (TaskPlatform::Instagram, TaskType::CreatePost) => {
                format!("üì∏ –°–æ–∑–¥–∞–π –ø–æ—Å—Ç –æ {} —Å —Ö—ç—à—Ç–µ–≥–æ–º #FodiFood –∏ –æ—Ç–º–µ—Ç—å –Ω–∞—à –∞–∫–∫–∞—É–Ω—Ç!", self.name)
            }
            (TaskPlatform::TikTok, TaskType::CreateVideo) => {
                format!("üé• –°–Ω–∏–º–∏ –≤–∏–¥–µ–æ –æ {} —Å —Ö—ç—à—Ç–µ–≥–æ–º #FodiFood!", self.name)
            }
            (TaskPlatform::Twitter, TaskType::Share) => {
                format!("üê¶ –°–¥–µ–ª–∞–π —Ä–µ—Ç–≤–∏—Ç –Ω–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞ –æ {}!", self.name)
            }
            (TaskPlatform::Telegram, TaskType::Referral) => {
                format!("üí¨ –ü–æ–¥–µ–ª–∏—Å—å –±–æ—Ç–æ–º {} –≤ 3 —á–∞—Ç–∞!", self.name)
            }
            (TaskPlatform::VK, TaskType::Review) => {
                format!("‚≠ê –ù–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤ –æ {}!", self.name)
            }
            _ => {
                format!("–ü–æ–¥–¥–µ—Ä–∂–∏ {} –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö!", self.name)
            }
        }
    }

    /// üìä –û—Ü–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–º–ø–∞–Ω–∏–∏
    pub fn evaluate_results(
        &mut self,
        total_engagement: usize,
        total_spent: f64,
        platform_data: Option<HashMap<String, PlatformMetrics>>,
    ) {
        println!("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        println!("‚ïë  üìä Growth Campaign Results                                ‚ïë");
        println!("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");

        println!("üå± **{}**", self.name);
        println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");

        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
        let roi = if self.users_target > 0 {
            (total_engagement as f64 / self.users_target as f64) * 100.0
        } else {
            0.0
        };

        let conversion_rate = if total_engagement > 0 {
            (total_engagement as f64 / self.users_target as f64) * 100.0
        } else {
            0.0
        };

        let goal_achieved = roi >= self.conversion_goal;

        println!("\nüí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**");
        println!("   ‚Ä¢ –ë—é–¥–∂–µ—Ç: {:.2} —Ç–æ–∫–µ–Ω–æ–≤", self.budget_tokens);
        println!("   ‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {:.2} —Ç–æ–∫–µ–Ω–æ–≤ ({:.1}%)", 
            total_spent, 
            (total_spent / self.budget_tokens) * 100.0
        );
        println!("   ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {:.2} —Ç–æ–∫–µ–Ω–æ–≤", self.budget_tokens - total_spent);

        println!("\nüìà **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**");
        println!("   ‚Ä¢ –í–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å: {} –¥–µ–π—Å—Ç–≤–∏–π", total_engagement);
        println!("   ‚Ä¢ ROI: {:.1}% (—Ü–µ–ª—å: {:.1}%)", roi, self.conversion_goal);
        println!("   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {:.1}%", conversion_rate);

        if goal_achieved {
            println!("\n   ‚úÖ **–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!** ROI = {:.1}%", roi);
        } else {
            println!("\n   ‚ö†Ô∏è  **ROI –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ** ({:.1}% vs {:.1}%)", 
                roi, self.conversion_goal);
        }

        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        if let Some(ref platform_metrics) = platform_data {
            println!("\nüåê **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:**\n");

            let mut sorted_platforms: Vec<_> = platform_metrics.iter().collect();
            sorted_platforms.sort_by(|a, b| {
                b.1.engagement.cmp(&a.1.engagement)
            });

            for (platform, metrics) in sorted_platforms {
                println!("   {} **{}**", 
                    self.get_platform_emoji(platform),
                    platform
                );
                println!("      ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {}", metrics.tasks_completed);
                println!("      ‚Ä¢ –í–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å: {}", metrics.engagement);
                println!("      ‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤: {:.2}", metrics.tokens_spent);
                if metrics.tasks_completed > 0 {
                    println!("      ‚Ä¢ CPA: {:.2} —Ç–æ–∫–µ–Ω–æ–≤/–¥–µ–π—Å—Ç–≤–∏–µ", metrics.cpa);
                }
                println!();
            }
        }

        println!("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.results = Some(CampaignResults {
            total_engagement,
            total_spent,
            roi,
            conversion_rate,
            platform_results: platform_data.unwrap_or_default(),
            goal_achieved,
        });

        self.status = CampaignStatus::Completed;
        self.ended_at = Some(Utc::now());

        // AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.generate_ai_recommendations();
    }

    /// üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    fn generate_ai_recommendations(&self) {
        println!("\nüí° **AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∫–∞–º–ø–∞–Ω–∏–∏:**\n");

        if let Some(results) = &self.results {
            if results.roi >= self.conversion_goal * 1.5 {
                println!("   ‚ú® –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –£–≤–µ–ª–∏—á—å—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ 30%");
            } else if results.roi >= self.conversion_goal {
                println!("   ‚úÖ –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é");
            } else {
                println!("   ‚ö†Ô∏è  –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ: —É–º–µ–Ω—å—à–∏—Ç–µ —Å–ª–∞–±—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, —É—Å–∏–ª—å—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ");
            }

            // –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            if !results.platform_results.is_empty() {
                let best_platform = results.platform_results.iter()
                    .max_by_key(|(_, m)| m.engagement)
                    .map(|(name, _)| name);

                if let Some(best) = best_platform {
                    println!("   üèÜ –õ—É—á—à–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {} - —É–≤–µ–ª–∏—á—å—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ –Ω–µ—ë", best);
                }
            }

            println!("   üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±—é–¥–∂–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π –∫–∞–º–ø–∞–Ω–∏–∏: {:.2} —Ç–æ–∫–µ–Ω–æ–≤",
                if results.goal_achieved {
                    self.budget_tokens * 1.2
                } else {
                    self.budget_tokens * 0.9
                }
            );
        }

        println!("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    fn get_platform_emoji(&self, platform_name: &str) -> &str {
        match platform_name {
            "Instagram" => "üì∏",
            "TikTok" => "üé•",
            "Twitter" | "Twitter/X" => "üê¶",
            "YouTube" => "‚ñ∂Ô∏è",
            "Telegram" => "üí¨",
            "VK" => "üîµ",
            "Threads" => "üßµ",
            "Reddit" => "üî¥",
            "Medium" => "üìù",
            _ => "üåê",
        }
    }

    /// –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é
    pub fn pause(&mut self) {
        self.status = CampaignStatus::Paused;
        println!("‚è∏Ô∏è  –ö–∞–º–ø–∞–Ω–∏—è {} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", self.name);
    }

    /// –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é
    pub fn resume(&mut self) {
        self.status = CampaignStatus::Running;
        println!("‚ñ∂Ô∏è  –ö–∞–º–ø–∞–Ω–∏—è {} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞", self.name);
    }

    /// –û—Ç–º–µ–Ω–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é
    pub fn cancel(&mut self) {
        self.status = CampaignStatus::Cancelled;
        self.ended_at = Some(Utc::now());
        println!("‚ùå –ö–∞–º–ø–∞–Ω–∏—è {} –æ—Ç–º–µ–Ω–µ–Ω–∞", self.name);
    }
}

/// üéØ Growth Campaign Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∫–∞–º–ø–∞–Ω–∏—è–º–∏
pub struct GrowthCampaignManager {
    /// –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
    pub campaigns: HashMap<String, GrowthCampaign>,
    /// –ò—Å—Ç–æ—Ä–∏—è –∫–∞–º–ø–∞–Ω–∏–π
    pub history: Vec<GrowthCampaign>,
}

impl GrowthCampaignManager {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    pub fn new() -> Self {
        Self {
            campaigns: HashMap::new(),
            history: Vec::new(),
        }
    }

    /// –î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é
    pub fn add_campaign(&mut self, campaign: GrowthCampaign) {
        let id = campaign.id.clone();
        self.campaigns.insert(id, campaign);
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
    pub fn get_active_campaigns(&self) -> Vec<&GrowthCampaign> {
        self.campaigns.values()
            .filter(|c| c.status == CampaignStatus::Running)
            .collect()
    }

    /// –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é
    pub fn archive_campaign(&mut self, campaign_id: &str) {
        if let Some(campaign) = self.campaigns.remove(campaign_id) {
            self.history.push(campaign);
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫–∞–º–ø–∞–Ω–∏–π
    pub fn get_total_stats(&self) -> (usize, f64, f64) {
        let total_campaigns = self.history.len();
        let total_budget: f64 = self.history.iter()
            .map(|c| c.budget_tokens)
            .sum();
        let avg_roi: f64 = if total_campaigns > 0 {
            self.history.iter()
                .filter_map(|c| c.results.as_ref().map(|r| r.roi))
                .sum::<f64>() / total_campaigns as f64
        } else {
            0.0
        };

        (total_campaigns, total_budget, avg_roi)
    }

    /// –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É
    pub fn summary(&self) {
        println!("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        println!("‚ïë  üìä Growth Campaign Manager - –°–≤–æ–¥–∫–∞                       ‚ïë");
        println!("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");

        let (total, budget, avg_roi) = self.get_total_stats();

        println!("üìà **–í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π:** {}", total);
        println!("üí∞ **–û–±—â–∏–π –±—é–¥–∂–µ—Ç:** {:.2} —Ç–æ–∫–µ–Ω–æ–≤", budget);
        println!("üìä **–°—Ä–µ–¥–Ω–∏–π ROI:** {:.1}%", avg_roi);
        println!("üöÄ **–ê–∫—Ç–∏–≤–Ω—ã—Ö:** {}", self.get_active_campaigns().len());
        println!("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
    }
}

impl Default for GrowthCampaignManager {
    fn default() -> Self {
        Self::new()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_create_campaign() {
        let campaign = GrowthCampaign::new(
            "Test Campaign",
            "Test Business",
            10000.0,
            GrowthGoal::AcquireUsers { target_count: 200 },
            200,
            20.0,
            72,
        );

        assert_eq!(campaign.name, "Test Campaign");
        assert_eq!(campaign.budget_tokens, 10000.0);
        assert_eq!(campaign.status, CampaignStatus::Ready);
    }

    #[test]
    fn test_campaign_manager() {
        let mut manager = GrowthCampaignManager::new();
        let campaign = GrowthCampaign::new(
            "Test",
            "Business",
            5000.0,
            GrowthGoal::BoostEngagement { target_actions: 100 },
            100,
            15.0,
            48,
        );

        manager.add_campaign(campaign);
        assert_eq!(manager.campaigns.len(), 1);
    }
}
