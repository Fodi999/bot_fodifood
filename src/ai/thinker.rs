/// –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –ø—Ä–æ—Å–ª–æ–π–∫–∞ ‚Äî —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è

/// –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
pub struct Thinker;

impl Thinker {
    /// üé≠ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–∫—Å—Ç—É
    pub fn detect_mood(message: &str) -> &'static str {
        let text = message.to_lowercase();
        
        // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        if text.contains("—Å–ø–∞—Å–∏–±–æ") 
            || text.contains("–∫–ª–∞—Å—Å–Ω–æ") 
            || text.contains("–æ—Ç–ª–∏—á–Ω–æ")
            || text.contains("—Å—É–ø–µ—Ä")
            || text.contains("–∫—Ä—É—Ç–æ")
            || text.contains("thanks")
            || text.contains("great") {
            return "positive";
        }
        
        // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        if text.contains("–ø–ª–æ—Ö–æ") 
            || text.contains("—É–∂–∞—Å")
            || text.contains("–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è")
            || text.contains("—Ä–∞–∑–æ—á–∞—Ä–æ–≤")
            || text.contains("terrible")
            || text.contains("bad") {
            return "negative";
        }
        
        // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
        "neutral"
    }

    /// üòã –ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–º–æ—Ü–∏—é –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    pub fn extract_emotion(message: &str) -> Option<&'static str> {
        let lower = message.to_lowercase();
        
        if lower.contains("–≥–æ–ª–æ–¥") 
            || lower.contains("–µ—Å—Ç—å —Ö–æ—á—É")
            || lower.contains("–ø—Ä–æ–≥–æ–ª–æ–¥–∞–ª—Å—è")
            || lower.contains("hungry") {
            return Some("hungry");
        }
        
        if lower.contains("—É—Å—Ç–∞–ª") 
            || lower.contains("tired")
            || lower.contains("–≤—ã–º–∞—Ç—ã–≤–∞—é—â–∏–π –¥–µ–Ω—å") {
            return Some("tired");
        }
        
        if lower.contains("–ø—Ä–∞–∑–¥–Ω–∏–∫") 
            || lower.contains("–æ—Ç–º–µ—á–∞—é")
            || lower.contains("celebration") {
            return Some("celebrating");
        }
        
        if lower.contains("–æ–¥–∏–Ω") 
            || lower.contains("–æ–¥–∏–Ω–æ—á–µ—Å—Ç")
            || lower.contains("alone") {
            return Some("alone");
        }
        
        if lower.contains("–∫–æ–º–ø–∞–Ω–∏—è") 
            || lower.contains("–¥—Ä—É–∑—å—è")
            || lower.contains("–≥–æ—Å—Ç–∏")
            || lower.contains("with friends") {
            return Some("with_company");
        }
        
        None
    }

    /// üé® –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    pub fn personalize(base: &str, mood: &str, emotion: Option<&str>) -> String {
        let mut response = base.to_string();

        // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        match mood {
            "positive" => {
                response.push_str("\n\nüòä –†–∞–¥, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è! –í—Å–µ–≥–¥–∞ –∫ —Ç–≤–æ–∏–º —É—Å–ª—É–≥–∞–º.");
            },
            "negative" => {
                response.push_str("\n\nüòî –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å —É–ª—É—á—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∫—É—Å–Ω—ã–º –±–ª—é–¥–æ–º. –ü–æ–∑–≤–æ–ª—å –ø–æ–º–æ—á—å!");
            },
            _ => {}
        }

        // –†–µ–∞–∫—Ü–∏—è –Ω–∞ —ç–º–æ—Ü–∏—é/—Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if let Some(emo) = emotion {
            match emo {
                "hungry" => {
                    response.push_str("\n\nüçΩÔ∏è –ü–æ—Ö–æ–∂–µ, —Ç—ã –ø—Ä–æ–≥–æ–ª–æ–¥–∞–ª—Å—è! –•–æ—á–µ—à—å, –ø–æ–∫–∞–∂—É —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?");
                },
                "tired" => {
                    response.push_str("\n\n‚òï –ü–æ—Å–ª–µ —Ç—è–∂—ë–ª–æ–≥–æ –¥–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —á—Ç–æ-—Ç–æ –ª—ë–≥–∫–æ–µ –∏ –≤–∫—É—Å–Ω–æ–µ ‚Äî —Ä–∞—Å—Å–ª–∞–±—å—Å—è –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è!");
                },
                "celebrating" => {
                    response.push_str("\n\nüéâ –ü—Ä–∞–∑–¥–Ω–∏–∫ ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ! –ü–æ–∫–∞–∂—É –Ω–∞—à–∏ –ø—Ä–µ–º–∏—É–º-—Å–µ—Ç—ã?");
                },
                "alone" => {
                    response.push_str("\n\nüç¥ –ü–æ–±–∞–ª—É–π —Å–µ–±—è —á–µ–º-—Ç–æ –≤–∫—É—Å–Ω—ã–º ‚Äî —Ç—ã —ç—Ç–æ –∑–∞—Å–ª—É–∂–∏–ª! –ü–æ—Ä—Ü–∏–æ–Ω–Ω—ã–µ –±–ª—é–¥–∞ –∫–∞–∫ —Ä–∞–∑ –¥–ª—è —Ç–µ–±—è.");
                },
                "with_company" => {
                    response.push_str("\n\nüë• –û—Ç–ª–∏—á–Ω–æ! –î–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –±–æ–ª—å—à–∏–µ –ø–æ—Ä—Ü–∏–∏ –∏ —Å–µ—Ç—ã ‚Äî –≤—Å–µ –±—É–¥—É—Ç –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ!");
                },
                _ => {}
            }
        }

        response
    }

    /// üîç –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    #[allow(dead_code)]  // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    pub fn extract_keywords(message: &str) -> Vec<String> {
        let text = message.to_lowercase();
        let mut keywords = Vec::new();
        
        // –í–∫—É—Å–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        let flavor_words = vec![
            "–æ—Å—Ç—Ä–æ–µ", "—Å–ª–∞–¥–∫–æ–µ", "—Å–æ–ª—ë–Ω–æ–µ", "–∫–∏—Å–ª–æ–µ", "–ø—Ä—è–Ω–æ–µ",
            "spicy", "sweet", "salty", "sour",
        ];
        
        for word in flavor_words {
            if text.contains(word) {
                keywords.push(word.to_string());
            }
        }
        
        // –¢–∏–ø—ã –±–ª—é–¥
        let dish_types = vec![
            "—Å—É–ø", "—Å–∞–ª–∞—Ç", "–∑–∞–∫—É—Å–∫–∞", "–¥–µ—Å–µ—Ä—Ç", "–Ω–∞–ø–∏—Ç–æ–∫",
            "soup", "salad", "appetizer", "dessert", "drink",
            "–ø–∞—ç–ª—å—è", "–∫—Ä–µ–≤–µ—Ç–∫–∏", "–ª–æ—Å–æ—Å—å", "—Ç—É–Ω–µ—Ü",
            "paella", "shrimp", "salmon", "tuna",
        ];
        
        for word in dish_types {
            if text.contains(word) {
                keywords.push(word.to_string());
            }
        }
        
        keywords
    }
    
    /// üîç –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pub fn extract_ingredient(message: &str) -> Option<String> {
        let text = message.to_lowercase();
        
        // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        let ingredients = [
            "–ª–æ—Å–æ—Å—å", "salmon",
            "–∫—Ä–µ–≤–µ—Ç–∫–∏", "–∫—Ä–µ–≤–µ—Ç–∫–∞", "shrimp", "prawns",
            "—Ç—É–Ω–µ—Ü", "tuna",
            "–æ—Å—å–º–∏–Ω–æ–≥", "octopus",
            "–º–∏–¥–∏–∏", "mussels",
            "–∫–∞–ª—å–º–∞—Ä", "–∫–∞–ª—å–º–∞—Ä—ã", "squid",
            "—Ä—ã–±–∞", "fish",
            "–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã", "seafood",
            "–∞–≤–æ–∫–∞–¥–æ", "avocado",
            "–æ–≤–æ—â–∏", "vegetables",
            "—Ä–∏—Å", "rice",
            "–ª–∞–ø—à–∞", "noodles",
        ];
        
        for ingredient in ingredients {
            if text.contains(ingredient) {
                return Some(ingredient.to_string());
            }
        }
        
        None
    }

    /// üí¨ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–∏–∞–ª–æ–≥–∞ (–≤–æ–ø—Ä–æ—Å, –∑–∞–∫–∞–∑, —Å–≤–µ—Ç—Å–∫–∞—è –±–µ—Å–µ–¥–∞)
    pub fn detect_conversation_type(message: &str) -> &'static str {
        let text = message.to_lowercase();
        
        // –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        if text.contains("—á—Ç–æ") 
            || text.contains("–≥–¥–µ") 
            || text.contains("–∫–æ–≥–¥–∞")
            || text.contains("—Å–∫–æ–ª—å–∫–æ")
            || text.contains("how")
            || text.contains("what")
            || text.contains("where") {
            return "question";
        }
        
        // –ó–∞–∫–∞–∑
        if text.contains("–∑–∞–∫–∞–∂—É") 
            || text.contains("—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å")
            || text.contains("–æ—Ñ–æ—Ä–º–∏—Ç—å")
            || text.contains("i want to order")
            || text.contains("order") {
            return "order";
        }
        
        // –°–≤–µ—Ç—Å–∫–∞—è –±–µ—Å–µ–¥–∞
        if text.contains("–∫–∞–∫ –¥–µ–ª–∞") 
            || text.contains("—á—Ç–æ –¥–µ–ª–∞–µ—à—å")
            || text.contains("–ø—Ä–∏–≤–µ—Ç")
            || text.contains("hello")
            || text.contains("how are you") {
            return "smalltalk";
        }
        
        // –ñ–∞–ª–æ–±–∞
        if text.contains("–Ω–µ –ø—Ä–∏—à–µ–ª") 
            || text.contains("–ø—Ä–æ–±–ª–µ–º–∞")
            || text.contains("complaint")
            || text.contains("issue") {
            return "complaint";
        }
        
        "general"
    }

    /// üßÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç "–≤–µ—Å" –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–æ—Å—Ç–æ–π/—Å–ª–æ–∂–Ω—ã–π)
    #[allow(dead_code)]  // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    pub fn analyze_complexity(message: &str) -> &'static str {
        let words: Vec<&str> = message.split_whitespace().collect();
        
        if words.len() <= 3 {
            "simple"  // "–ü–æ–∫–∞–∂–∏ –º–µ–Ω—é"
        } else if words.len() <= 10 {
            "medium"  // "–•–æ—á—É —á—Ç–æ-—Ç–æ –æ—Å—Ç—Ä–æ–µ —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏"
        } else {
            "complex" // –î–ª–∏–Ω–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        }
    }

    /// üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    #[allow(dead_code)]  // –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
    pub fn generate_greeting(user_name: Option<&str>, message_count: usize) -> String {
        match (user_name, message_count) {
            (Some(name), 1) => format!("üëã –ü—Ä–∏–≤–µ—Ç, {}! –†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!", name),
            (Some(name), _) => format!("üëã –°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π, {}!", name),
            (None, 1) => "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–≥–æ –≥–æ—Å—Ç—è!".to_string(),
            (None, _) => "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥, —á—Ç–æ —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è!".to_string(),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_mood_detection() {
        assert_eq!(Thinker::detect_mood("–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ!"), "positive");
        assert_eq!(Thinker::detect_mood("–≠—Ç–æ —É–∂–∞—Å–Ω–æ"), "negative");
        assert_eq!(Thinker::detect_mood("–ü–æ–∫–∞–∂–∏ –º–µ–Ω—é"), "neutral");
    }

    #[test]
    fn test_emotion_extraction() {
        assert_eq!(Thinker::extract_emotion("–û—á–µ–Ω—å –≥–æ–ª–æ–¥–µ–Ω!"), Some("hungry"));
        assert_eq!(Thinker::extract_emotion("–£—Å—Ç–∞–ª –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã"), Some("tired"));
        assert_eq!(Thinker::extract_emotion("–ü—Ä–æ—Å—Ç–æ —Ö–æ—á—É –ø–æ–µ—Å—Ç—å"), None);
    }

    #[test]
    fn test_conversation_type() {
        assert_eq!(Thinker::detect_conversation_type("–ß—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å?"), "question");
        assert_eq!(Thinker::detect_conversation_type("–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –ø–∞—ç–ª—å—é"), "order");
        assert_eq!(Thinker::detect_conversation_type("–ö–∞–∫ –¥–µ–ª–∞?"), "smalltalk");
    }

    #[test]
    fn test_complexity() {
        assert_eq!(Thinker::analyze_complexity("–ú–µ–Ω—é"), "simple");
        assert_eq!(Thinker::analyze_complexity("–ü–æ–∫–∞–∂–∏ –æ—Å—Ç—Ä—ã–µ –±–ª—é–¥–∞ —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏"), "medium");
    }
}
