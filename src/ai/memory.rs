use std::collections::HashMap;
use std::sync::Arc;
use tokio::sync::RwLock;

/// –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –±–æ—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–æ–≤
#[derive(Clone)]
pub struct BotMemory {
    /// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    contexts: Arc<RwLock<HashMap<String, UserContext>>>,
}

/// –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#[derive(Debug, Clone)]
pub struct UserContext {
    /// –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    pub message_history: Vec<String>,
    
    /// –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
    pub last_intent: Option<String>,
    
    /// –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pub preferences: HashMap<String, String>,
    
    /// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    #[allow(dead_code)]
    pub session_data: HashMap<String, String>,
    
    /// –°—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    pub message_count: usize,
    
    /// üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤)
    #[allow(dead_code)]
    pub conversation_state: Option<String>,
}

impl Default for UserContext {
    fn default() -> Self {
        Self {
            message_history: Vec::new(),
            last_intent: None,
            preferences: HashMap::new(),
            session_data: HashMap::new(),
            message_count: 0,
            conversation_state: None,  // üîÑ –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        }
    }
}

impl BotMemory {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–º—è—Ç—å –±–æ—Ç–∞
    pub fn new() -> Self {
        Self {
            contexts: Arc::new(RwLock::new(HashMap::new())),
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pub async fn get_context(&self, user_id: &str) -> UserContext {
        let contexts = self.contexts.read().await;
        contexts.get(user_id).cloned().unwrap_or_default()
    }
    
    /// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pub async fn update_context<F>(&self, user_id: &str, updater: F)
    where
        F: FnOnce(&mut UserContext),
    {
        let mut contexts = self.contexts.write().await;
        let context = contexts.entry(user_id.to_string()).or_default();
        updater(context);
    }
    
    /// –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    pub async fn add_message(&self, user_id: &str, message: String) {
        self.update_context(user_id, |ctx| {
            ctx.message_history.push(message);
            ctx.message_count += 1;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if ctx.message_history.len() > 10 {
                ctx.message_history.remove(0);
            }
        }).await;
    }
    
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
    pub async fn set_last_intent(&self, user_id: &str, intent: String) {
        self.update_context(user_id, |ctx| {
            ctx.last_intent = Some(intent);
        }).await;
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
    #[allow(dead_code)]
    pub async fn get_last_intent(&self, user_id: &str) -> Option<String> {
        let context = self.get_context(user_id).await;
        context.last_intent
    }
    
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #[allow(dead_code)]
    pub async fn set_preference(&self, user_id: &str, key: String, value: String) {
        self.update_context(user_id, |ctx| {
            ctx.preferences.insert(key, value);
        }).await;
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pub async fn get_preference(&self, user_id: &str, key: &str) -> Option<String> {
        let context = self.get_context(user_id).await;
        context.preferences.get(key).cloned()
    }
    
    /// üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
    pub async fn extract_and_save_preferences(&self, user_id: &str, text: &str) {
        let text_lower = text.to_lowercase();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ –æ—Å—Ç—Ä–æ—Ç–µ
        if text_lower.contains("–æ—Å—Ç—Ä–æ–µ") || text_lower.contains("–æ—Å—Ç—Ä") || text_lower.contains("—á–∏–ª–∏") || text_lower.contains("spicy") {
            self.set_preference(user_id, "spicy".to_string(), "true".to_string()).await;
            tracing::info!("üå∂Ô∏è –ó–∞–ø–æ–º–Ω–∏–ª: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ª—é–±–∏—Ç –æ—Å—Ç—Ä–æ–µ", user_id);
        }
        
        // –î–∏–µ—Ç–∞ / –ü–ü
        if text_lower.contains("–¥–∏–µ—Ç–∞") || text_lower.contains(" –ø–ø ") || text_lower.contains("–ª–µ–≥–∫–æ–µ") || text_lower.contains("–∫–∞–ª–æ—Ä–∏–∏") {
            self.set_preference(user_id, "healthy".to_string(), "true".to_string()).await;
            tracing::info!("ü•ó –ó–∞–ø–æ–º–Ω–∏–ª: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", user_id);
        }
        
        // –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ
        if text_lower.contains("–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω") || text_lower.contains("–±–µ–∑ –º—è—Å–∞") || text_lower.contains("vegetarian") {
            self.set_preference(user_id, "vegetarian".to_string(), "true".to_string()).await;
            tracing::info!("üå± –ó–∞–ø–æ–º–Ω–∏–ª: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–µ—Ü", user_id);
        }
        
        // –õ—é–±–æ–≤—å –∫ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º
        if text_lower.contains("–∫—Ä–µ–≤–µ—Ç–∫–∏") || text_lower.contains("shrimp") || text_lower.contains("prawns") {
            self.set_preference(user_id, "favorite".to_string(), "shrimp".to_string()).await;
            tracing::info!("ü¶ê –ó–∞–ø–æ–º–Ω–∏–ª: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ª—é–±–∏—Ç –∫—Ä–µ–≤–µ—Ç–∫–∏", user_id);
        }
        if text_lower.contains("–ª–æ—Å–æ—Å—å") || text_lower.contains("salmon") {
            self.set_preference(user_id, "favorite".to_string(), "salmon".to_string()).await;
            tracing::info!("üêü –ó–∞–ø–æ–º–Ω–∏–ª: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ª—é–±–∏—Ç –ª–æ—Å–æ—Å—è", user_id);
        }
        
        // –ö–æ–º–ø–∞–Ω–∏—è / –ø—Ä–∞–∑–¥–Ω–∏–∫
        if text_lower.contains("–∫–æ–º–ø–∞–Ω–∏—è") || text_lower.contains("–ø—Ä–∞–∑–¥–Ω–∏–∫") || text_lower.contains("–≥–æ—Å—Ç–µ–π") || text_lower.contains("celebration") {
            self.set_preference(user_id, "occasion".to_string(), "party".to_string()).await;
            tracing::info!("üéâ –ó–∞–ø–æ–º–Ω–∏–ª: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫", user_id);
        }
    }
    
    /// üí° –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    pub async fn get_recommendation_context(&self, user_id: &str) -> Option<String> {
        let context = self.get_context(user_id).await;
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        let mut hints = Vec::new();
        
        if context.preferences.get("spicy") == Some(&"true".to_string()) {
            hints.push("–æ—Å—Ç—Ä–æ–µ");
        }
        if context.preferences.get("healthy") == Some(&"true".to_string()) {
            hints.push("–¥–∏–µ—Ç–∞");
        }
        if context.preferences.get("vegetarian") == Some(&"true".to_string()) {
            hints.push("–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ");
        }
        if let Some(fav) = context.preferences.get("favorite") {
            hints.push(fav.as_str());
        }
        if context.preferences.get("occasion") == Some(&"party".to_string()) {
            hints.push("–ø—Ä–∞–∑–¥–Ω–∏–∫");
        }
        
        if hints.is_empty() {
            None
        } else {
            Some(hints.join(", "))
        }
    }
    
    /// üìù –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    #[allow(dead_code)]  // –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ–∏—á
    pub async fn get_user_summary(&self, user_id: &str) -> String {
        let context = self.get_context(user_id).await;
        
        let mut summary = Vec::new();
        
        if context.message_count == 0 {
            return "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å".to_string();
        }
        
        summary.push(format!("–°–æ–æ–±—â–µ–Ω–∏–π: {}", context.message_count));
        
        if !context.preferences.is_empty() {
            let prefs: Vec<String> = context.preferences
                .iter()
                .map(|(k, v)| format!("{}={}", k, v))
                .collect();
            summary.push(format!("–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {}", prefs.join(", ")));
        }
        
        if let Some(intent) = &context.last_intent {
            summary.push(format!("–ü–æ—Å–ª–µ–¥–Ω–µ–µ: {}", intent));
        }
        
        summary.join(" | ")
    }
    
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    #[allow(dead_code)]
    pub async fn set_session_data(&self, user_id: &str, key: String, value: String) {
        self.update_context(user_id, |ctx| {
            ctx.session_data.insert(key, value);
        }).await;
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    #[allow(dead_code)]
    pub async fn get_session_data(&self, user_id: &str, key: &str) -> Option<String> {
        let context = self.get_context(user_id).await;
        context.session_data.get(key).cloned()
    }
    
    /// –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #[allow(dead_code)]
    pub async fn clear_session(&self, user_id: &str) {
        self.update_context(user_id, |ctx| {
            ctx.session_data.clear();
        }).await;
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    #[allow(dead_code)]
    pub async fn get_history(&self, user_id: &str) -> Vec<String> {
        let context = self.get_context(user_id).await;
        context.message_history
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pub async fn get_message_count(&self, user_id: &str) -> usize {
        let context = self.get_context(user_id).await;
        context.message_count
    }
    
    /// üë§ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    pub async fn set_user_name(&self, user_id: &str, name: String) {
        self.set_preference(user_id, "user_name".to_string(), name).await;
        tracing::info!("üë§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –≤ –ø–∞–º—è—Ç—å", user_id);
    }
    
    /// üë§ –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–º—è—Ç–∏
    pub async fn get_user_name(&self, user_id: &str) -> Option<String> {
        self.get_preference(user_id, "user_name").await
    }
    
    /// ‚ù§Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pub async fn set_emotional_state(&self, user_id: &str, mood: &str, emotion: Option<&str>) {
        self.update_context(user_id, |ctx| {
            ctx.preferences.insert("last_mood".to_string(), mood.to_string());
            if let Some(em) = emotion {
                ctx.preferences.insert("last_emotion".to_string(), em.to_string());
            }
        }).await;
        tracing::info!("‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ {} = {}, —ç–º–æ—Ü–∏—è: {:?}", user_id, mood, emotion);
    }
    
    /// ‚ù§Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pub async fn get_last_mood(&self, user_id: &str) -> Option<String> {
        self.get_preference(user_id, "last_mood").await
    }
    
    /// ‚ù§Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —ç–º–æ—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #[allow(dead_code)]  // –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ–∏—á
    pub async fn get_last_emotion(&self, user_id: &str) -> Option<String> {
        self.get_preference(user_id, "last_emotion").await
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    #[allow(dead_code)]
    pub async fn is_new_user(&self, user_id: &str) -> bool {
        let contexts = self.contexts.read().await;
        !contexts.contains_key(user_id)
    }
    
    /// –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #[allow(dead_code)]
    pub async fn remove_context(&self, user_id: &str) {
        let mut contexts = self.contexts.write().await;
        contexts.remove(user_id);
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
#[derive(Debug)]
#[allow(dead_code)]
pub struct MemoryStats {
    pub total_users: usize,
    pub total_messages: usize,
}

impl Default for BotMemory {
    fn default() -> Self {
        Self::new()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_memory_operations() {
        let memory = BotMemory::new();
        let user_id = "user123";
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        assert!(memory.is_new_user(user_id).await);
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        memory.add_message(user_id, "Hello".to_string()).await;
        assert!(!memory.is_new_user(user_id).await);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—á—ë—Ç—á–∏–∫–∞
        assert_eq!(memory.get_message_count(user_id).await, 1);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        memory.set_preference(user_id, "cuisine".to_string(), "seafood".to_string()).await;
        assert_eq!(
            memory.get_preference(user_id, "cuisine").await,
            Some("seafood".to_string())
        );
    }
}
