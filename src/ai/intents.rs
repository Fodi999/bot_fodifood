/// –¢–∏–ø—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#[derive(Debug, Clone, PartialEq)]
pub enum Intent {
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ–±—â–µ–Ω–∏–µ
    Greeting,
    Farewell,
    Thanks,
    Help,
    WhoAmI, // üë§ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ("–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç", "–∫—Ç–æ —è")

    // –ó–∞–∫–∞–∑—ã
    OrderStatus,
    CreateOrder,
    CancelOrder,

    // –ú–µ–Ω—é –∏ –ø—Ä–æ–¥—É–∫—Ç—ã
    ViewMenu,
    ProductInfo,
    PriceInquiry,
    Recommendation,
    ProductSearch,      // üîç –ü–æ–∏—Å–∫ –±–ª—é–¥ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É
    SearchByIngredient, // üêü –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É ("–ª–æ—Å–æ—Å—å", "—Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏")

    // –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ —Å–∫–ª–∞–¥
    CheckIngredients,
    StockStatus,

    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
    GetStatistics,
    SalesAnalysis,
    AnalyzeBusiness,     // üìä –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
    CompareBusinesses,   // üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–æ–≤

    // –î–æ—Å—Ç–∞–≤–∫–∞
    DeliveryInfo,
    CourierStatus,

    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
    Unknown,
}

/// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è (–¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
enum IntentPriority {
    Low = 1,
    Medium = 2,
    High = 3,
}

/// –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
#[derive(Debug, Clone)]
struct IntentCandidate {
    intent: Intent,
    priority: IntentPriority,
    score: usize, // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–≤—à–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
}

/// –°–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π
pub struct IntentClassifier;

impl IntentClassifier {
    /// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    pub fn classify(text: &str) -> Intent {
        Self::classify_with_context(text, None)
    }

    /// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    pub fn classify_with_context(text: &str, last_intent: Option<&Intent>) -> Intent {
        let text_lower = text.to_lowercase();
        let mut candidates: Vec<IntentCandidate> = Vec::new();

        // === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                // –†—É—Å—Å–∫–∏–π
                "–ø—Ä–∏–≤–µ—Ç",
                "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π",
                "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å",
                "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
                "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
                "–ø—Ä–∏–≤–µ—Ç–∏–∫",
                "–∑–¥–æ—Ä–æ–≤–æ",
                // English
                "hi",
                "hello",
                "hey",
                "good morning",
                "good afternoon",
                "good evening",
                // Polski
                "cze≈õƒá",
                "dzie≈Ñ dobry",
                "witaj",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::Greeting,
                priority: IntentPriority::High,
                score,
            });
        }

        // === –ü—Ä–æ—â–∞–Ω–∏—è (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                // –†—É—Å—Å–∫–∏–π - –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã
                " –ø–æ–∫–∞",
                "–ø–æ–∫–∞!",
                "–ø–æ–∫–∞,",
                "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è",
                "–ø—Ä–æ—â–∞–π",
                "—É–≤–∏–¥–∏–º—Å—è",
                "–≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ",
                "–¥–æ –≤—Å—Ç—Ä–µ—á–∏",
                // English
                "bye",
                "goodbye",
                "see you",
                "farewell",
                // Polski
                "do widzenia",
                "≈ºegnaj",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::Farewell,
                priority: IntentPriority::High,
                score,
            });
        }

        // === –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                // –†—É—Å—Å–∫–∏–π
                "—Å–ø–∞—Å–∏–±–æ",
                "–±–ª–∞–≥–æ–¥–∞—Ä—é",
                "—Å–ø—Å",
                "–±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω",
                "–æ–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ",
                // English
                "thanks",
                "thank you",
                "thx",
                "ty",
                // Polski
                "dziƒôkujƒô",
                "dziƒôki",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::Thanks,
                priority: IntentPriority::High,
                score,
            });
        }

        // === –ü–æ–º–æ—â—å (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                // –†—É—Å—Å–∫–∏–π
                "–ø–æ–º–æ—â—å",
                "–ø–æ–º–æ–≥–∏",
                "–∫–æ–º–∞–Ω–¥—ã",
                "—á—Ç–æ —É–º–µ–µ—à—å",
                "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å",
                "—Å–ø—Ä–∞–≤–∫–∞",
                // English
                "help",
                "commands",
                "what can you do",
                "assistance",
                // Polski
                "pomoc",
                "komendy",
                "co potrafisz",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::Help,
                priority: IntentPriority::High,
                score,
            });
        }

        // === üë§ –ö—Ç–æ —è? / –ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç? (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                // –†—É—Å—Å–∫–∏–π
                "–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç",
                "–∫—Ç–æ —è",
                "–º–æ—ë –∏–º—è",
                "–º–æ–µ –∏–º—è",
                "–º–µ–Ω—è –∑–æ–≤—É—Ç",
                "—Å–∫–∞–∂–∏ –º–æ—ë –∏–º—è",
                "–Ω–∞–ø–æ–º–Ω–∏ –∏–º—è",
                "–ø–æ–º–Ω–∏—à—å –º–µ–Ω—è",
                // English
                "what is my name",
                "who am i",
                "my name",
                "do you know me",
                // Polski
                "jak siƒô nazywam",
                "kim jestem",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::WhoAmI,
                priority: IntentPriority::High,
                score,
            });
        }

        // === –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏) ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                // –†—É—Å—Å–∫–∏–π - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã
                "—Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞",
                "–≥–¥–µ –∑–∞–∫–∞–∑",
                "–≥–¥–µ –º–æ–π –∑–∞–∫–∞–∑",
                "–ø–æ–∫–∞–∂–∏ –∑–∞–∫–∞–∑",
                "–ø–æ–∫–∞–∂–∏ –º–æ–π –∑–∞–∫–∞–∑",
                "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–∫–∞–∑—ã",  // NEW: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
                "–º–æ–∏ –∑–∞–∫–∞–∑—ã",         // NEW: –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ–æ—Ä–º–∞
                "—Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤",     // NEW: —Å–ø–∏—Å–æ–∫
                "—Å–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å",
                "–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç",
                "—Ç—Ä–µ–∫",
                "–æ—Ç—Å–ª–µ–¥–∏—Ç—å",
                "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑",
                "–ø—Ä–æ–≤–µ—Ä—å –∑–∞–∫–∞–∑",      // NEW: –∏–º–ø–µ—Ä–∞—Ç–∏–≤
                "–∑–∞–∫–∞–∑—ã",             // NEW: –ø—Ä–æ—Å—Ç–æ "–∑–∞–∫–∞–∑—ã"
                // English
                "order status",
                "where is my order",
                "track order",
                "check order",
                "my orders",          // NEW: plural
                "show orders",        // NEW
                // Polski
                "status zam√≥wienia",
                "gdzie jest zam√≥wienie",
                "moje zam√≥wienia",    // NEW
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::OrderStatus,
                priority: IntentPriority::High,
                score,
            });
        }

        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ORD- –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if text_lower.contains("ord-") {
            candidates.push(IntentCandidate {
                intent: Intent::OrderStatus,
                priority: IntentPriority::High,
                score: 3,
            });
        }

        // === –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                // –†—É—Å—Å–∫–∏–π - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
                "—Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑",
                "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                "–∑–∞–∫–∞–∑–∞—Ç—å",
                "—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å",
                "—Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑",
                "–Ω–æ–≤—ã–π –∑–∞–∫–∞–∑",
                "–∑–∞–∫–∞–∂—É",
                "–∑–∞–∫–∞–∂–∏",      // NEW: "–∑–∞–∫–∞–∂–∏ —É—Ä–∞–º–∞–∫–∏"
                "–æ—Ñ–æ—Ä–º–∏ –∑–∞–∫–∞–∑", // NEW: "–æ—Ñ–æ—Ä–º–∏ –∑–∞–∫–∞–∑"
                "–±—É–¥—É –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å",
                "—Ö–æ—á—É –∫—É–ø–∏—Ç—å",
                "–≤–æ–∑—å–º—É",
                "–æ—Ñ–æ—Ä–º–ª—é –∑–∞–∫–∞–∑",
                "–¥–æ–±–∞–≤—å –≤ –∑–∞–∫–∞–∑", // NEW: "–¥–æ–±–∞–≤—å –≤ –∑–∞–∫–∞–∑ –∫–æ–ª—É"
                "–ø–æ–ª–æ–∂–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", // NEW: "–ø–æ–ª–æ–∂–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É"
                // English
                "create order",
                "make order",
                "place order",
                "new order",
                "i want to order",
                "order me",
                // Polski
                "z≈Ç√≥≈º zam√≥wienie",
                "nowe zam√≥wienie",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::CreateOrder,
                priority: IntentPriority::Medium,
                score,
            });
        }

        // === –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞) ===
        let cancel_priority = if matches!(
            last_intent,
            Some(Intent::OrderStatus) | Some(Intent::CreateOrder)
        ) {
            IntentPriority::High
        } else {
            IntentPriority::Medium
        };

        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                // –†—É—Å—Å–∫–∏–π - —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                "–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                "–æ—Ç–º–µ–Ω–∞",
                "–Ω–µ –Ω—É–∂–µ–Ω –∑–∞–∫–∞–∑",
                "–µ–≥–æ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å",
                "–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å",
                "–æ—Ç–º–µ–Ω–∏—Ç—å",
                "–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è",
                "—É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑",
                // English
                "cancel order",
                "cancel it",
                "remove order",
                // Polski
                "anuluj zam√≥wienie",
                "usu≈Ñ zam√≥wienie",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::CancelOrder,
                priority: cancel_priority,
                score,
            });
        }

        // === –ú–µ–Ω—é (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                // –†—É—Å—Å–∫–∏–π - –∏–∑–±–µ–≥–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å "–ø–æ–∫–∞–∂–∏"
                "–º–µ–Ω—é",
                "–±–ª—é–¥–∞",
                "—á—Ç–æ –µ—Å—Ç—å",
                "—á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å",
                "–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç",
                "–ø–æ–∫–∞–∂–∏ –º–µ–Ω—é",
                "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é",
                "–ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é",
                "–∫–∞–∫–∏–µ –±–ª—é–¥–∞",
                "—á—Ç–æ –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å",
                "—á—Ç–æ –≥–æ—Ç–æ–≤–∏—Ç–µ",
                "—Å–ø–∏—Å–æ–∫ –±–ª—é–¥",
                "—Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é",
                "–¥–∞–π—Ç–µ –º–µ–Ω—é",
                // English
                "menu",
                "dishes",
                "what do you have",
                "show menu",
                "products",
                "show me menu",
                // Polski
                "menu",
                "dania",
                "co macie",
                "poka≈º menu",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::ViewMenu,
                priority: IntentPriority::Medium,
                score,
            });
        }

        // === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                // –†—É—Å—Å–∫–∏–π
                "—Å–æ—Å—Ç–∞–≤",
                "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –±–ª—é–¥–∞",
                "—á—Ç–æ –≤—Ö–æ–¥–∏—Ç",
                "–∫–∞–ª–æ—Ä–∏–∏",
                "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ",
                // English
                "ingredients",
                "what's in",
                "calories",
                "product info",
                // Polski
                "sk≈Çadniki",
                "co zawiera",
                "kalorie",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::ProductInfo,
                priority: IntentPriority::Medium,
                score,
            });
        }

        // === –¶–µ–Ω—ã (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                // –†—É—Å—Å–∫–∏–π
                "—Ü–µ–Ω–∞",
                "—Å—Ç–æ–∏–º–æ—Å—Ç—å",
                "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç",
                "–ø—Ä–∞–π—Å",
                "—Ü–µ–Ω—ã",
                "—Å–∫–æ–ª—å–∫–æ",
                // English
                "price",
                "cost",
                "how much",
                "pricing",
                // Polski
                "cena",
                "ile kosztuje",
                "cennik",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::PriceInquiry,
                priority: IntentPriority::Medium,
                score,
            });
        }

        // === –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                // –†—É—Å—Å–∫–∏–π - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
                "–ø–æ—Å–æ–≤–µ—Ç—É–π",
                "—á—Ç–æ –∑–∞–∫–∞–∑–∞—Ç—å",
                "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
                "—á—Ç–æ –≤–∫—É—Å–Ω–æ–µ",
                "—á—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å",
                "—á—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å",
                "—á—Ç–æ –ª—É—á—à–µ",
                "—á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å",
                "–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π",
                "–Ω–µ –∑–Ω–∞—é —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å",
                "–ø–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å",
                "—á—Ç–æ –≤–∑—è—Ç—å",
                "—á—Ç–æ –≤–∫—É—Å–Ω–æ–≥–æ",
                "—Ö–æ—á—É —á–µ–≥–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–≥–æ",
                "—á—Ç–æ-–Ω–∏–±—É–¥—å –≤–∫—É—Å–Ω–æ–µ",
                // English
                "recommend",
                "what's good",
                "what should i order",
                "suggestions",
                // Polski
                "poleƒá",
                "co zam√≥wiƒá",
                "co dobre",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::Recommendation,
                priority: IntentPriority::Medium,
                score,
            });
        }

        // === üêü –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∏–∂–µ) ===
        let ingredients = [
            "–ª–æ—Å–æ—Å—å",
            "–ª–æ—Å–æ—Å–µ–º",
            "–ª–æ—Å–æ—Å—è",
            "salmon",
            "–∫—Ä–µ–≤–µ—Ç–∫–∏",
            "–∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏",
            "–∫—Ä–µ–≤–µ—Ç–æ–∫",
            "shrimp",
            "—Ç—É–Ω–µ—Ü",
            "—Ç—É–Ω—Ü–æ–º",
            "—Ç—É–Ω—Ü–∞",
            "tuna",
            "—É–≥–æ—Ä—å",
            "—É–≥—Ä—ë–º",
            "—É–≥—Ä—è",
            "eel",
            "–∞–≤–æ–∫–∞–¥–æ",
            "avocado",
            "–æ–≥—É—Ä–µ—Ü",
            "–æ–≥—É—Ä—Ü–æ–º",
            "cucumber",
            "—Å—ã—Ä",
            "—Å—ã—Ä–æ–º",
            "cheese",
            "–∏–∫—Ä–∞",
            "–∏–∫—Ä–æ–π",
            "caviar",
        ];

        let words: Vec<&str> = text_lower.split_whitespace().collect();
        let has_ingredient = ingredients.iter().any(|&ing| text_lower.contains(ing));

        // === üîç –ü–æ–∏—Å–∫ –±–ª—é–¥ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                // –†—É—Å—Å–∫–∏–π - —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
                "—á—Ç–æ –µ—Å—Ç—å —Å",
                "–ø–æ–∫–∞–∂–∏ —Å",
                "–±–ª—é–¥–∞ —Å",
                "–µ—Å—Ç—å —Å",
                "—Å —á–µ–º –µ—Å—Ç—å",
                "–ø–æ–∫–∞–∂–∏ —á—Ç–æ –µ—Å—Ç—å —Å",
                "—á—Ç–æ —É –≤–∞—Å —Å",
                "—Ö–æ—á—É —Å",
                "–∏–∑ —á–µ–≥–æ –µ—Å—Ç—å",
                "—á—Ç–æ –∏–∑",
                "–ø–æ—Å–æ–≤–µ—Ç—É–π –∏–∑",
                "—á—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å –∏–∑",
                "—á—Ç–æ –µ—Å—Ç—å –∏–∑",
                "–±–ª—é–¥–∞ –∏–∑",
                "—á—Ç–æ –≤–∑—è—Ç—å –∏–∑",
                "—á—Ç–æ —Å",
                "–∏–∑ –ª–æ—Å–æ—Å—è",
                "–∏–∑ –∫—Ä–µ–≤–µ—Ç–æ–∫",
                "–∏–∑ —Ç—É–Ω—Ü–∞",
                "—Å –ª–æ—Å–æ—Å–µ–º",
                "—Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏",
                "–ª–æ—Å–æ—Å—è –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å",
                "–∫—Ä–µ–≤–µ—Ç–æ–∫ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å",
                "—Ç—É–Ω—Ü–∞ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å",
                // English
                "dishes with",
                "what do you have with",
                "show me with",
                "with salmon",
                "with shrimp",
                // Polski
                "dania z",
                "co macie z",
            ],
        ) {
            // üî• –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ SearchByIngredient
            if has_ingredient {
                candidates.push(IntentCandidate {
                    intent: Intent::SearchByIngredient,
                    priority: IntentPriority::High,
                    score: score + 1, // –í—ã—à–µ —á–µ–º ProductSearch
                });
            } else {
                candidates.push(IntentCandidate {
                    intent: Intent::ProductSearch,
                    priority: IntentPriority::High,
                    score,
                });
            }
        }

        // === üêü –ü–æ–∏—Å–∫ –ø–æ –æ–¥–Ω–æ–º—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ===
        // –û–¥–Ω–æ —Å–ª–æ–≤–æ - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
        if words.len() == 1 && has_ingredient {
            candidates.push(IntentCandidate {
                intent: Intent::SearchByIngredient,
                priority: IntentPriority::High,
                score: 5, // üí™ –î–∞–µ–º –≤—ã—Å–æ–∫–∏–π –±–∞–ª–ª, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –ø–æ–±–µ–¥–∏–ª
            });
        }

        // "—Å [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç]", "–∏–∑ [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç]"
        if (text_lower.starts_with("—Å ") || text_lower.starts_with("–∏–∑ ")) && has_ingredient {
            candidates.push(IntentCandidate {
                intent: Intent::SearchByIngredient,
                priority: IntentPriority::High,
                score: 4, // –í—ã—Å–æ–∫–∏–π score –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            });
        }

        // === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤) ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                "–æ—Å—Ç–∞—Ç–∫–∏",
                "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",
                "—Å–∫–ª–∞–¥",
                "check ingredients",
                "sprawd≈∫ sk≈Çadniki",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::CheckIngredients,
                priority: IntentPriority::Low,
                score,
            });
        }

        // === –°—Ç–∞—Ç—É—Å —Å–∫–ª–∞–¥–∞ ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                "–Ω–∞–ª–∏—á–∏–µ",
                "–µ—Å—Ç—å –ª–∏",
                "–≤ –Ω–∞–ª–∏—á–∏–∏",
                "stock",
                "availability",
                "dostƒôpno≈õƒá",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::StockStatus,
                priority: IntentPriority::Low,
                score,
            });
        }

        // === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ vs –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ (–≤–µ—Å–æ–≤—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã) ===
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç - —ç—Ç–æ —Å–∫–æ—Ä–µ–µ SalesAnalysis
        let has_time_context = Self::match_keywords(
            &text_lower,
            &[
                "–∑–∞ –¥–µ–Ω—å",
                "–∑–∞ –Ω–µ–¥–µ–ª—é",
                "–∑–∞ –º–µ—Å—è—Ü",
                "—Å–µ–≥–æ–¥–Ω—è",
                "–≤—á–µ—Ä–∞",
                "—ç—Ç–æ—Ç –º–µ—Å—è—Ü",
                "today",
                "yesterday",
                "this week",
                "this month",
            ],
        )
        .is_some();

        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                "–ø—Ä–æ–¥–∞–∂–∏",
                "sales",
                "–≤—ã—Ä—É—á–∫–∞",
                "–¥–æ—Ö–æ–¥",
                "revenue",
                "sprzeda≈º",
                "przych√≥d",
            ],
        ) {
            let intent = if has_time_context {
                Intent::SalesAnalysis
            } else {
                Intent::GetStatistics
            };
            candidates.push(IntentCandidate {
                intent,
                priority: IntentPriority::Low,
                score: if has_time_context { score + 2 } else { score },
            });
        }

        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "stats",
                "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                "–æ—Ç—á–µ—Ç",
                "analytics",
                "statystyki",
                "raport",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::GetStatistics,
                priority: IntentPriority::Low,
                score,
            });
        }

        // –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å–∞
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–∏–∑–Ω–µ—Å",
                "–∞–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å–∞",
                "–º–µ—Ç—Ä–∏–∫–∏ –±–∏–∑–Ω–µ—Å–∞",
                "analyze business",
                "business analysis",
                "business metrics",
                "–∫–∞–∫ –¥–µ–ª–∞ —É –±–∏–∑–Ω–µ—Å–∞",
                "–ø–æ–∫–∞–∂–∏ –º–µ—Ç—Ä–∏–∫–∏",
                "–æ—Ü–µ–Ω–∫–∞ –±–∏–∑–Ω–µ—Å–∞",
                "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞",
                "—Å—Ç–æ–∏—Ç –ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å",
                "—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å",
                "roi –±–∏–∑–Ω–µ—Å–∞",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::AnalyzeBusiness,
                priority: IntentPriority::Medium,
                score: score + 3, // –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            });
        }

        // === –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–æ–≤ ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                "—Å—Ä–∞–≤–Ω–∏ –±–∏–∑–Ω–µ—Å",
                "—Å—Ä–∞–≤–Ω–∏—Ç—å –±–∏–∑–Ω–µ—Å",
                "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å",
                "compare business",
                "comparison",
                "—á—Ç–æ –ª—É—á—à–µ",
                "–∫–∞–∫–æ–π –≤—ã–±—Ä–∞—Ç—å",
                "–∫–∞–∫–æ–π –±–∏–∑–Ω–µ—Å –ª—É—á—à–µ",
                "—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É",
                "–æ—Ç–ª–∏—á–∏—è –±–∏–∑–Ω–µ—Å",
                "–∏–ª–∏",
                "versus",
                "vs",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::CompareBusinesses,
                priority: IntentPriority::High,
                score: score + 4, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            });
        }

        // === –î–æ—Å—Ç–∞–≤–∫–∞ ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                "–¥–æ—Å—Ç–∞–≤–∫–∞",
                "–∫—É—Ä—å–µ—Ä",
                "delivery",
                "–∫–æ–≥–¥–∞ –ø—Ä–∏–≤–µ–∑—É—Ç",
                "dostawa",
                "kiedy dostarczycie",
                "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞",
                "–∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ",
                "–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏",
                "–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏",
                "–¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è",
                "–∑–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏",
                "–∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::DeliveryInfo,
                priority: IntentPriority::Medium,
                score,
            });
        }

        // === –°—Ç–∞—Ç—É—Å –∫—É—Ä—å–µ—Ä–∞ ===
        if let Some(score) = Self::match_keywords(
            &text_lower,
            &[
                "–≥–¥–µ –∫—É—Ä—å–µ—Ä",
                "courier",
                "–∫—É—Ä—å–µ—Ä –µ–¥–µ—Ç",
                "delivery status",
                "gdzie kurier",
            ],
        ) {
            candidates.push(IntentCandidate {
                intent: Intent::CourierStatus,
                priority: IntentPriority::Medium,
                score,
            });
        }

        // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        Self::select_best_intent(candidates)
    }

    /// –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    fn match_keywords(text: &str, keywords: &[&str]) -> Option<usize> {
        let score = keywords.iter().filter(|&&kw| text.contains(kw)).count();

        if score > 0 {
            Some(score)
        } else {
            None
        }
    }

    /// –í—ã–±—Ä–∞—Ç—å –ª—É—á—à–µ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    fn select_best_intent(mut candidates: Vec<IntentCandidate>) -> Intent {
        if candidates.is_empty() {
            return Intent::Unknown;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—É–±—ã–≤–∞–Ω–∏–µ), –∑–∞—Ç–µ–º –ø–æ score (—É–±—ã–≤–∞–Ω–∏–µ)
        candidates.sort_by(|a, b| match b.priority.cmp(&a.priority) {
            std::cmp::Ordering::Equal => b.score.cmp(&a.score),
            other => other,
        });

        candidates[0].intent.clone()
    }

    /// –ò–∑–≤–ª–µ—á—å ID –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    pub fn extract_order_id(text: &str) -> Option<String> {
        let text_upper = text.to_uppercase();

        // –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ ORD-XXXXX
        if let Some(start) = text_upper.find("ORD-") {
            let id_part = &text_upper[start..];
            if let Some(end) = id_part.find(|c: char| !c.is_alphanumeric() && c != '-') {
                Some(id_part[..end].to_string())
            } else {
                Some(id_part.to_string())
            }
        } else {
            None
        }
    }

    /// –ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞/–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    pub fn extract_product_name(text: &str) -> Option<String> {
        // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –±–µ—Ä—ë–º —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        let words: Vec<&str> = text.split_whitespace().collect();

        if words.len() > 1 {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ (–∫–æ–º–∞–Ω–¥—É) –∏ –±–µ—Ä—ë–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
            Some(words[1..].join(" "))
        } else {
            None
        }
    }

    /// üêü –ò–∑–≤–ª–µ—á—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è SearchByIngredient)
    pub fn extract_ingredient(text: &str) -> String {
        let ingredients = [
            "–ª–æ—Å–æ—Å—å",
            "–ª–æ—Å–æ—Å–µ–º",
            "–ª–æ—Å–æ—Å—è",
            "salmon",
            "–∫—Ä–µ–≤–µ—Ç–∫–∏",
            "–∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏",
            "–∫—Ä–µ–≤–µ—Ç–æ–∫",
            "shrimp",
            "—Ç—É–Ω–µ—Ü",
            "—Ç—É–Ω—Ü–æ–º",
            "—Ç—É–Ω—Ü–∞",
            "tuna",
            "—É–≥–æ—Ä—å",
            "—É–≥—Ä—ë–º",
            "—É–≥—Ä—è",
            "eel",
            "–∞–≤–æ–∫–∞–¥–æ",
            "avocado",
            "–æ–≥—É—Ä–µ—Ü",
            "–æ–≥—É—Ä—Ü–æ–º",
            "cucumber",
            "—Å—ã—Ä",
            "—Å—ã—Ä–æ–º",
            "cheese",
            "–∏–∫—Ä–∞",
            "–∏–∫—Ä–æ–π",
            "caviar",
        ];

        let text_lower = text.to_lowercase();

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        for &ingredient in &ingredients {
            if text_lower.contains(ingredient) {
                return ingredient.to_string();
            }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        text_lower
            .replace("–±–ª—é–¥–∞ —Å ", "")
            .replace("–±–ª—é–¥–∞ –∏–∑ ", "")
            .replace("—á—Ç–æ –µ—Å—Ç—å —Å ", "")
            .replace("–ø–æ–∫–∞–∂–∏ —Å ", "")
            .replace("—Å ", "")
            .replace("–∏–∑ ", "")
            .replace("—á—Ç–æ ", "")
            .replace("–µ—Å—Ç—å ", "")
            .replace("–ø–æ—Å–æ–≤–µ—Ç—É–π ", "")
            .replace("–ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å ", "")
            .trim()
            .to_string()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_greeting_classification() {
        assert_eq!(IntentClassifier::classify("–ü—Ä–∏–≤–µ—Ç!"), Intent::Greeting);
        assert_eq!(IntentClassifier::classify("hello"), Intent::Greeting);
        assert_eq!(IntentClassifier::classify("–î–æ–±—Ä—ã–π –¥–µ–Ω—å!"), Intent::Greeting);
    }

    #[test]
    fn test_order_id_extraction() {
        assert_eq!(
            IntentClassifier::extract_order_id("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ORD-12345"),
            Some("ORD-12345".to_string())
        );
        assert_eq!(
            IntentClassifier::extract_order_id("order_status ORD-ABC123"),
            Some("ORD-ABC123".to_string())
        );
    }

    #[test]
    fn test_menu_classification() {
        assert_eq!(IntentClassifier::classify("–ø–æ–∫–∞–∂–∏ –º–µ–Ω—é"), Intent::ViewMenu);
        assert_eq!(
            IntentClassifier::classify("—á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å?"),
            Intent::ViewMenu
        );
    }

    #[test]
    fn test_improved_synonyms() {
        // –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
        assert_eq!(
            IntentClassifier::classify("–≥–¥–µ –º–æ–π –∑–∞–∫–∞–∑"),
            Intent::OrderStatus
        );
        assert_eq!(
            IntentClassifier::classify("–ø–æ–∫–∞–∂–∏ –º–æ–π –∑–∞–∫–∞–∑"),
            Intent::OrderStatus
        );
        assert_eq!(
            IntentClassifier::classify("—Å–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å"),
            Intent::OrderStatus
        );
    }

    #[test]
    fn test_weighted_priorities() {
        // –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –¥–µ–Ω—å -> SalesAnalysis
        assert_eq!(
            IntentClassifier::classify("–ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –¥–µ–Ω—å"),
            Intent::SalesAnalysis
        );
        assert_eq!(
            IntentClassifier::classify("–ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é"),
            Intent::SalesAnalysis
        );

        // –ü—Ä–æ—Å—Ç–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ -> GetStatistics
        assert_eq!(
            IntentClassifier::classify("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            Intent::GetStatistics
        );
        assert_eq!(
            IntentClassifier::classify("–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"),
            Intent::GetStatistics
        );
    }

    #[test]
    fn test_context_aware() {
        // –ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ "–æ—Ç–º–µ–Ω–∏—Ç—å" -> CancelOrder (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        assert_eq!(
            IntentClassifier::classify("–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å?"),
            Intent::CancelOrder
        );

        // –° –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º OrderStatus -> CancelOrder (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        assert_eq!(
            IntentClassifier::classify_with_context(
                "–µ–≥–æ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å?",
                Some(&Intent::OrderStatus)
            ),
            Intent::CancelOrder
        );
    }

    #[test]
    fn test_multilang() {
        // English
        assert_eq!(
            IntentClassifier::classify("show me the menu"),
            Intent::ViewMenu
        );
        assert_eq!(
            IntentClassifier::classify("what's the price"),
            Intent::PriceInquiry
        );

        // Polski
        assert_eq!(IntentClassifier::classify("poka≈º menu"), Intent::ViewMenu);
        assert_eq!(IntentClassifier::classify("dziƒôkujƒô"), Intent::Thanks);
    }

    #[test]
    fn test_search_by_ingredient() {
        println!("\nüß™ Testing SearchByIngredient intent classification...\n");

        // –û–¥–Ω–æ —Å–ª–æ–≤–æ - –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        let test_cases = vec![
            ("–ª–æ—Å–æ—Å—å", Intent::SearchByIngredient),
            ("–∫—Ä–µ–≤–µ—Ç–∫–∏", Intent::SearchByIngredient),
            ("—Ç—É–Ω–µ—Ü", Intent::SearchByIngredient),
            ("salmon", Intent::SearchByIngredient),
            ("avocado", Intent::SearchByIngredient),
        ];

        for (input, expected) in test_cases {
            let result = IntentClassifier::classify(input);
            println!("  ‚úì \"{}\" ‚Üí {:?}", input, result);
            assert_eq!(result, expected, "Failed for input: {}", input);
        }
    }

    #[test]
    fn test_search_by_ingredient_with_prepositions() {
        println!("\nüß™ Testing SearchByIngredient with prepositions...\n");

        let test_cases = vec![
            ("—Å –ª–æ—Å–æ—Å–µ–º", Intent::SearchByIngredient),
            ("–∏–∑ –∫—Ä–µ–≤–µ—Ç–æ–∫", Intent::SearchByIngredient),
            ("—Å —Ç—É–Ω—Ü–æ–º", Intent::SearchByIngredient),
            ("–∏–∑ –∞–≤–æ–∫–∞–¥–æ", Intent::SearchByIngredient),
        ];

        for (input, expected) in test_cases {
            let result = IntentClassifier::classify(input);
            println!("  ‚úì \"{}\" ‚Üí {:?}", input, result);
            assert_eq!(result, expected, "Failed for input: {}", input);
        }
    }

    #[test]
    fn test_search_by_ingredient_complex() {
        println!("\nüß™ Testing SearchByIngredient with complex phrases...\n");

        let test_cases = vec![
            ("–±–ª—é–¥–∞ —Å –ª–æ—Å–æ—Å–µ–º", Intent::SearchByIngredient),
            ("—á—Ç–æ –µ—Å—Ç—å —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏", Intent::SearchByIngredient),
            ("–ø–æ–∫–∞–∂–∏ —á—Ç–æ –µ—Å—Ç—å —Å —Ç—É–Ω—Ü–æ–º", Intent::SearchByIngredient),
            ("—á—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å –∏–∑ –∫—Ä–µ–≤–µ—Ç–æ–∫", Intent::SearchByIngredient),
            ("–±–ª—é–¥–∞ –∏–∑ –ª–æ—Å–æ—Å—è", Intent::SearchByIngredient),
        ];

        for (input, expected) in test_cases {
            let result = IntentClassifier::classify(input);
            println!("  ‚úì \"{}\" ‚Üí {:?}", input, result);
            assert_eq!(result, expected, "Failed for input: {}", input);
        }
    }

    #[test]
    fn test_extract_ingredient() {
        println!("\nüß™ Testing ingredient extraction...\n");

        let test_cases = vec![
            ("–ª–æ—Å–æ—Å—å", "–ª–æ—Å–æ—Å—å"),
            ("–±–ª—é–¥–∞ —Å –ª–æ—Å–æ—Å–µ–º", "–ª–æ—Å–æ—Å–µ–º"),
            ("—á—Ç–æ –µ—Å—Ç—å —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏", "–∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏"),
            ("—Å —Ç—É–Ω—Ü–æ–º", "—Ç—É–Ω—Ü–æ–º"),
            ("–∏–∑ –∞–≤–æ–∫–∞–¥–æ", "–∞–≤–æ–∫–∞–¥–æ"), // –∞–≤–æ–∫–∞–¥–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            ("—á—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å –∏–∑ –∫—Ä–µ–≤–µ—Ç–æ–∫", "–∫—Ä–µ–≤–µ—Ç–æ–∫"),
            ("salmon", "salmon"),
            ("dishes with shrimp", "shrimp"),
        ];

        for (input, expected) in test_cases {
            let result = IntentClassifier::extract_ingredient(input);
            println!("  ‚úì \"{}\" ‚Üí \"{}\"", input, result);
            assert_eq!(
                result, expected,
                "Failed to extract ingredient from: {}",
                input
            );
        }
    }

    #[test]
    fn test_product_search_vs_search_by_ingredient() {
        println!("\nüß™ Testing ProductSearch vs SearchByIngredient distinction...\n");

        // ProductSearch (–±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞)
        let product_search_cases = vec!["—á—Ç–æ –µ—Å—Ç—å", "–ø–æ–∫–∞–∂–∏ –±–ª—é–¥–∞", "—á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å"];

        for input in product_search_cases {
            let result = IntentClassifier::classify(input);
            println!("  ProductSearch: \"{}\" ‚Üí {:?}", input, result);
            // –ú–æ–∂–µ—Ç –±—ã—Ç—å ViewMenu –∏–ª–∏ Unknown, –Ω–æ –Ω–µ SearchByIngredient
            assert_ne!(
                result,
                Intent::SearchByIngredient,
                "Should not be SearchByIngredient: {}",
                input
            );
        }

        // SearchByIngredient (—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º)
        let ingredient_search_cases = vec![
            ("–±–ª—é–¥–∞ —Å –ª–æ—Å–æ—Å–µ–º", Intent::SearchByIngredient),
            ("—á—Ç–æ –µ—Å—Ç—å –∏–∑ –∫—Ä–µ–≤–µ—Ç–æ–∫", Intent::SearchByIngredient),
        ];

        for (input, expected) in ingredient_search_cases {
            let result = IntentClassifier::classify(input);
            println!("  SearchByIngredient: \"{}\" ‚Üí {:?}", input, result);
            assert_eq!(result, expected, "Failed for input: {}", input);
        }
    }
}
