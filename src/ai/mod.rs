mod intents;
mod rules;
mod memory;
mod thinker;  // üß† –ù–æ–≤—ã–π –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å

use anyhow::Result;
use crate::config::Config;
use crate::api::go_backend;

pub use intents::{Intent, IntentClassifier};
pub use rules::ResponseGenerator;
pub use memory::BotMemory;
pub use thinker::Thinker;  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

/// –ì–ª–∞–≤–Ω—ã–π AI –¥–≤–∏–∂–æ–∫ –±–æ—Ç–∞
pub struct AIEngine {
    memory: BotMemory,
}

impl AIEngine {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π AI –¥–≤–∏–∂–æ–∫
    pub fn new() -> Self {
        Self {
            memory: BotMemory::new(),
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–º—è—Ç–∏
    #[allow(dead_code)]
    pub fn memory(&self) -> &BotMemory {
        &self.memory
    }
    
    /// üë§ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    pub async fn set_user_name(&self, user_id: &str, name: String) {
        self.memory.set_user_name(user_id, name).await;
    }
    
    /// üë§ –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–º—è—Ç–∏
    #[allow(dead_code)]  // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ WhoAmI intent
    pub async fn get_user_name(&self, user_id: &str) -> Option<String> {
        self.memory.get_user_name(user_id).await
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
    pub async fn process_message(
        &self,
        user_id: &str,
        message: &str,
    ) -> Result<String> {
        // üí¨ –ü–†–û–í–ï–†–ö–ê: –°–≤–µ—Ç—Å–∫–∞—è –±–µ—Å–µ–¥–∞ (smalltalk) ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏
        if let Some(smalltalk_reply) = rules::smalltalk::respond(message) {
            self.memory.add_message(user_id, message.to_string()).await;
            return Ok(smalltalk_reply);
        }
        
        // üß† –ö–û–ì–ù–ò–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —ç–º–æ—Ü–∏–∏
        let mood = Thinker::detect_mood(message);
        let emotion = Thinker::extract_emotion(message);
        let conversation_type = Thinker::detect_conversation_type(message);
        let complexity = Thinker::analyze_complexity(message);  // üßÆ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        
        tracing::info!(
            "üß† Cognitive: mood={}, emotion={:?}, type={}, complexity={}", 
            mood, emotion, conversation_type, complexity
        );
        
        // ‚ù§Ô∏è –°–û–•–†–ê–ù–Ø–ï–ú –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –≤ –ø–∞–º—è—Ç—å
        self.memory.set_emotional_state(user_id, mood, emotion).await;
        
        // üìù –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        self.memory.extract_and_save_preferences(user_id, message).await;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.memory.add_message(user_id, message.to_string()).await;
        
        // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        let intent = IntentClassifier::classify(message);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        self.memory.set_last_intent(user_id, format!("{:?}", intent)).await;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        let context = match intent {
            Intent::OrderStatus => IntentClassifier::extract_order_id(message),
            Intent::CheckIngredients | Intent::ProductInfo => {
                IntentClassifier::extract_product_name(message)
            },
            Intent::Recommendation => {
                // üß† –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                let keywords = Thinker::extract_keywords(message);
                
                // üí° –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                let saved_context = self.memory.get_recommendation_context(user_id).await;
                
                // üîÄ –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ + –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                match (keywords.is_empty(), saved_context) {
                    (false, Some(prefs)) => {
                        Some(format!("{}, {}", keywords.join(", "), prefs))
                    },
                    (false, None) => Some(keywords.join(", ")),
                    (true, Some(prefs)) => Some(prefs),
                    (true, None) => None,
                }
            },
            Intent::ProductSearch => {
                // üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                Thinker::extract_ingredient(message)
            },
            Intent::WhoAmI => {
                // üë§ –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–º—è—Ç–∏
                self.memory.get_user_name(user_id).await
            },
            _ => None,
        };
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        let base_response = ResponseGenerator::generate(&intent, context.as_deref());
        
        // üé® –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–π
        let personalized = Thinker::personalize(&base_response, mood, emotion);
        
        // ‚ù§Ô∏è –ü–†–û–í–ï–†–Ø–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ù–ò–Ø
        let prev_mood = self.memory.get_last_mood(user_id).await;
        let mood_context = if let Some(prev) = prev_mood {
            if prev == "negative" && mood == "positive" {
                Some("\n\nüòä –†–∞–¥, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–ª—É—á—à–∏–ª–æ—Å—å! –≠—Ç–æ –∑–∞—Å–ª—É–≥–∞ —Ö–æ—Ä–æ—à–µ–π –µ–¥—ã?")
            } else if prev == "positive" && mood == "negative" {
                Some("\n\nüòî –í–∏–∂—É, —á—Ç–æ-—Ç–æ —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª–æ. –î–∞–≤–∞–π –∏—Å–ø—Ä–∞–≤–ª—é —ç—Ç–æ –≤–∫—É—Å–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º!")
            } else {
                None
            }
        } else {
            None
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º mood_context –∫ –æ—Ç–≤–µ—Ç—É
        let with_mood = if let Some(mood_msg) = mood_context {
            format!("{}{}", personalized, mood_msg)
        } else {
            personalized
        };
        
        // üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        let final_response = if self.memory.get_message_count(user_id).await == 1 {
            format!(
                "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FodiFood!\n\n{}\n\n\
                 üí° –Ø –∑–∞–ø–æ–º–Ω—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
                with_mood
            )
        } else {
            with_mood
        };
        
        Ok(final_response)
    }
}

impl Default for AIEngine {
    fn default() -> Self {
        Self::new()
    }
}

/// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–∏–º API
#[allow(dead_code)]  // –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
pub async fn generate_reply(_config: &Config, prompt: &str) -> Result<String> {
    let engine = AIEngine::new();
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π user_id –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    engine.process_message("default_user", prompt).await
}

/// –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)
#[allow(dead_code)]
pub async fn analyze_data(
    _config: &Config,
    data_description: &str,
    question: &str,
) -> Result<String> {
    let analysis = format!(
        "üìä **–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:**\n\n\
         üìã –î–∞–Ω–Ω—ã–µ: {}\n\
         ‚ùì –í–æ–ø—Ä–æ—Å: {}\n\n\
         üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n\
         ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–ø-5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n\
         ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n\
         ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∑–∞–∫–∞–∑–æ–≤ (–æ–±—ã—á–Ω–æ 12:00-14:00, 18:00-21:00)\n\
         ‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞–∫—É–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –¥–Ω–µ–π\n\
         ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞\n\n\
         üìà –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `get_stats`",
        data_description, question
    );
    
    Ok(analysis)
}

/// –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ)
#[allow(dead_code)]
pub async fn get_recommendation(_config: &Config, context: &str) -> Result<String> {
    let intent = Intent::Recommendation;
    let response = ResponseGenerator::generate(&intent, Some(context));
    Ok(response)
}

/// –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ Go backend
/// 
/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/// ```
/// create_order("ORD-12345", 2500.0).await?;
/// ```
#[allow(dead_code)]
pub async fn create_order(order_id: &str, total: f64) -> Result<String> {
    tracing::info!("ü§ñ AI: –°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑ {} –Ω–∞ —Å—É–º–º—É {:.2} —Ä—É–±.", order_id, total);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ Go backend
    match go_backend::send_order_to_backend(order_id, total).await {
        Ok(_) => {
            tracing::info!("‚úÖ –ó–∞–∫–∞–∑ {} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ backend", order_id);
            Ok(format!(
                "‚úÖ **–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!**\n\n\
                 üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: `{}`\n\
                 üí∞ –°—É–º–º–∞: {:.2} —Ä—É–±.\n\n\
                 –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞.",
                order_id, total
            ))
        }
        Err(e) => {
            tracing::error!("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ backend: {:?}", e);
            Ok(format!(
                "‚ö†Ô∏è –ó–∞–∫–∞–∑ {} —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.\n\
                 –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                order_id
            ))
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_ai_engine_greeting() {
        let engine = AIEngine::new();
        let response = engine.process_message("test_user", "–ü—Ä–∏–≤–µ—Ç!").await.unwrap();
        assert!(response.contains("–ü—Ä–∏–≤–µ—Ç") || response.contains("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"));
    }

    #[tokio::test]
    async fn test_ai_engine_menu() {
        let engine = AIEngine::new();
        let response = engine.process_message("test_user", "–ø–æ–∫–∞–∂–∏ –º–µ–Ω—é").await.unwrap();
        assert!(response.contains("–º–µ–Ω—é") || response.contains("–ú–µ–Ω—é"));
    }

    #[tokio::test]
    async fn test_intent_classification() {
        assert_eq!(IntentClassifier::classify("–ø—Ä–∏–≤–µ—Ç"), Intent::Greeting);
        assert_eq!(IntentClassifier::classify("–ø–æ–∫–∞–∂–∏ –º–µ–Ω—é"), Intent::ViewMenu);
        assert_eq!(IntentClassifier::classify("—Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"), Intent::OrderStatus);
    }
}

