pub mod admin_assistant; // üîß Admin AI assistant
pub mod analysis; // üí° AI-powered business analysis
pub mod intent_handler; // üéØ Intent handler system
mod intents;
mod memory;
pub mod modules;
pub mod persistent_memory; // üíæ Persistent memory service
mod rules;
mod thinker; // üß† –ù–æ–≤—ã–π –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å // üì¶ Modular intent handlers

use crate::api::go_backend::GoBackendClient;
use crate::config::Config;
use anyhow::Result;

pub use admin_assistant::AdminAssistant;
pub use intent_handler::{IntentHandler, IntentRegistry};
pub use intents::{Intent, IntentClassifier};
pub use memory::BotMemory;
pub use rules::ResponseGenerator;
pub use thinker::Thinker; // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

/// –ì–ª–∞–≤–Ω—ã–π AI –¥–≤–∏–∂–æ–∫ –±–æ—Ç–∞
pub struct AIEngine {
    memory: BotMemory,
    backend: GoBackendClient,
    #[allow(dead_code)] // Used by process_with_plugins and process_with_insights
    intent_registry: IntentRegistry, // üéØ Plugin system registry
}

impl AIEngine {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π AI –¥–≤–∏–∂–æ–∫
    pub fn new(config: &Config) -> Self {
        // üéØ Initialize plugin system registry
        let mut registry = IntentRegistry::new();
        modules::register_all_handlers(&mut registry);
        
        tracing::info!("üöÄ AIEngine initialized with {} intent handlers", registry.count());
        
        Self {
            memory: BotMemory::new(),
            backend: GoBackendClient::new(config),
            intent_registry: registry,
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–º—è—Ç–∏
    #[allow(dead_code)]
    pub fn memory(&self) -> &BotMemory {
        &self.memory
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ backend –∫–ª–∏–µ–Ω—Ç—É
    #[allow(dead_code)]
    pub fn backend(&self) -> &GoBackendClient {
        &self.backend
    }

    /// üë§ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    pub async fn set_user_name(&self, user_id: &str, name: String) {
        self.memory.set_user_name(user_id, name).await;
    }

    /// üë§ –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–º—è—Ç–∏
    #[allow(dead_code)] // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ WhoAmI intent
    pub async fn get_user_name(&self, user_id: &str) -> Option<String> {
        self.memory.get_user_name(user_id).await
    }

    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
    pub async fn process_message(&self, user_id: &str, message: &str) -> Result<String> {
        // üí¨ –ü–†–û–í–ï–†–ö–ê: –°–≤–µ—Ç—Å–∫–∞—è –±–µ—Å–µ–¥–∞ (smalltalk) ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏
        if let Some(smalltalk_reply) = rules::smalltalk::respond(message) {
            self.memory.add_message(user_id, message.to_string()).await;
            return Ok(smalltalk_reply);
        }

        // üß† –ö–û–ì–ù–ò–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —ç–º–æ—Ü–∏–∏
        let mood = Thinker::detect_mood(message);
        let emotion = Thinker::extract_emotion(message);
        let conversation_type = Thinker::detect_conversation_type(message);
        let complexity = Thinker::analyze_complexity(message); // üßÆ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

        tracing::info!(
            "üß† Cognitive: mood={}, emotion={:?}, type={}, complexity={}",
            mood,
            emotion,
            conversation_type,
            complexity
        );

        // ‚ù§Ô∏è –°–û–•–†–ê–ù–Ø–ï–ú –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –≤ –ø–∞–º—è—Ç—å
        self.memory
            .set_emotional_state(user_id, mood, emotion)
            .await;

        // üìù –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        self.memory
            .extract_and_save_preferences(user_id, message)
            .await;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.memory.add_message(user_id, message.to_string()).await;

        // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        let intent = IntentClassifier::classify(message);

        // üîç –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        tracing::info!("üß† Detected Intent: {:?} for message: {}", intent, message);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        self.memory
            .set_last_intent(user_id, format!("{:?}", intent))
            .await;

        // üî• –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GO BACKEND - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã
        match intent {
            // üçΩÔ∏è ViewMenu - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
            Intent::ViewMenu => {
                tracing::info!("üçΩÔ∏è AIEngine: ViewMenu detected - fetching real menu");
                match self.backend.get_products().await {
                    Ok(products) => {
                        let formatted = GoBackendClient::format_products_list(&products);
                        tracing::info!("‚úÖ AIEngine: Loaded {} products", products.len());
                        return Ok(formatted);
                    }
                    Err(e) => {
                        tracing::error!("‚ùå AIEngine: Failed to load menu: {}", e);
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback –æ—Ç–≤–µ—Ç–æ–º
                    }
                }
            }

            // üîç ProductSearch - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É
            Intent::ProductSearch => {
                if let Some(ingredient) = Thinker::extract_ingredient(message) {
                    tracing::info!("üîç AIEngine: ProductSearch for: {}", ingredient);
                    match self.backend.get_products().await {
                        Ok(products) => {
                            let filtered =
                                GoBackendClient::filter_by_ingredient(&products, &ingredient);
                            if !filtered.is_empty() {
                                use crate::api::go_backend::Product;
                                let filtered_products: Vec<Product> =
                                    filtered.iter().map(|&p| p.clone()).collect();
                                let response = format!(
                                    "üîç **–ù–∞—à—ë–ª {} –±–ª—é–¥ —Å \"{}\":**\n\n{}",
                                    filtered_products.len(),
                                    ingredient,
                                    GoBackendClient::format_products_list(&filtered_products)
                                );
                                tracing::info!(
                                    "‚úÖ AIEngine: Found {} products",
                                    filtered_products.len()
                                );
                                return Ok(response);
                            }
                        }
                        Err(e) => {
                            tracing::error!("‚ùå AIEngine: Failed to search products: {}", e);
                        }
                    }
                }
            }

            // ‚ÑπÔ∏è ProductInfo - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
            Intent::ProductInfo => {
                if let Some(product_name) = Thinker::extract_product(message) {
                    tracing::info!("‚ÑπÔ∏è AIEngine: ProductInfo for: {}", product_name);
                    match self.backend.get_products().await {
                        Ok(products) => {
                            if let Some(product) =
                                GoBackendClient::find_product_by_name(&products, &product_name)
                            {
                                let response = format!(
                                    "‚ÑπÔ∏è **{}**\n\n\
                                     üí∞ **–¶–µ–Ω–∞:** {}‚ÇΩ\n\
                                     üì¶ **–í–µ—Å/–û–±—ä—ë–º:** {}\n\
                                     üìã **–û–ø–∏—Å–∞–Ω–∏–µ:** {}\n\
                                     üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {}\n\n\
                                     üí° –•–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å? –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ \"–±–µ—Ä—É\" –∏–ª–∏ \"–∑–∞–∫–∞–∂—É {}\"!",
                                    product.name,
                                    product.price as i32,
                                    product.weight.as_deref().unwrap_or("‚Äî"),
                                    product
                                        .description
                                        .as_deref()
                                        .unwrap_or("–í–∫—É—Å–Ω–µ–π—à–µ–µ –±–ª—é–¥–æ –∏–∑ —Å–≤–µ–∂–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"),
                                    product.category.as_deref().unwrap_or("–î—Ä—É–≥–æ–µ"),
                                    product.name
                                );
                                tracing::info!("‚úÖ AIEngine: Found product: {}", product.name);
                                return Ok(response);
                            }
                        }
                        Err(e) => {
                            tracing::error!("‚ùå AIEngine: Failed to get product info: {}", e);
                        }
                    }
                }
            }

            // üí∞ PriceInquiry - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—ã
            Intent::PriceInquiry => {
                tracing::info!("üí∞ AIEngine: PriceInquiry detected");
                match self.backend.get_products().await {
                    Ok(products) => {
                        let response = format!(
                            "üí∞ **–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:**\n\n{}",
                            GoBackendClient::format_products_list(&products)
                        );
                        tracing::info!(
                            "‚úÖ AIEngine: Loaded prices for {} products",
                            products.len()
                        );
                        return Ok(response);
                    }
                    Err(e) => {
                        tracing::error!("‚ùå AIEngine: Failed to load prices: {}", e);
                    }
                }
            }

            // üêü SearchByIngredient - –ø–æ–∏—Å–∫ –±–ª—é–¥ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É
            Intent::SearchByIngredient => {
                tracing::info!("üêü AIEngine: SearchByIngredient detected");

                // üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º IntentClassifier –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
                let clean_ingredient = IntentClassifier::extract_ingredient(message);

                tracing::info!(
                    "üîç Searching for ingredient: \"{}\" (extracted from: \"{}\")",
                    clean_ingredient,
                    message
                );

                match self.backend.get_products().await {
                    Ok(products) => {
                        tracing::info!("‚úÖ Loaded {} products from backend", products.len());

                        let matched =
                            GoBackendClient::filter_by_ingredient(&products, &clean_ingredient);

                        if matched.is_empty() {
                            tracing::info!(
                                "üòï No products found with ingredient: {}",
                                clean_ingredient
                            );
                            return Ok(format!(
                                "üòï –ù–µ –Ω–∞—à—ë–ª –±–ª—é–¥ —Å \"{}\". –ú–æ–∂–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ—à—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ? \
                                 –ù–∞–ø–∏—à–∏ \"–º–µ–Ω—é\" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç!",
                                clean_ingredient
                            ));
                        }

                        tracing::info!(
                            "üéâ Found {} products with ingredient: {}",
                            matched.len(),
                            clean_ingredient
                        );

                        let mut response = format!("üêü **–ë–ª—é–¥–∞ —Å \"{}\":**\n\n", clean_ingredient);
                        for product in &matched {
                            response.push_str(&format!(
                                "‚Ä¢ **{}** ‚Äî {}‚ÇΩ\n",
                                product.name, product.price as i32
                            ));

                            if let Some(desc) = &product.description {
                                if !desc.is_empty() && desc.len() < 100 {
                                    response.push_str(&format!("  _{}_\n", desc));
                                }
                            }

                            if let Some(weight) = &product.weight {
                                if !weight.is_empty() {
                                    response.push_str(&format!("  üì¶ {}\n", weight));
                                }
                            }

                            response.push_str("\n");
                        }

                        response.push_str("üí° –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –≤ –∑–∞–∫–∞–∑?");

                        tracing::info!("‚úÖ Found {} matching products", matched.len());
                        return Ok(response);
                    }
                    Err(e) => {
                        tracing::error!("‚ùå AIEngine: Failed to search by ingredient: {}", e);
                        return Ok(format!(
                            "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª—é–¥. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ \"–º–µ–Ω—é\" \
                             —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç."
                        ));
                    }
                }
            }

            _ => {
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
            }
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        let context = match intent {
            Intent::OrderStatus => IntentClassifier::extract_order_id(message),
            Intent::CheckIngredients | Intent::ProductInfo => {
                IntentClassifier::extract_product_name(message)
            }
            Intent::Recommendation => {
                // üß† –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                let keywords = Thinker::extract_keywords(message);

                // üí° –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                let saved_context = self.memory.get_recommendation_context(user_id).await;

                // üîÄ –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ + –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                match (keywords.is_empty(), saved_context) {
                    (false, Some(prefs)) => Some(format!("{}, {}", keywords.join(", "), prefs)),
                    (false, None) => Some(keywords.join(", ")),
                    (true, Some(prefs)) => Some(prefs),
                    (true, None) => None,
                }
            }
            Intent::ProductSearch => {
                // üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                Thinker::extract_ingredient(message)
            }
            Intent::SearchByIngredient => {
                // üêü –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç)
                Some(message.trim().to_lowercase())
            }
            Intent::WhoAmI => {
                // üë§ –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–º—è—Ç–∏
                self.memory.get_user_name(user_id).await
            }
            _ => None,
        };

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        let base_response = ResponseGenerator::generate(&intent, context.as_deref());

        // üé® –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–π
        let personalized = Thinker::personalize(&base_response, mood, emotion);

        // ‚ù§Ô∏è –ü–†–û–í–ï–†–Ø–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ù–ò–Ø
        let prev_mood = self.memory.get_last_mood(user_id).await;
        let mood_context = if let Some(prev) = prev_mood {
            if prev == "negative" && mood == "positive" {
                Some("\n\nüòä –†–∞–¥, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–ª—É—á—à–∏–ª–æ—Å—å! –≠—Ç–æ –∑–∞—Å–ª—É–≥–∞ —Ö–æ—Ä–æ—à–µ–π –µ–¥—ã?")
            } else if prev == "positive" && mood == "negative" {
                Some("\n\nüòî –í–∏–∂—É, —á—Ç–æ-—Ç–æ —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª–æ. –î–∞–≤–∞–π –∏—Å–ø—Ä–∞–≤–ª—é —ç—Ç–æ –≤–∫—É—Å–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º!")
            } else {
                None
            }
        } else {
            None
        };

        // –î–æ–±–∞–≤–ª—è–µ–º mood_context –∫ –æ—Ç–≤–µ—Ç—É
        let with_mood = if let Some(mood_msg) = mood_context {
            format!("{}{}", personalized, mood_msg)
        } else {
            personalized
        };

        // üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        let final_response = if self.memory.get_message_count(user_id).await == 1 {
            format!(
                "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FodiFood!\n\n{}\n\n\
                 üí° –Ø –∑–∞–ø–æ–º–Ω—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
                with_mood
            )
        } else {
            with_mood
        };

        Ok(final_response)
    }

    /// üéØ Process message using new plugin system
    /// This is the new recommended way to process messages
    #[allow(dead_code)] // Will be used when we migrate webhook handler
    pub async fn process_with_plugins(
        &self,
        user_id: &str,
        message: &str,
        state: &crate::state::AppState,
    ) -> Result<String> {
        // üí¨ Smalltalk check first (highest priority)
        if let Some(smalltalk_reply) = rules::smalltalk::respond(message) {
            self.memory.add_message(user_id, message.to_string()).await;
            return Ok(smalltalk_reply);
        }

        // üß† Cognitive analysis
        let mood = Thinker::detect_mood(message);
        let emotion = Thinker::extract_emotion(message);
        
        tracing::info!(target: "ai", "üß† Cognitive: mood={}, emotion={:?}", mood, emotion);

        // ‚ù§Ô∏è Save emotional state
        self.memory.set_emotional_state(user_id, mood, emotion).await;

        // üìù Extract and save preferences
        self.memory.extract_and_save_preferences(user_id, message).await;

        // Save message to history
        self.memory.add_message(user_id, message.to_string()).await;

        // üéØ Classify intent
        let intent = IntentClassifier::classify(message);
        let intent_str = format!("{:?}", intent).to_lowercase();
        
        tracing::info!(target: "ai", "üéØ Classified intent: {} for message: {}", intent_str, message);

        // Save intent
        self.memory.set_last_intent(user_id, intent_str.clone()).await;

        // üöÄ Create context for plugin system
        let mut ctx = intent_handler::Context::new(
            user_id.to_string(),
            message.to_string(),
            intent_str,
        );

        // üì¶ Extract entities (simple for now)
        if let Some(ingredient) = Thinker::extract_ingredient(message) {
            ctx = ctx.with_entities(vec![ingredient]);
        } else if let Some(product) = Thinker::extract_product(message) {
            ctx = ctx.with_entities(vec![product]);
        }

        // üéØ Handle through plugin registry
        let response = self.intent_registry.handle(message, &mut ctx, state).await;

        Ok(response)
    }

    /// Get registry stats (for debugging/monitoring)
    #[allow(dead_code)] // Used for monitoring and debugging
    pub fn registry_stats(&self) -> (usize, Vec<String>) {
        (
            self.intent_registry.count(),
            self.intent_registry.registered_handlers(),
        )
    }

    /// Process message with plugin system AND broadcast insight events
    ///
    /// This is an enhanced version of process_with_plugins that also broadcasts
    /// real-time AI processing events via WebSocket for frontend visibility.
    ///
    /// # Arguments
    /// * `user_id` - User identifier
    /// * `message` - User message
    /// * `state` - Application state (includes insight broadcaster)
    ///
    /// # Returns
    /// * `Result<String>` - AI response
    #[allow(dead_code)] // Will be used when webhook handler is migrated to new system
    pub async fn process_with_insights(
        &self,
        user_id: &str,
        message: &str,
        state: &crate::state::AppState,
    ) -> Result<String> {
        use crate::handlers::{AIInsightEvent, ExtractedEntity};
        use std::collections::HashMap;

        let start_time = std::time::Instant::now();

        // üì° Event: Classification started
        state.insight_broadcaster.broadcast(
            AIInsightEvent::classification_started(user_id.to_string(), message.to_string())
        );

        // üéØ Classify intent
        let intent = IntentClassifier::classify(message);
        let intent_str = format!("{:?}", intent);

        // üì° Event: Intent classified
        state.insight_broadcaster.broadcast(
            AIInsightEvent::classified(
                user_id.to_string(),
                intent_str.clone(),
                0.85, // TODO: Add real confidence scoring
                start_time.elapsed().as_millis() as u64,
            )
        );

        // üß© Extract entities
        let entities = match intent {
            Intent::SearchByIngredient => {
                vec![ExtractedEntity {
                    entity_type: "ingredient".to_string(),
                    value: IntentClassifier::extract_ingredient(message),
                    confidence: 0.9,
                }]
            }
            Intent::OrderStatus => {
                if let Some(order_id) = IntentClassifier::extract_order_id(message) {
                    vec![ExtractedEntity {
                        entity_type: "order_id".to_string(),
                        value: order_id,
                        confidence: 0.95,
                    }]
                } else {
                    vec![]
                }
            }
            Intent::ProductInfo => {
                if let Some(product) = IntentClassifier::extract_product_name(message) {
                    vec![ExtractedEntity {
                        entity_type: "product_name".to_string(),
                        value: product,
                        confidence: 0.85,
                    }]
                } else {
                    vec![]
                }
            }
            _ => vec![],
        };

        // üì° Event: Entity extraction
        if !entities.is_empty() {
            state.insight_broadcaster.broadcast(
                AIInsightEvent::entity_extraction(user_id.to_string(), entities.clone())
            );
        }

        // Create context
        let entity_strings: Vec<String> = entities.iter().map(|e| e.value.clone()).collect();
        let mut ctx = intent_handler::Context::new(
            user_id.to_string(),
            message.to_string(),
            intent_str.clone(),
        ).with_entities(entity_strings);

        // üì° Event: Context updated
        let mut metadata = HashMap::new();
        metadata.insert("intent".to_string(), intent_str.clone());
        metadata.insert("entity_count".to_string(), entities.len().to_string());
        
        state.insight_broadcaster.broadcast(
            AIInsightEvent::context_updated(
                user_id.to_string(),
                ctx.metadata.len(),
                metadata,
            )
        );

        // üì° Event: Handler routing
        let handlers = self.intent_registry.registered_handlers();
        state.insight_broadcaster.broadcast(
            AIInsightEvent::handler_routing(
                user_id.to_string(),
                intent_str.clone(),
                handlers.clone(),
            )
        );

        // Route through registry
        let handler_start = std::time::Instant::now();
        
        // Find matching handler
        let handler_name = handlers.iter()
            .find(|h| h.to_lowercase().contains(&intent_str.to_lowercase()))
            .cloned()
            .unwrap_or_else(|| "unknown".to_string());

        // üì° Event: Handler execution started
        state.insight_broadcaster.broadcast(
            AIInsightEvent::handler_started(
                user_id.to_string(),
                handler_name.clone(),
                100, // TODO: Get real priority from handler
            )
        );

        let response = self.intent_registry.handle(message, &mut ctx, state).await;

        // üì° Event: Handler execution completed
        state.insight_broadcaster.broadcast(
            AIInsightEvent::handler_completed(
                user_id.to_string(),
                handler_name,
                !response.contains("ü§î"), // Success if not confused
                response.chars().count(),
                handler_start.elapsed().as_millis() as u64,
            )
        );

        // üìä Record metrics
        state.metrics.record_intent(&intent_str);
        state.metrics.record_response_time(&intent_str, start_time.elapsed());
        state.metrics.record_success(&intent_str);

        // üì° Event: Processing completed
        state.insight_broadcaster.broadcast(
            AIInsightEvent::processing_completed(
                user_id.to_string(),
                start_time.elapsed().as_millis() as u64,
                1, // handlers invoked
            )
        );

        Ok(response)
    }
}

impl Default for AIEngine {
    fn default() -> Self {
        // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Default
        let config = Config::default();
        Self::new(&config)
    }
}

/// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–∏–º API
#[allow(dead_code)] // –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
pub async fn generate_reply(config: &Config, prompt: &str) -> Result<String> {
    let engine = AIEngine::new(config);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π user_id –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    engine.process_message("default_user", prompt).await
}

/// –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)
#[allow(dead_code)]
pub async fn analyze_data(
    _config: &Config,
    data_description: &str,
    question: &str,
) -> Result<String> {
    let analysis = format!(
        "üìä **–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:**\n\n\
         üìã –î–∞–Ω–Ω—ã–µ: {}\n\
         ‚ùì –í–æ–ø—Ä–æ—Å: {}\n\n\
         üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n\
         ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–ø-5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n\
         ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n\
         ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∑–∞–∫–∞–∑–æ–≤ (–æ–±—ã—á–Ω–æ 12:00-14:00, 18:00-21:00)\n\
         ‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞–∫—É–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –¥–Ω–µ–π\n\
         ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞\n\n\
         üìà –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `get_stats`",
        data_description, question
    );

    Ok(analysis)
}

/// –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ)
#[allow(dead_code)]
pub async fn get_recommendation(_config: &Config, context: &str) -> Result<String> {
    let intent = Intent::Recommendation;
    let response = ResponseGenerator::generate(&intent, Some(context));
    Ok(response)
}

/// ü§ñ Standalone order creation function
/// 
/// –°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ Go backend
///
/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/// ```
/// create_order("ORD-12345", 2500.0).await?;
/// ```
#[allow(dead_code)]
pub async fn create_order(order_id: &str, total: f64) -> Result<String> {
    tracing::info!(
        "ü§ñ AI: –°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑ {} –Ω–∞ —Å—É–º–º—É {:.2} —Ä—É–±.",
        order_id,
        total
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ Go backend
    use crate::api::go_backend;
    match go_backend::send_order_to_backend(order_id, total).await {
        Ok(_) => {
            tracing::info!("‚úÖ –ó–∞–∫–∞–∑ {} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ backend", order_id);
            Ok(format!(
                "‚úÖ **–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!**\n\n\
                 üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: `{}`\n\
                 üí∞ –°—É–º–º–∞: {:.2} —Ä—É–±.\n\n\
                 –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞.",
                order_id, total
            ))
        }
        Err(e) => {
            tracing::error!("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ backend: {:?}", e);
            Ok(format!(
                "‚ö†Ô∏è –ó–∞–∫–∞–∑ {} —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.\n\
                 –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                order_id
            ))
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_ai_engine_greeting() {
        let config = Config::default();
        let engine = AIEngine::new(&config);
        let response = engine
            .process_message("test_user", "–ü—Ä–∏–≤–µ—Ç!")
            .await
            .unwrap();
        assert!(response.contains("–ü—Ä–∏–≤–µ—Ç") || response.contains("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"));
    }

    #[tokio::test]
    async fn test_ai_engine_menu() {
        let config = Config::default();
        let engine = AIEngine::new(&config);
        let response = engine
            .process_message("test_user", "–ø–æ–∫–∞–∂–∏ –º–µ–Ω—é")
            .await
            .unwrap();
        assert!(response.contains("–º–µ–Ω—é") || response.contains("–ú–µ–Ω—é"));
    }

    #[tokio::test]
    async fn test_intent_classification() {
        assert_eq!(IntentClassifier::classify("–ø—Ä–∏–≤–µ—Ç"), Intent::Greeting);
        assert_eq!(IntentClassifier::classify("–ø–æ–∫–∞–∂–∏ –º–µ–Ω—é"), Intent::ViewMenu);
        assert_eq!(
            IntentClassifier::classify("—Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"),
            Intent::OrderStatus
        );
    }
}
