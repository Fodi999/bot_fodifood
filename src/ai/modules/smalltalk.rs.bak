use async_trait::async_trait;
use anyhow::Result;

use crate::state::AppState;
use super::super::intent_handler::{IntentHandler, IntentContext};

/// ๐ฌ Smalltalk Handler - casual conversations
pub struct SmalltalkHandler;

#[async_trait]
impl IntentHandler for SmalltalkHandler {
    fn intent_name(&self) -> &str {
        "smalltalk"
    }

    fn priority(&self) -> u8 {
        50 // Low priority - catch-all
    }

    async fn handle(&self, ctx: &IntentContext, _state: &AppState) -> Result<String> {
        tracing::info!("๐ฌ Handling smalltalk request");

        let msg = ctx.message.to_lowercase();

        let response = if msg.contains("ะฟัะธะฒะตั") || msg.contains("ะทะดัะฐะฒััะฒัะน") {
            "๐ ะัะธะฒะตั! ะฏ ะฑะพั FodiFood. ะะพะณั ะฟะพะบะฐะทะฐัั ะผะตะฝั, ะฟะพะผะพัั ั ะทะฐะบะฐะทะพะผ ะธะปะธ ะพัะฒะตัะธัั ะฝะฐ ะฒะพะฟัะพัั!"
        } else if msg.contains("ะบะฐะบ ะดะตะปะฐ") || msg.contains("ะบะฐะบ ัั") {
            "๐ ะฃ ะผะตะฝั ะฒัั ะพัะปะธัะฝะพ! ะะพัะพะฒ ะฟะพะผะพัั ั ะทะฐะบะฐะทะพะผ ัััะธ. ะงัะพ ะฒะฐั ะธะฝัะตัะตััะตั?"
        } else if msg.contains("ัะฟะฐัะธะฑะพ") || msg.contains("ะฑะปะฐะณะพะดะฐัั") {
            "๐ ะะพะถะฐะปัะนััะฐ! ะัะตะณะดะฐ ัะฐะด ะฟะพะผะพัั! ะัะปะธ ะฝัะถะฝะพ ััะพ-ัะพ ะตัะต โ ะพะฑัะฐัะฐะนัะตัั."
        } else if msg.contains("ะฟะพะบะฐ") || msg.contains("ะดะพ ัะฒะธะดะฐะฝะธั") {
            "๐ ะะพ ะฒัััะตัะธ! ะัะธัะพะดะธัะต ะตัะต, ะฑัะดะตะผ ัะฐะดั!"
        } else {
            "๐ ะงะตะผ ะผะพะณั ะฟะพะผะพัั? ะะพะณั ะฟะพะบะฐะทะฐัั ะผะตะฝั, ะฟะพะผะพัั ั ะทะฐะบะฐะทะพะผ ะธะปะธ ะพัะฒะตัะธัั ะฝะฐ ะฒะพะฟัะพัั ะพ ะฑะปัะดะฐั."
        };

        Ok(response.to_string())
    }
}

/// โ Help Handler
pub struct HelpHandler;

#[async_trait]
impl IntentHandler for HelpHandler {
    fn intent_name(&self) -> &str {
        "help"
    }

    fn priority(&self) -> u8 {
        80
    }

    async fn handle(&self, _ctx: &IntentContext, _state: &AppState) -> Result<String> {
        tracing::info!("โ Handling help request");

        Ok(
            "๐ค **ะงัะพ ั ัะผะตั:**\n\n\
            ๐ ะะพะบะฐะทะฐัั ะผะตะฝั โ ะฝะฐะฟะธัะธัะต 'ะผะตะฝั' ะธะปะธ 'ััะพ ะตััั'\n\
            ๐ ะะฐะนัะธ ะฑะปัะดะพ โ ะฝะฐะฟะธัะธัะต ะฝะฐะทะฒะฐะฝะธะต ะฑะปัะดะฐ\n\
            ๐ ะคะธะปััั ะฟะพ ะธะฝะณัะตะดะธะตะฝัั โ ะฝะฐะฟัะธะผะตั 'ะฑะปัะดะฐ ั ะปะพัะพัะตะผ'\n\
            ๐ฆ ะกะดะตะปะฐัั ะทะฐะบะฐะท โ ะฝะฐะฟะธัะธัะต 'ัะพัั ะทะฐะบะฐะทะฐัั'\n\
            ๐ฐ ะฃะทะฝะฐัั ัะตะฝั โ ัะฟัะพัะธัะต ะพ ะบะพะฝะบัะตัะฝะพะผ ะฑะปัะดะต\n\
            โน๏ธ ะะฝัะพัะผะฐัะธั ะพ ะดะพััะฐะฒะบะต โ ะฝะฐะฟะธัะธัะต 'ะดะพััะฐะฒะบะฐ'\n\n\
            ะัะพััะพ ะฝะฐะฟะธัะธัะต ััะพ ะฒะฐั ะธะฝัะตัะตััะตั, ะธ ั ะฟะพะผะพะณั! ๐"
                .to_string()
        )
    }
}

/// ๐ Delivery Info Handler
pub struct DeliveryHandler;

#[async_trait]
impl IntentHandler for DeliveryHandler {
    fn intent_name(&self) -> &str {
        "delivery_info"
    }

    fn priority(&self) -> u8 {
        75
    }

    async fn handle(&self, _ctx: &IntentContext, _state: &AppState) -> Result<String> {
        tracing::info!("๐ Handling delivery info request");

        Ok(
            "๐ **ะะฝัะพัะผะฐัะธั ะพ ะดะพััะฐะฒะบะต:**\n\n\
            ๐ฐ ะะธะฝะธะผะฐะปัะฝัะน ะทะฐะบะฐะท: 1500โฝ\n\
            ๐ ะัะธ ะทะฐะบะฐะทะต ะพั 1500โฝ โ ะดะพััะฐะฒะบะฐ **ะฑะตัะฟะปะฐัะฝะพ**!\n\
            โฑ๏ธ ะัะตะผั ะดะพััะฐะฒะบะธ: 40-60 ะผะธะฝัั\n\
            ๐ ะะพะฝะฐ ะดะพััะฐะฒะบะธ: ะฟะพ ะฒัะตะผั ะณะพัะพะดั\n\
            ๐ณ ะะฟะปะฐัะฐ: ะฝะฐะปะธัะฝัะผะธ ะธะปะธ ะบะฐััะพะน\n\n\
            ะะพัะพะฒั ัะดะตะปะฐัั ะทะฐะบะฐะท? ะะฐะฟะธัะธัะต ััะพ ัะพัะธัะต ะทะฐะบะฐะทะฐัั! ๐"
                .to_string()
        )
    }
}
