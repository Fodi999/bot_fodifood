use async_trait::async_trait;

use super::super::intent_handler::{Context, IntentHandler};
use crate::state::AppState;

/// üõí Create Order Intent Handler
pub struct CreateOrderHandler;

impl CreateOrderHandler {
    pub fn new() -> Self {
        Self
    }
}

#[async_trait]
impl IntentHandler for CreateOrderHandler {
    fn name(&self) -> &'static str {
        "create_order"
    }

    fn priority(&self) -> u8 {
        100
    }

    async fn handle(&self, input: &str, ctx: &mut Context, _state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "üõí Handling create order request for user: {}", ctx.user_id);

        let items_text = if !ctx.entities.is_empty() {
            ctx.entities.join(", ")
        } else {
            input.to_string()
        };

        if items_text.is_empty() || items_text.len() < 3 {
            return Some(
                "üì¶ –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å.\n\
                –ù–∞–ø—Ä–∏–º–µ—Ä: '–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—é –∏ –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—é'"
                    .to_string(),
            );
        }

        Some(format!(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.\n\n\
            üìù –í—ã —Ö–æ—Ç–∏—Ç–µ: {}\n\n\
            –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ:\n\
            üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\
            üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\
            üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é)",
            items_text
        ))
    }
}

/// üì¶ Order Status Intent Handler
pub struct OrderStatusHandler;

impl OrderStatusHandler {
    pub fn new() -> Self {
        Self
    }
}

#[async_trait]
impl IntentHandler for OrderStatusHandler {
    fn name(&self) -> &'static str {
        "order_status"
    }

    fn priority(&self) -> u8 {
        95
    }

    async fn handle(&self, _input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "üì¶ Handling order status request for user: {}", ctx.user_id);

        // TODO: Need token, for now use user_id as token
        match state.backend.orders.get_recent_orders(&ctx.user_id).await {
            Ok(orders) => {
                if orders.is_empty() {
                    Some("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üì≠".to_string())
                } else {
                    let order = &orders[0];

                    Some(format!(
                        "üì¶ –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑:\n\
                        üÜî –ù–æ–º–µ—Ä: {}\n\
                        üìä –°—Ç–∞—Ç—É—Å: {}\n\
                        üí∞ –°—É–º–º–∞: {}‚ÇΩ\n\n\
                        –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!",
                        order.id, order.status, order.total as i32
                    ))
                }
            }
            Err(e) => {
                tracing::error!(target: "ai", "‚ùå Failed to get order status: {}", e);
                Some("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòû".to_string())
            }
        }
    }
}

/// ‚ùå Cancel Order Intent Handler
pub struct CancelOrderHandler;

impl CancelOrderHandler {
    pub fn new() -> Self {
        Self
    }
}

#[async_trait]
impl IntentHandler for CancelOrderHandler {
    fn name(&self) -> &'static str {
        "cancel_order"
    }

    fn priority(&self) -> u8 {
        90
    }

    async fn handle(&self, _input: &str, ctx: &mut Context, _state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "‚ùå Handling cancel order request for user: {}", ctx.user_id);

        Some(format!(
            "üòî –•–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?\n\n\
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ —á–µ—Ä–µ–∑ —á–∞—Ç.\n\
            –ú—ã –ø–æ–º–æ–∂–µ–º!"
        ))
    }
}
