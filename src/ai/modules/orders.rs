use async_trait::async_trait;
use serde_json::json;

use super::super::intent_handler::{Context, IntentHandler};
use super::super::intents::IntentClassifier;
use crate::state::AppState;

/// üõí Create Order Intent Handler
pub struct CreateOrderHandler;

impl CreateOrderHandler {
    pub fn new() -> Self {
        Self
    }

    /// Parse items from user message
    fn parse_items(message: &str) -> Vec<String> {
        // Try to extract product name using IntentClassifier
        if let Some(product) = IntentClassifier::extract_product_name(message) {
            return vec![product];
        }

        // Fallback: split by common separators
        let items: Vec<String> = message
            .split(&[',', '–∏', '\n'][..])
            .map(|s| s.trim())
            .filter(|s| !s.is_empty() && s.len() > 2)
            .map(|s| s.to_string())
            .collect();

        items
    }
}

#[async_trait]
impl IntentHandler for CreateOrderHandler {
    fn name(&self) -> &'static str {
        "createorder"  // Match lowercase intent from classifier
    }

    fn priority(&self) -> u8 {
        100
    }

    async fn handle(&self, input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "üõí Handling create order request for user: {}", ctx.user_id);

        // Parse items from message or entities
        let items = if !ctx.entities.is_empty() {
            ctx.entities.clone()
        } else {
            Self::parse_items(input)
        };

        if items.is_empty() {
            return Some(
                "üì¶ –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å.\n\
                –ù–∞–ø—Ä–∏–º–µ—Ä: '–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—é –∏ –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—é'"
                    .to_string(),
            );
        }

        // Get all products from backend
        let products = match state.backend.products.get_products().await {
            Ok(prods) => prods,
            Err(e) => {
                tracing::error!(target: "ai", "‚ùå Failed to fetch products: {}", e);
                return Some(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é.\n\
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.".to_string()
                );
            }
        };

        // Find matching products and build order items
        let mut order_items = Vec::new();
        let mut found_items = Vec::new();
        let mut not_found_items = Vec::new();

        for item_name in items {
            // Search for product by name (case-insensitive partial match)
            if let Some(product) = products.iter().find(|p| {
                p.name.to_lowercase().contains(&item_name.to_lowercase())
            }) {
                order_items.push(json!({
                    "product_id": product.id,
                    "name": product.name,
                    "quantity": 1,
                    "price": product.price
                }));
                found_items.push(product.name.clone());
            } else {
                not_found_items.push(item_name);
            }
        }

        // If no products found
        if order_items.is_empty() {
            return Some(format!(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–µ–ª –≤ –º–µ–Ω—é: {}\n\n\
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n\
                ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞\n\
                ‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é: '–ø–æ–∫–∞–∂–∏ –º–µ–Ω—é'\n\
                ‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É: '–±–ª—é–¥–∞ —Å –ª–æ—Å–æ—Å–µ–º'",
                not_found_items.join(", ")
            ));
        }

        // Show warning if some items not found
        let warning = if !not_found_items.is_empty() {
            format!("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–µ–Ω—é: {}\n\n", not_found_items.join(", "))
        } else {
            String::new()
        };

        let order_request = json!({
            "user_id": ctx.user_id,
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç",
            "phone": "+7 900 000-00-00",
            "address": "–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥.1",
            "items": order_items
        });

        // Create order via Go backend
        match state.backend.orders.create_order(order_request).await {
            Ok(order) => {
                tracing::info!(target: "ai", "‚úÖ Order created successfully: ID={}", order.id);
                
                Some(format!(
                    "{}‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üéâ\n\n\
                    üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {}\n\
                    üìù –ü–æ–∑–∏—Ü–∏–∏: {}\n\
                    üí∞ –°—É–º–º–∞: {}‚ÇΩ\n\n\
                    üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏ –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n\
                    –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! üöö",
                    warning, order.id, found_items.join(", "), order.total as i32
                ))
            }
            Err(e) => {
                tracing::error!(target: "ai", "‚ùå Failed to create order: {}", e);
                
                Some(format!(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n\
                    üìù –í—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å: {}\n\n\
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é:\n\
                    üì± +7 (XXX) XXX-XX-XX\n\n\
                    –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üòû",
                    found_items.join(", ")
                ))
            }
        }
    }
}

/// üì¶ Order Status Intent Handler
pub struct OrderStatusHandler;

impl OrderStatusHandler {
    pub fn new() -> Self {
        Self
    }
}

#[async_trait]
impl IntentHandler for OrderStatusHandler {
    fn name(&self) -> &'static str {
        "orderstatus"  // Match lowercase intent from classifier
    }

    fn priority(&self) -> u8 {
        95
    }

    async fn handle(&self, _input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "üì¶ Handling order status request for user: {}", ctx.user_id);

        // TODO: Need token, for now use user_id as token
        match state.backend.orders.get_recent_orders(&ctx.user_id).await {
            Ok(orders) => {
                if orders.is_empty() {
                    Some("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üì≠".to_string())
                } else {
                    let order = &orders[0];

                    Some(format!(
                        "üì¶ –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑:\n\
                        üÜî –ù–æ–º–µ—Ä: {}\n\
                        üìä –°—Ç–∞—Ç—É—Å: {}\n\
                        üí∞ –°—É–º–º–∞: {}‚ÇΩ\n\n\
                        –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!",
                        order.id, order.status, order.total as i32
                    ))
                }
            }
            Err(e) => {
                tracing::error!(target: "ai", "‚ùå Failed to get order status: {}", e);
                Some("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòû".to_string())
            }
        }
    }
}

/// ‚ùå Cancel Order Intent Handler
pub struct CancelOrderHandler;

impl CancelOrderHandler {
    pub fn new() -> Self {
        Self
    }
}

#[async_trait]
impl IntentHandler for CancelOrderHandler {
    fn name(&self) -> &'static str {
        "cancelorder"  // Match lowercase intent
    }

    fn priority(&self) -> u8 {
        90
    }

    async fn handle(&self, _input: &str, ctx: &mut Context, _state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "‚ùå Handling cancel order request for user: {}", ctx.user_id);

        Some(
            "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\
            üì± +7 (XXX) XXX-XX-XX\n\
            ‚úâÔ∏è support@fodifood.ru\n\n\
            –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.".to_string()
        )
    }
}
