use async_trait::async_trait;

use super::super::intent_handler::{Context, IntentHandler};
use crate::state::AppState;

/// üìã Menu Intent Handler
pub struct MenuHandler;

impl MenuHandler {
    pub fn new() -> Self {
        Self
    }
}

#[async_trait]
impl IntentHandler for MenuHandler {
    fn name(&self) -> &'static str {
        "showmenu"  // Match lowercase intent
    }

    fn priority(&self) -> u8 {
        90
    }

    async fn handle(&self, _input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "üìã Handling menu request for user: {}", ctx.user_id);

        match state.backend.products.get_products().await {
            Ok(products) => {
                if products.is_empty() {
                    Some("ü§î –ú–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–æ. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –±–ª—é–¥–∞!".to_string())
                } else {
                    let formatted =
                        crate::api::go_backend::ProductsClient::format_products_list(&products);
                    Some(formatted)
                }
            }
            Err(e) => {
                tracing::error!(target: "ai", "‚ùå Failed to fetch menu: {}", e);
                Some("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòû".to_string())
            }
        }
    }
}

/// üîç Search Menu Intent Handler
pub struct SearchMenuHandler;

impl SearchMenuHandler {
    pub fn new() -> Self {
        Self
    }
}

#[async_trait]
impl IntentHandler for SearchMenuHandler {
    fn name(&self) -> &'static str {
        "searchmenu"  // Match lowercase intent
    }

    fn priority(&self) -> u8 {
        95
    }

    async fn handle(&self, input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "üîç Handling search menu request for user: {}", ctx.user_id);

        let query = ctx.entities.first().unwrap_or(&input.to_string()).clone();

        match state.backend.products.get_products().await {
            Ok(products) => {
                if let Some(product) =
                    crate::api::go_backend::ProductsClient::find_product_by_name(&products, &query)
                {
                    Some(format!(
                        "üçΩÔ∏è **{}**\nüí∞ –¶–µ–Ω–∞: {}‚ÇΩ\nüìè –í–µ—Å: {}\n\n_{}_",
                        product.name,
                        product.price as i32,
                        product.weight.as_deref().unwrap_or("–Ω–µ —É–∫–∞–∑–∞–Ω"),
                        product
                            .description
                            .as_deref()
                            .unwrap_or("–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    ))
                } else {
                    Some(format!(
                        "üòî –ù–µ –Ω–∞—à–µ–ª –±–ª—é–¥–æ '{}' –≤ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                        query
                    ))
                }
            }
            Err(e) => {
                tracing::error!(target: "ai", "‚ùå Failed to search menu: {}", e);
                Some("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòû".to_string())
            }
        }
    }
}

/// üêü Filter by Ingredient Handler
pub struct FilterByIngredientHandler;

impl FilterByIngredientHandler {
    pub fn new() -> Self {
        Self
    }
}

#[async_trait]
impl IntentHandler for FilterByIngredientHandler {
    fn name(&self) -> &'static str {
        "searchbyingredient"  // Match lowercase intent (—ç—Ç–æ SearchByIngredient –≤ enum)
    }

    fn priority(&self) -> u8 {
        85
    }

    async fn handle(&self, input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "üêü Handling filter by ingredient request for user: {}", ctx.user_id);

        let ingredient = ctx.entities.first().unwrap_or(&input.to_string()).clone();

        match state.backend.products.get_products().await {
            Ok(products) => {
                let filtered = crate::api::go_backend::ProductsClient::filter_by_ingredient(
                    &products,
                    &ingredient,
                );

                if filtered.is_empty() {
                    Some(format!(
                        "üòî –ù–µ –Ω–∞—à–µ–ª –±–ª—é–¥–∞ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º '{}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.",
                        ingredient
                    ))
                } else {
                    let mut result = format!("üêü –ë–ª—é–¥–∞ —Å **{}**:\n\n", ingredient);
                    for product in filtered {
                        result.push_str(&format!(
                            "‚Ä¢ **{}** ‚Äî {}‚ÇΩ\n",
                            product.name, product.price as i32
                        ));
                    }
                    Some(result)
                }
            }
            Err(e) => {
                tracing::error!(target: "ai", "‚ùå Failed to filter by ingredient: {}", e);
                Some("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòû".to_string())
            }
        }
    }
}
