use crate::ai::analysis::{analyze_metrics, investment_recommendation, quick_summary};
use crate::ai::intent_handler::{Context, IntentHandler};
use crate::services::{fetch_business_metrics, fetch_businesses};
use crate::state::AppState;
use async_trait::async_trait;

/// üìä –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –±–∏–∑–Ω–µ—Å–∞
pub struct AnalyzeBusinessHandler;

#[async_trait]
impl IntentHandler for AnalyzeBusinessHandler {
    fn name(&self) -> &'static str {
        "analyzebusiness"
    }

    fn priority(&self) -> u8 {
        80 // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    }

    async fn handle(&self, input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!("üìä Handling business analysis request for user: {}", ctx.user_id);

        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID –±–∏–∑–Ω–µ—Å–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        let business_query = extract_business_name(input);

        // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        if business_query.is_empty() {
            return handle_list_businesses(state).await;
        }

        // –ò—â–µ–º –±–∏–∑–Ω–µ—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ ID
        match find_business(&business_query, state).await {
            Ok(Some((business_id, business_name))) => {
                tracing::info!("üîç Found business: {} ({})", business_name, business_id);

                // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                match fetch_business_metrics(&business_id).await {
                    Ok(metrics) => {
                        tracing::info!("‚úÖ Metrics fetched for: {}", business_name);

                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                        let analysis = format!(
                            "üè¢ **{}**\n\n{}\n\n{}{}",
                            business_name,
                            quick_summary(&metrics),
                            analyze_metrics(&metrics),
                            investment_recommendation(&metrics)
                        );

                        Some(analysis)
                    }
                    Err(e) => {
                        tracing::error!("‚ùå Failed to fetch metrics: {}", e);
                        Some(format!(
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ '{}'.\n\
                             –û—à–∏–±–∫–∞: {}",
                            business_name, e
                        ))
                    }
                }
            }
            Ok(None) => {
                tracing::warn!("‚ùå Business not found: {}", business_query);
                Some(format!(
                    "‚ùå –ë–∏–∑–Ω–µ—Å '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n\
                     üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n\
                     ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n\
                     ‚Ä¢ –°–ø—Ä–æ—Å–∏—Ç—å '–ø–æ–∫–∞–∂–∏ –≤—Å–µ –±–∏–∑–Ω–µ—Å—ã'\n\
                     ‚Ä¢ –£–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞",
                    business_query
                ))
            }
            Err(e) => {
                tracing::error!("‚ùå Error searching businesses: {}", e);
                Some(format!(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–∏–∑–Ω–µ—Å–∞: {}\n\n\
                     –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    e
                ))
            }
        }
    }
}

/// –ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
fn extract_business_name(input: &str) -> String {
    let input_lower = input.to_lowercase();

    // –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    let stop_words = [
        "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π",
        "–∞–Ω–∞–ª–∏–∑",
        "–±–∏–∑–Ω–µ—Å",
        "–±–∏–∑–Ω–µ—Å–∞",
        "–ø–æ–∫–∞–∂–∏",
        "–º–µ—Ç—Ä–∏–∫–∏",
        "–¥–ª—è",
        "–ø–æ",
        "analyze",
        "business",
        "show",
        "metrics",
        "for",
        // –î–ª—è BusinessInsights
        "—Å–æ–≤–µ—Ç—ã",
        "–∫–∞–∫",
        "—É–ª—É—á—à–∏—Ç—å",
        "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        "—á—Ç–æ",
        "–¥–µ–ª–∞—Ç—å",
        "insights",
        "advice",
        "recommendations",
        "improve",
    ];

    let words: Vec<&str> = input_lower
        .split_whitespace()
        .filter(|w| !stop_words.contains(w))
        .collect();

    words.join(" ").trim().to_string()
}

/// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å–æ–≤
async fn handle_list_businesses(_state: &AppState) -> Option<String> {
    match fetch_businesses().await {
        Ok(businesses) if !businesses.is_empty() => {
            let mut result = String::from(
                "üè¢ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**\n\n\
                 –í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:\n\n",
            );

            for (i, business) in businesses.iter().enumerate().take(10) {
                result.push_str(&format!(
                    "{}. **{}**\n   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {}\n   ‚Ä¢ –ì–æ—Ä–æ–¥: {}\n   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {}\n\n",
                    i + 1,
                    business.name,
                    business.category.as_deref().unwrap_or("–Ω–µ —É–∫–∞–∑–∞–Ω–∞"),
                    business.city.as_deref().unwrap_or("–Ω–µ —É–∫–∞–∑–∞–Ω"),
                    if business.is_active { "–∞–∫—Ç–∏–≤–µ–Ω" } else { "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω" }
                ));
            }

            result.push_str(
                "üí° –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∫–∞–∂–∏—Ç–µ: '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–∏–∑–Ω–µ—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ]'\n\
                 –ù–∞–ø—Ä–∏–º–µ—Ä: '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–∏–∑–Ω–µ—Å Tech Startup'",
            );

            Some(result)
        }
        Ok(_) => Some(
            "‚ùå –°–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤ –ø—É—Å—Ç.\n\n\
             –°–æ–∑–¥–∞–π—Ç–µ –±–∏–∑–Ω–µ—Å—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."
                .to_string(),
        ),
        Err(e) => {
            tracing::error!("‚ùå Failed to fetch businesses: {}", e);
            Some(format!(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤: {}\n\n\
                 üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Go backend –∑–∞–ø—É—â–µ–Ω.",
                e
            ))
        }
    }
}

/// –ù–∞–π—Ç–∏ –±–∏–∑–Ω–µ—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ ID
async fn find_business(
    query: &str,
    _state: &AppState,
) -> anyhow::Result<Option<(String, String)>> {
    let businesses = fetch_businesses().await?;

    // –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    if let Some(business) = businesses
        .iter()
        .find(|b| b.name.to_lowercase() == query.to_lowercase())
    {
        return Ok(Some((business.id.clone(), business.name.clone())));
    }

    // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    if let Some(business) = businesses
        .iter()
        .find(|b| b.name.to_lowercase().contains(query))
    {
        return Ok(Some((business.id.clone(), business.name.clone())));
    }

    // –ü–æ–∏—Å–∫ –ø–æ ID
    if let Some(business) = businesses.iter().find(|b| b.id == query) {
        return Ok(Some((business.id.clone(), business.name.clone())));
    }

    Ok(None)
}

/// üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–≤
pub struct CompareBusinessesHandler;

#[async_trait]
impl IntentHandler for CompareBusinessesHandler {
    fn name(&self) -> &'static str {
        "comparebusinesses"
    }

    fn priority(&self) -> u8 {
        85 // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    }

    async fn handle(&self, input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!("üîÑ Handling business comparison request for user: {}", ctx.user_id);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        let business_names = extract_business_names_for_comparison(input);

        if business_names.len() < 2 {
            return Some(
                "‚ùå –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –±–∏–∑–Ω–µ—Å–∞.\n\n\
                 üí° –ü—Ä–∏–º–µ—Ä: '—Å—Ä–∞–≤–Ω–∏ Tech Startup –∏ Fodi Sushi'\n\
                 –∏–ª–∏: '—Å—Ä–∞–≤–Ω–∏ Tech Startup vs Fodi Sushi'".to_string()
            );
        }

        // –ü–æ–ª—É—á–∞–µ–º –±–∏–∑–Ω–µ—Å—ã –∏ –∏—Ö –º–µ—Ç—Ä–∏–∫–∏
        let mut business_metrics = Vec::new();
        let mut not_found = Vec::new();

        for name in &business_names {
            match find_business(name, state).await {
                Ok(Some((business_id, business_name))) => {
                    match fetch_business_metrics(&business_id).await {
                        Ok(metrics) => {
                            business_metrics.push((business_name, metrics));
                        }
                        Err(e) => {
                            tracing::error!("‚ùå Failed to fetch metrics for {}: {}", business_name, e);
                            not_found.push(format!("{} (–Ω–µ—Ç –º–µ—Ç—Ä–∏–∫)", business_name));
                        }
                    }
                }
                Ok(None) => {
                    not_found.push(name.clone());
                }
                Err(e) => {
                    tracing::error!("‚ùå Error searching business {}: {}", name, e);
                    not_found.push(name.clone());
                }
            }
        }

        if business_metrics.is_empty() {
            return Some(format!(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–∏–∑–Ω–µ—Å—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.\n\n\
                 –ù–µ –Ω–∞–π–¥–µ–Ω—ã: {}\n\n\
                 üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–ø–æ–∫–∞–∂–∏ –≤—Å–µ –±–∏–∑–Ω–µ—Å—ã'",
                not_found.join(", ")
            ));
        }

        if business_metrics.len() == 1 {
            return Some(format!(
                "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –±–∏–∑–Ω–µ—Å: {}\n\n\
                 –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –±–∏–∑–Ω–µ—Å–∞.\n\
                 –ù–µ –Ω–∞–π–¥–µ–Ω—ã: {}",
                business_metrics[0].0,
                not_found.join(", ")
            ));
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é compare_businesses –∏–∑ analysis.rs
        use crate::ai::analysis::compare_businesses;
        
        let comparison_refs: Vec<(&str, &_)> = business_metrics
            .iter()
            .map(|(name, metrics)| (name.as_str(), metrics))
            .collect();

        let comparison = compare_businesses(comparison_refs);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –≤—Å–µ –±–∏–∑–Ω–µ—Å—ã –Ω–∞–π–¥–µ–Ω—ã
        let result = if !not_found.is_empty() {
            format!(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∏–∑–Ω–µ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {}\n\n{}", 
                not_found.join(", "),
                comparison
            )
        } else {
            comparison
        };

        Some(result)
    }
}

/// –ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
fn extract_business_names_for_comparison(input: &str) -> Vec<String> {
    let input_lower = input.to_lowercase();

    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –±–∏–∑–Ω–µ—Å–æ–≤
    let delimiters = [" –∏ ", " or ", " vs ", " versus ", ", "];

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    let mut parts: Vec<String> = Vec::new();
    
    for delimiter in &delimiters {
        if input_lower.contains(delimiter) {
            parts = input_lower
                .split(delimiter)
                .map(|s| s.to_string())
                .collect();
            break;
        }
    }

    // –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç –∫–æ–º–∞–Ω–¥ –∏ —Å—Ç–æ–ø-—Å–ª–æ–≤
    let command_words = ["—Å—Ä–∞–≤–Ω–∏", "—Å—Ä–∞–≤–Ω–∏—Ç—å", "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ", "compare", "comparison"];
    let stop_words = ["–±–∏–∑–Ω–µ—Å", "–±–∏–∑–Ω–µ—Å—ã", "–±–∏–∑–Ω–µ—Å–∞", "–±–∏–∑–Ω–µ—Å–æ–≤", "business", "businesses"];
    
    parts.into_iter()
        .map(|part| {
            let mut cleaned = part;
            // –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            for word in &command_words {
                cleaned = cleaned.replace(word, " ");
            }
            // –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
            for word in &stop_words {
                cleaned = cleaned.replace(word, " ");
            }
            // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            cleaned.split_whitespace().collect::<Vec<_>>().join(" ")
        })
        .filter(|s| !s.is_empty() && s.len() > 2)
        .collect()
}

/// üí° –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –±–∏–∑–Ω–µ—Å—É
pub struct BusinessInsightsHandler;

#[async_trait]
impl IntentHandler for BusinessInsightsHandler {
    fn name(&self) -> &'static str {
        "businessinsights"
    }

    fn priority(&self) -> u8 {
        82 // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤
    }

    async fn handle(&self, input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!("üí° Handling business insights request for user: {}", ctx.user_id);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
        let business_query = extract_business_name(input);

        if business_query.is_empty() {
            return Some(
                "üí° **–°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–∏–∑–Ω–µ—Å–∞**\n\n\
                 –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n\n\
                 üìå –ü—Ä–∏–º–µ—Ä: '—Å–æ–≤–µ—Ç—ã –¥–ª—è Tech Startup' –∏–ª–∏ '–∫–∞–∫ —É–ª—É—á—à–∏—Ç—å Fodi Sushi'\n\n\
                 –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–µ—Ç—Ä–∏–∫–∏ –∏ –¥–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ:\n\
                 ‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏—é ROI\n\
                 ‚Ä¢ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤\n\
                 ‚Ä¢ –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞\n\
                 ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"
                .to_string()
            );
        }

        // –ò—â–µ–º –±–∏–∑–Ω–µ—Å
        match find_business(&business_query, state).await {
            Ok(Some((business_id, business_name))) => {
                tracing::info!("üí° Generating insights for: {}", business_name);

                // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                match fetch_business_metrics(&business_id).await {
                    Ok(metrics) => {
                        use crate::ai::analysis::generate_business_insights;
                        
                        let insights = format!(
                            "üí° **–°–æ–≤–µ—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞: {}**\n\n{}",
                            business_name,
                            generate_business_insights(&metrics)
                        );

                        Some(insights)
                    }
                    Err(e) => {
                        tracing::error!("‚ùå Failed to fetch metrics: {}", e);
                        Some(format!(
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è '{}'.\n\
                             –û—à–∏–±–∫–∞: {}",
                            business_name, e
                        ))
                    }
                }
            }
            Ok(None) => {
                Some(format!(
                    "‚ùå –ë–∏–∑–Ω–µ—Å '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n\
                     üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ø–æ–∫–∞–∂–∏ –≤—Å–µ –±–∏–∑–Ω–µ—Å—ã' –¥–ª—è —Å–ø–∏—Å–∫–∞.",
                    business_query
                ))
            }
            Err(e) => {
                tracing::error!("‚ùå Error: {}", e);
                Some(format!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {}", e))
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_extract_business_name() {
        assert_eq!(
            extract_business_name("–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–∏–∑–Ω–µ—Å Tech Startup"),
            "tech startup"
        );
        assert_eq!(
            extract_business_name("analyze business Sushi Paradise"),
            "sushi paradise"
        );
        assert_eq!(extract_business_name("–º–µ—Ç—Ä–∏–∫–∏ Coffee Shop"), "coffee shop");
    }

    #[test]
    fn test_handler_name() {
        let handler = AnalyzeBusinessHandler;
        assert_eq!(handler.name(), "analyzebusiness");
    }

    #[test]
    fn test_handler_priority() {
        let handler = AnalyzeBusinessHandler;
        assert_eq!(handler.priority(), 80);
    }

    #[test]
    fn test_extract_business_names_for_comparison() {
        let names = extract_business_names_for_comparison("—Å—Ä–∞–≤–Ω–∏ Tech Startup –∏ Fodi Sushi");
        assert_eq!(names.len(), 2);
        assert!(names.contains(&"tech startup".to_string()));
        assert!(names.contains(&"fodi sushi".to_string()));

        let names2 = extract_business_names_for_comparison("compare Tech Startup vs Fodi Sushi");
        assert_eq!(names2.len(), 2);
    }

    #[test]
    fn test_compare_handler_name() {
        let handler = CompareBusinessesHandler;
        assert_eq!(handler.name(), "comparebusinesses");
    }

    #[test]
    fn test_compare_handler_priority() {
        let handler = CompareBusinessesHandler;
        assert_eq!(handler.priority(), 85);
    }

    #[test]
    fn test_insights_handler_name() {
        let handler = BusinessInsightsHandler;
        assert_eq!(handler.name(), "businessinsights");
    }

    #[test]
    fn test_insights_handler_priority() {
        let handler = BusinessInsightsHandler;
        assert_eq!(handler.priority(), 82);
    }
}
