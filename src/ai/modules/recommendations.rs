use async_trait::async_trait;

use crate::state::AppState;
use super::super::intent_handler::{IntentHandler, Context};

/// üéØ Personalized Recommendations Handler
pub struct RecommendationHandler;

impl RecommendationHandler {
    pub fn new() -> Self {
        Self
    }

    /// Check if context contains spicy-related keywords
    fn is_spicy_request(context: &str) -> bool {
        let lower = context.to_lowercase();
        lower.contains("–æ—Å—Ç—Ä") || lower.contains("–ø–∏–∫–∞–Ω—Ç") || lower.contains("—Å–ø–∞–π—Å")
    }

    /// Check if context contains diet/healthy keywords
    fn is_diet_request(context: &str) -> bool {
        let lower = context.to_lowercase();
        lower.contains("–¥–∏–µ—Ç") || lower.contains("–∑–¥–æ—Ä–æ–≤") || 
        lower.contains("–ø—Ä–∞–≤–∏–ª—å–Ω") || lower.contains("—Ñ–∏—Ç–Ω–µ—Å")
    }

    /// Check if context contains party/company keywords
    fn is_party_request(context: &str) -> bool {
        let lower = context.to_lowercase();
        lower.contains("–∫–æ–º–ø–∞–Ω") || lower.contains("–≤–µ—á–µ—Ä–∏–Ω") || 
        lower.contains("–ø—Ä–∞–∑–¥–Ω–∏–∫") || lower.contains("–¥—Ä—É–∑")
    }

    /// Check if context contains seafood keywords
    fn is_seafood_request(context: &str) -> bool {
        let lower = context.to_lowercase();
        lower.contains("–º–æ—Ä–µ") || lower.contains("—Ä—ã–±") || 
        lower.contains("–∫—Ä–µ–≤–µ—Ç–∫") || lower.contains("–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç")
    }
}

#[async_trait]
impl IntentHandler for RecommendationHandler {
    fn name(&self) -> &'static str {
        "recommendations"
    }

    fn priority(&self) -> u8 {
        70
    }

    async fn handle(&self, input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "üéØ Handling recommendations request for user: {}", ctx.user_id);

        // Try to get actual products from backend
        let products = match state.backend.products.get_products().await {
            Ok(prods) => prods,
            Err(e) => {
                tracing::error!(target: "ai", "‚ùå Failed to get products for recommendations: {}", e);
                vec![]
            }
        };

        // Build context-aware recommendations
        let context = input.to_lowercase();

        if Self::is_spicy_request(&context) {
            Some(self.spicy_recommendations(&products))
        } else if Self::is_diet_request(&context) {
            Some(self.diet_recommendations(&products))
        } else if Self::is_party_request(&context) {
            Some(self.party_recommendations(&products))
        } else if Self::is_seafood_request(&context) {
            Some(self.seafood_recommendations(&products))
        } else {
            Some(self.general_recommendations(&products))
        }
    }
}

impl RecommendationHandler {
    fn spicy_recommendations(&self, products: &[crate::api::go_backend::types::Product]) -> String {
        let mut response = "üå∂Ô∏è **–û—Å—Ç—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n\n".to_string();

        let spicy_products: Vec<_> = products.iter()
            .filter(|p| {
                let name = p.name.to_lowercase();
                name.contains("–æ—Å—Ç—Ä") || name.contains("—Å–ø–∞–π—Å–∏") || 
                name.contains("—á–∏–ª–∏") || name.contains("—Ö–∞–ª–∞–ø–µ–Ω—å–æ")
            })
            .take(3)
            .collect();

        if !spicy_products.is_empty() {
            for product in spicy_products {
                response.push_str(&format!(
                    "üî• {} ‚Äî {}‚ÇΩ\n",
                    product.name,
                    product.price as i32
                ));
            }
        } else {
            response.push_str(
                "üî• –û—Å—Ç—Ä—ã–µ —Ä–æ–ª–ª—ã —Å —Ö–∞–ª–∞–ø–µ–Ω—å–æ\n\
                 üå∂Ô∏è –ü–∏–∫–∞–Ω—Ç–Ω—ã–π —Ç—É–Ω–µ—Ü —Å–ø–∞–π—Å–∏\n\
                 üî• –ö—Ä–µ–≤–µ—Ç–∫–∞ —Ç–µ–º–ø—É—Ä–∞ –æ—Å—Ç—Ä–∞—è\n\n\
                 –î–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π —è—Ä–∫–∏—Ö –≤–∫—É—Å–æ–≤!"
            );
        }

        response.push_str("\n\nüí° –°–æ–≤–µ—Ç: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Å–æ–µ–≤—ã–º —Å–æ—É—Å–æ–º!");
        response
    }

    fn diet_recommendations(&self, products: &[crate::api::go_backend::types::Product]) -> String {
        let mut response = "üí™ **–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n\n".to_string();

        let healthy_products: Vec<_> = products.iter()
            .filter(|p| {
                let name = p.name.to_lowercase();
                name.contains("—Å–∞–ª–∞—Ç") || name.contains("–æ–≤–æ—â") || 
                name.contains("—Ä–∏—Å") || name.contains("–ª–æ—Å–æ—Å")
            })
            .take(3)
            .collect();

        if !healthy_products.is_empty() {
            for product in healthy_products {
                response.push_str(&format!(
                    "ü•ó {} ‚Äî {}‚ÇΩ\n",
                    product.name,
                    product.price as i32
                ));
            }
        } else {
            response.push_str(
                "ü•ó –°–∞–ª–∞—Ç –∏–∑ –∞–≤–æ–∫–∞–¥–æ –∏ –ª–æ—Å–æ—Å—è\n\
                 üç± –†–æ–ª–ª—ã —Å –æ–≥—É—Ä—Ü–æ–º –∏ –∫—Ä–µ–≤–µ—Ç–∫–æ–π\n\
                 üêü –°–∞—à–∏–º–∏: –ª–æ—Å–æ—Å—å, —Ç—É–Ω–µ—Ü\n\n\
                 –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Å–ª–µ–¥–∏—Ç –∑–∞ —Ñ–∏–≥—É—Ä–æ–π!"
            );
        }

        response.push_str("\n\nüí° –°–æ–≤–µ—Ç: –ú–µ–Ω—å—à–µ –∫–∞–ª–æ—Ä–∏–π, –±–æ–ª—å—à–µ –ø–æ–ª—å–∑—ã!");
        response
    }

    fn party_recommendations(&self, products: &[crate::api::go_backend::types::Product]) -> String {
        let mut response = "üéâ **–î–ª—è –∫–æ–º–ø–∞–Ω–∏–∏:**\n\n".to_string();

        let party_products: Vec<_> = products.iter()
            .filter(|p| {
                let name = p.name.to_lowercase();
                name.contains("—Å–µ—Ç") || name.contains("–Ω–∞–±–æ—Ä") || 
                name.contains("–º–∏–∫—Å") || name.contains("–∞—Å—Å–æ—Ä—Ç–∏")
            })
            .take(3)
            .collect();

        if !party_products.is_empty() {
            for product in party_products {
                response.push_str(&format!(
                    "üç± {} ‚Äî {}‚ÇΩ\n",
                    product.name,
                    product.price as i32
                ));
            }
        } else {
            response.push_str(
                "üç± –ë–æ–ª—å—à–æ–π —Å–µ—Ç '–ú–µ–≥–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–∞'\n\
                 üéâ –ê—Å—Å–æ—Ä—Ç–∏ —Ä–æ–ª–ª–æ–≤ (60 —à—Ç)\n\
                 üç£ –ú–∏–∫—Å —Å—É—à–∏ –∏ —Ä–æ–ª–ª–æ–≤\n\n\
                 –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏!"
            );
        }

        response.push_str("\n\nüí° –°–æ–≤–µ—Ç: –ë–µ—Ä–∏—Ç–µ —Å–µ—Ç—ã ‚Äî –≤—ã–≥–æ–¥–Ω–µ–µ!");
        response
    }

    fn seafood_recommendations(&self, products: &[crate::api::go_backend::types::Product]) -> String {
        let mut response = "ü¶ê **–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã:**\n\n".to_string();

        let seafood_products: Vec<_> = products.iter()
            .filter(|p| {
                let name = p.name.to_lowercase();
                name.contains("–∫—Ä–µ–≤–µ—Ç–∫") || name.contains("–ª–æ—Å–æ—Å") || 
                name.contains("—Ç—É–Ω–µ—Ü") || name.contains("—É–≥–æ—Ä") ||
                name.contains("–∫—Ä–∞–±") || name.contains("–∏–∫—Ä")
            })
            .take(3)
            .collect();

        if !seafood_products.is_empty() {
            for product in seafood_products {
                response.push_str(&format!(
                    "üêü {} ‚Äî {}‚ÇΩ\n",
                    product.name,
                    product.price as i32
                ));
            }
        } else {
            response.push_str(
                "ü¶ê –¢–∏–≥—Ä–æ–≤—ã–µ –∫—Ä–µ–≤–µ—Ç–∫–∏ —Ç–µ–º–ø—É—Ä–∞\n\
                 üêü –õ–æ—Å–æ—Å—å —Å –∞–≤–æ–∫–∞–¥–æ\n\
                 ü¶Ä –ö—Ä–∞–± —Å–ø–∞–π—Å–∏\n\n\
                 –°–≤–µ–∂–∏–µ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"
            );
        }

        response.push_str("\n\nüí° –°–æ–≤–µ—Ç: –£ –Ω–∞—Å —Å–≤–µ–∂–∏–π –ª–æ—Å–æ—Å—å –∏–∑ –ù–æ—Ä–≤–µ–≥–∏–∏!");
        response
    }

    fn general_recommendations(&self, products: &[crate::api::go_backend::types::Product]) -> String {
        let mut response = "üéØ **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n\n".to_string();

        if products.is_empty() {
            response.push_str(
                "üèÜ –¢–æ–ø-3 —Ö–∏—Ç–∞:\n\
                 1Ô∏è‚É£ –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è –∫–ª–∞—Å—Å–∏–∫\n\
                 2Ô∏è‚É£ –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è —Å –ª–æ—Å–æ—Å–µ–º\n\
                 3Ô∏è‚É£ –î—Ä–∞–∫–æ–Ω —Å —É–≥—Ä—ë–º\n\n\
                 üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à–∏ –±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä—ã!"
            );
        } else {
            // Take top 3 products or popular ones
            for (i, product) in products.iter().take(3).enumerate() {
                response.push_str(&format!(
                    "{}Ô∏è‚É£ {} ‚Äî {}‚ÇΩ\n",
                    i + 1,
                    product.name,
                    product.price as i32
                ));
            }
            
            response.push_str("\n\nüí° –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –º–µ–Ω—é!");
        }

        response.push_str(
            "\n\nüîç –£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:\n\
             ‚Ä¢ '—Ö–æ—á—É –æ—Å—Ç—Ä–æ–µ' üå∂Ô∏è\n\
             ‚Ä¢ '—á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ' üí™\n\
             ‚Ä¢ '–¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏' üéâ\n\
             ‚Ä¢ '—Å –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏' ü¶ê"
        );

        response
    }
}
