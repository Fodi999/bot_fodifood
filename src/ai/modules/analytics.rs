use async_trait::async_trait;

use crate::state::AppState;
use super::super::intent_handler::{IntentHandler, Context};

/// üìä Check Ingredients Handler
pub struct CheckIngredientsHandler;

impl CheckIngredientsHandler {
    pub fn new() -> Self {
        Self
    }
}

#[async_trait]
impl IntentHandler for CheckIngredientsHandler {
    fn name(&self) -> &'static str {
        "checkingredients"  // Match lowercase intent
    }

    fn priority(&self) -> u8 {
        85
    }

    async fn handle(&self, _input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "üìä Handling check ingredients request for user: {}", ctx.user_id);

        if let Some(ingredient) = ctx.entities.first() {
            // Try to get ingredients from backend
            match state.backend.admin.get_ingredients(&ctx.user_id).await {
                Ok(ingredients) => {
                    // Find matching ingredient
                    let found = ingredients.iter().find(|i| {
                        i.name.to_lowercase().contains(&ingredient.to_lowercase())
                    });

                    if let Some(ing) = found {
                        Some(format!(
                            "üìä **–û—Å—Ç–∞—Ç–∫–∏: {}**\n\n\
                             üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {}\n\
                             üìè –ï–¥–∏–Ω–∏—Ü–∞: {}\n\n\
                             ‚úÖ –í –Ω–∞–ª–∏—á–∏–∏",
                            ing.name,
                            ing.quantity,
                            ing.unit
                        ))
                    } else {
                        Some(format!(
                            "üîç –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\
                             –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                            ingredient
                        ))
                    }
                }
                Err(e) => {
                    tracing::error!(target: "ai", "‚ùå Failed to get ingredients: {}", e);
                    Some(format!(
                        "üìä –ü—Ä–æ–≤–µ—Ä—è—é –æ—Å—Ç–∞—Ç–∫–∏: **{}**\n\n\
                         ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ —Å–∫–ª–∞–¥–∞.\n\
                         –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        ingredient
                    ))
                }
            }
        } else {
            Some(
                "üìä –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:\n\
                 –ù–∞–ø—Ä–∏–º–µ—Ä: '–ø—Ä–æ–≤–µ—Ä—å –∫—Ä–µ–≤–µ—Ç–∫–∏' –∏–ª–∏ '–æ—Å—Ç–∞—Ç–∫–∏ –ª–æ—Å–æ—Å—è'"
                    .to_string()
            )
        }
    }
}

/// üì¶ Stock Status Handler
pub struct StockStatusHandler;

impl StockStatusHandler {
    pub fn new() -> Self {
        Self
    }
}

#[async_trait]
impl IntentHandler for StockStatusHandler {
    fn name(&self) -> &'static str {
        "stockstatus"  // Match lowercase intent
    }

    fn priority(&self) -> u8 {
        80
    }

    async fn handle(&self, _input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "üì¶ Handling stock status request for user: {}", ctx.user_id);

        match state.backend.admin.get_ingredients(&ctx.user_id).await {
            Ok(ingredients) => {
                if ingredients.is_empty() {
                    Some("üì¶ –°–∫–ª–∞–¥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º.".to_string())
                } else {
                    let mut response = "üì¶ **–°—Ç–∞—Ç—É—Å —Å–∫–ª–∞–¥–∞:**\n\n".to_string();
                    
                    for (i, ing) in ingredients.iter().enumerate().take(10) {
                        response.push_str(&format!(
                            "{}. {} ‚Äî {} {}\n",
                            i + 1,
                            ing.name,
                            ing.quantity,
                            ing.unit
                        ));
                    }

                    if ingredients.len() > 10 {
                        response.push_str(&format!("\n...–∏ –µ—â—ë {} –ø–æ–∑–∏—Ü–∏–π", ingredients.len() - 10));
                    }

                    Some(response)
                }
            }
            Err(e) => {
                tracing::error!(target: "ai", "‚ùå Failed to get stock status: {}", e);
                Some(
                    "üì¶ **–°—Ç–∞—Ç—É—Å —Å–∫–ª–∞–¥–∞:**\n\n\
                     ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.\n\
                     –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\
                     '–ø—Ä–æ–≤–µ—Ä—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ'\n\n\
                     üìä –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
                        .to_string()
                )
            }
        }
    }
}

/// üìà Get Statistics Handler
pub struct GetStatisticsHandler;

impl GetStatisticsHandler {
    pub fn new() -> Self {
        Self
    }
}

#[async_trait]
impl IntentHandler for GetStatisticsHandler {
    fn name(&self) -> &'static str {
        "getstatistics"  // Match lowercase intent
    }

    fn priority(&self) -> u8 {
        90
    }

    async fn handle(&self, _input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "üìà Handling statistics request for user: {}", ctx.user_id);

        match state.backend.admin.get_stats(&ctx.user_id).await {
            Ok(stats) => {
                Some(format!(
                    "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂:**\n\n\
                     üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {}‚ÇΩ\n\
                     üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {}\n\
                     üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}\n\
                     üçΩÔ∏è –ë–ª—é–¥ –≤ –º–µ–Ω—é: {}\n\n\
                     ‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã",
                    stats.revenue as i32,
                    stats.total_orders,
                    stats.total_users.unwrap_or(0),
                    stats.total_products.unwrap_or(0)
                ))
            }
            Err(e) => {
                tracing::error!(target: "ai", "‚ùå Failed to get statistics: {}", e);
                Some(
                    "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂:**\n\n\
                     ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.\n\n\
                     üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á—ë—Ç—ã:\n\
                     ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü\n\
                     ‚Ä¢ –¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n\
                     ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫\n\
                     ‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤\n\n\
                     üîê –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º."
                        .to_string()
                )
            }
        }
    }
}

/// üí∞ Sales Analysis Handler
pub struct SalesAnalysisHandler;

impl SalesAnalysisHandler {
    pub fn new() -> Self {
        Self
    }
}

#[async_trait]
impl IntentHandler for SalesAnalysisHandler {
    fn name(&self) -> &'static str {
        "salesanalysis"  // Match lowercase intent
    }

    fn priority(&self) -> u8 {
        85
    }

    async fn handle(&self, _input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "üí∞ Handling sales analysis request for user: {}", ctx.user_id);

        match state.backend.admin.get_stats(&ctx.user_id).await {
            Ok(stats) => {
                let avg_check = if stats.total_orders > 0 {
                    stats.revenue / stats.total_orders as f64
                } else {
                    0.0
                };

                Some(format!(
                    "üí∞ **–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂:**\n\n\
                     üìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:\n\
                     ‚Ä¢ –í—ã—Ä—É—á–∫–∞: {}‚ÇΩ\n\
                     ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {}\n\
                     ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {:.0}‚ÇΩ\n\
                     ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}\n\n\
                     üîê –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.",
                    stats.revenue as i32,
                    stats.total_orders,
                    avg_check,
                    stats.total_users.unwrap_or(0)
                ))
            }
            Err(e) => {
                tracing::error!(target: "ai", "‚ùå Failed to get sales analysis: {}", e);
                Some(
                    "üí∞ **–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂:**\n\n\
                     ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.\n\n\
                     üìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:\n\
                     ‚Ä¢ –í—ã—Ä—É—á–∫–∞\n\
                     ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤\n\
                     ‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n\
                     ‚Ä¢ –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã\n\n\
                     –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞.\n\n\
                     üîê –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
                        .to_string()
                )
            }
        }
    }
}
