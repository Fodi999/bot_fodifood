use async_trait::async_trait;
use anyhow::Result;

use crate::state::AppState;
use super::super::intent_handler::{IntentHandler, IntentContext};

/// üì¶ Create Order Handler
pub struct CreateOrderHandler;

#[async_trait]
impl IntentHandler for CreateOrderHandler {
    fn intent_name(&self) -> &str {
        "create_order"
    }

    fn priority(&self) -> u8 {
        100 // High priority
    }

    async fn handle(&self, ctx: &IntentContext, _state: &AppState) -> Result<String> {
        tracing::info!("üì¶ Handling create order request");

        // Extract order details from entities
        let items_text = ctx.entities.join(", ");

        if items_text.is_empty() {
            return Ok(
                "üì¶ –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å.\n\
                –ù–∞–ø—Ä–∏–º–µ—Ä: '–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—é –∏ –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—é'".to_string()
            );
        }

        Ok(format!(
            "üì¶ **–í–∞—à –∑–∞–∫–∞–∑:**\n\n{}\n\n\
            –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ:\n\
            üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\
            üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\
            üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é)\n\n\
            –ù–∞–ø–∏—à–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            items_text
        ))
    }
}

/// ÔøΩ Order Status Intent Handler
pub struct OrderStatusHandler;

impl OrderStatusHandler {
    pub fn new() -> Self {
        Self
    }
}

#[async_trait]
impl IntentHandler for OrderStatusHandler {
    fn name(&self) -> &'static str {
        "order_status"
    }

    fn priority(&self) -> u8 {
        95
    }

    async fn handle(&self, _input: &str, ctx: &mut Context, state: &AppState) -> Option<String> {
        tracing::info!(target: "ai", "ÔøΩ Handling order status request for user: {}", ctx.user_id);

        match state.backend.orders.get_recent_orders(&ctx.user_id, 1).await {
            Ok(orders) => {
                if orders.is_empty() {
                    Some("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üì≠".to_string())
                } else {
                    let order = &orders[0];
                    let order_id = order.get("id")
                        .and_then(|v| v.as_str())
                        .or_else(|| order.get("order_id").and_then(|v| v.as_str()))
                        .unwrap_or("–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω");
                    let status = order.get("status")
                        .and_then(|v| v.as_str())
                        .unwrap_or("–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω");

                    Some(format!(
                        "ÔøΩ –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑:\n\
                        üÜî –ù–æ–º–µ—Ä: {}\n\
                        ÔøΩ –°—Ç–∞—Ç—É—Å: {}\n\n\
                        –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!",
                        order_id, status
                    ))
                }
            }
            Err(e) => {
                tracing::error!(target: "ai", "‚ùå Failed to get order status: {}", e);
                Some("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ÔøΩ".to_string())
            }
        }
    }
}

/// ‚ùå Cancel Order Handler
pub struct CancelOrderHandler;

#[async_trait]
impl IntentHandler for CancelOrderHandler {
    fn intent_name(&self) -> &str {
        "cancel_order"
    }

    fn priority(&self) -> u8 {
        85
    }

    async fn handle(&self, _ctx: &IntentContext, _state: &AppState) -> Result<String> {
        tracing::info!("‚ùå Handling cancel order request");

        Ok(
            "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n\
            üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n\
            üí¨ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ —á–∞—Ç–µ\n\n\
            –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å!"
                .to_string()
        )
    }
}
