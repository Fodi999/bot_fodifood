use futures::{sink::SinkExt, stream::StreamExt};
use serde::Deserialize;
use shuttle_axum::axum::extract::ws::{Message, WebSocket, WebSocketUpgrade};
use shuttle_axum::axum::extract::{Query, State};
use shuttle_axum::axum::response::IntoResponse;
use tokio::sync::mpsc;
use uuid::Uuid;

use crate::{
    models::{
        message::{IncomingMessage, OutgoingMessage},
        user::UserRole,
    },
    state::{AppState, ClientConnection},
};

/// Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
#[derive(Deserialize, Debug)]
pub struct WsParams {
    /// JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ query)
    pub token: Option<String>,
}

pub async fn websocket_handler(
    ws: WebSocketUpgrade,
    Query(params): Query<WsParams>,
    State(state): State<AppState>,
) -> impl IntoResponse {
    tracing::info!("üåê WebSocket connection attempt with params: {:?}", params);

    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if let Some(ref token) = params.token {
        let prefix_len = token.len().min(20);
        tracing::info!("üîë Token prefix received: {}...", &token[..prefix_len]);
    } else {
        tracing::info!("üìù No token in query params, expecting auth message");
    }

    ws.on_upgrade(move |socket| handle_socket(socket, state, params))
}

async fn handle_socket(socket: WebSocket, state: AppState, params: WsParams) {
    let (mut sender, mut receiver) = socket.split();
    let (tx, mut rx) = mpsc::unbounded_channel::<String>();

    let connection_id = Uuid::new_v4().to_string();
    let mut authenticated = false;
    let mut user_id = String::new();
    let mut user_role = UserRole::Client;

    tracing::info!("New WebSocket connection: {}", connection_id);

    // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä
    if let Some(token) = params.token {
        tracing::info!("üîê Attempting auto-authentication with query token...");

        match state.backend.verify_token(&token).await {
            Ok(response) if response.valid => {
                authenticated = true;
                user_id = response.user_id.clone().unwrap_or_default();
                user_role = response.role.clone().unwrap_or(UserRole::Client);

                // Register connection
                state.connections.insert(
                    user_id.clone(),
                    ClientConnection {
                        user_id: user_id.clone(),
                        role: user_role.clone(),
                        tx: tx.clone(),
                    },
                );

                let auth_msg = OutgoingMessage::AuthSuccess {
                    user_id: user_id.clone(),
                    role: format!("{:?}", user_role),
                    name: response.name.clone(),
                    email: response.email.clone(),
                };
                let _ = tx.send(auth_msg.to_json());

                // üë§ –°–û–•–†–ê–ù–Ø–ï–ú –ò–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –≤ –ø–∞–º—è—Ç—å AI
                if let Some(ref name) = response.name {
                    let ai = state.ai.clone();
                    let uid = user_id.clone();
                    let user_name = name.clone();
                    tokio::spawn(async move {
                        ai.set_user_name(&uid, user_name).await;
                    });
                }

                tracing::info!(
                    "‚úÖ Auto-authenticated user {} as {:?} (name: {:?}, email: {:?})",
                    user_id,
                    user_role,
                    response.name,
                    response.email
                );
            }
            Ok(_) => {
                tracing::warn!("‚ö†Ô∏è Invalid token received in query params");
                let error_msg = OutgoingMessage::AuthFailed {
                    reason: "Invalid token in query params".to_string(),
                };
                let _ = tx.send(error_msg.to_json());
            }
            Err(e) => {
                tracing::error!("‚ùå Token verification failed: {:?}", e);
                let error_msg = OutgoingMessage::Error {
                    message: format!("Auth server error: {}", e),
                };
                let _ = tx.send(error_msg.to_json());
            }
        }
    }

    // Spawn task to send messages from channel to WebSocket
    let send_task = tokio::spawn(async move {
        while let Some(msg) = rx.recv().await {
            if sender.send(Message::Text(msg.into())).await.is_err() {
                break;
            }
        }
    });

    // Main message processing loop
    while let Some(Ok(msg)) = receiver.next().await {
        match msg {
            Message::Text(text) => {
                tracing::info!("üí¨ Incoming raw text: {}", text);

                // Parse incoming message
                let incoming: Result<IncomingMessage, _> = serde_json::from_str(&text);

                match incoming {
                    Ok(IncomingMessage::Auth { token }) => {
                        // Authenticate user via Go backend
                        match state.backend.verify_token(&token).await {
                            Ok(response) if response.valid => {
                                authenticated = true;
                                user_id = response.user_id.clone().unwrap_or_default();
                                user_role = response.role.clone().unwrap_or(UserRole::Client);

                                // Register connection
                                state.connections.insert(
                                    user_id.clone(),
                                    ClientConnection {
                                        user_id: user_id.clone(),
                                        role: user_role.clone(),
                                        tx: tx.clone(),
                                    },
                                );

                                let auth_response = OutgoingMessage::AuthSuccess {
                                    user_id: user_id.clone(),
                                    role: format!("{:?}", user_role),
                                    name: response.name.clone(),
                                    email: response.email.clone(),
                                };
                                let _ = tx.send(auth_response.to_json());

                                // üë§ –°–û–•–†–ê–ù–Ø–ï–ú –ò–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –≤ –ø–∞–º—è—Ç—å AI
                                if let Some(ref name) = response.name {
                                    let ai = state.ai.clone();
                                    let uid = user_id.clone();
                                    let user_name = name.clone();
                                    tokio::spawn(async move {
                                        ai.set_user_name(&uid, user_name).await;
                                    });
                                }

                                tracing::info!(
                                    "User {} authenticated as {:?} (name: {:?}, email: {:?})",
                                    user_id,
                                    user_role,
                                    response.name,
                                    response.email
                                );
                            }
                            _ => {
                                let response = OutgoingMessage::AuthFailed {
                                    reason: "Invalid token".to_string(),
                                };
                                let _ = tx.send(response.to_json());
                            }
                        }
                    }

                    Ok(IncomingMessage::Chat { text }) if authenticated => {
                        tracing::info!("‚úÖ Handling authenticated chat message: {}", text);
                        handle_chat_message(&state, &user_id, &user_role, &text, &tx).await;
                        tracing::info!("üü¢ Finished processing authenticated message");
                    }

                    // –î–ï–ú–û-–†–ï–ñ–ò–ú: –†–∞–∑—Ä–µ—à–∞–µ–º —á–∞—Ç –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI
                    Ok(IncomingMessage::Chat { text }) if !authenticated => {
                        tracing::info!("üì© –î–µ–º–æ-—Ä–µ–∂–∏–º: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
                        tracing::info!("‚úÖ Handling guest chat message: {}", text);
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Å—Ç–µ–≤–æ–π ID
                        let guest_id = format!("guest_{}", connection_id);
                        handle_chat_message(&state, &guest_id, &UserRole::Client, &text, &tx).await;
                        tracing::info!("üü¢ Finished processing guest message");
                    }

                    Ok(IncomingMessage::Command { action, params }) if authenticated => {
                        handle_command(&state, &user_id, &user_role, &action, params, &tx).await;
                    }

                    Ok(IncomingMessage::Ping) => {
                        let _ = tx.send(OutgoingMessage::Pong.to_json());
                    }

                    Err(e) => {
                        tracing::error!(
                            "‚ùå Failed to parse incoming message: {} (raw: '{}')",
                            e,
                            text
                        );
                        let response = OutgoingMessage::Error {
                            message: format!("Invalid message format: {}", e),
                        };
                        let _ = tx.send(response.to_json());
                    }

                    _ => {
                        if !authenticated {
                            let response = OutgoingMessage::Error {
                                message: "Not authenticated".to_string(),
                            };
                            let _ = tx.send(response.to_json());
                        }
                    }
                }
            }

            Message::Close(_) => {
                tracing::info!("WebSocket connection closed: {}", connection_id);
                break;
            }

            _ => {}
        }
    }

    // Cleanup
    send_task.abort();
    if authenticated {
        state.connections.remove(&user_id);
        tracing::info!("User {} disconnected", user_id);
    }
}

async fn handle_chat_message(
    state: &AppState,
    user_id: &str,
    _role: &UserRole,
    text: &str,
    tx: &mpsc::UnboundedSender<String>,
) {
    tracing::info!("üß† handle_chat_message triggered with text: {}", text);

    // ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π AI Engine –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    match state.ai.process_message(user_id, text).await {
        Ok(mut ai_response) => {
            // üîç –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            use crate::ai::{Intent, IntentClassifier, Thinker};
            let intent = IntentClassifier::classify(text);

            match intent {
                // üçΩÔ∏è –ú–µ–Ω—é - –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
                Intent::ViewMenu => {
                    tracing::info!("üçΩÔ∏è ViewMenu detected - fetching real menu from backend");

                    match state.backend.get_products().await {
                        Ok(products) => {
                            use crate::api::go_backend::GoBackendClient;
                            ai_response = GoBackendClient::format_products_list(&products);
                            tracing::info!("‚úÖ Loaded {} products from backend", products.len());
                        }
                        Err(e) => {
                            tracing::error!("‚ùå Failed to load menu from backend: {}", e);
                            ai_response.push_str("\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —Å —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞—é –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.");
                        }
                    }
                }

                // üîç –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
                Intent::ProductSearch => {
                    if let Some(ingredient) = Thinker::extract_ingredient(text) {
                        tracing::info!("üîç ProductSearch detected - searching for: {}", ingredient);

                        match state.backend.get_products().await {
                            Ok(products) => {
                                use crate::api::go_backend::{GoBackendClient, Product};
                                let filtered =
                                    GoBackendClient::filter_by_ingredient(&products, &ingredient);

                                if !filtered.is_empty() {
                                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Vec<&Product> –≤ Vec<Product>
                                    let filtered_products: Vec<Product> =
                                        filtered.iter().map(|&p| p.clone()).collect();

                                    ai_response = format!(
                                        "üîç **–ù–∞—à—ë–ª {} –±–ª—é–¥ —Å \"{}\":**\n\n{}",
                                        filtered_products.len(),
                                        ingredient,
                                        GoBackendClient::format_products_list(&filtered_products)
                                    );
                                    tracing::info!(
                                        "‚úÖ Found {} products with {}",
                                        filtered_products.len(),
                                        ingredient
                                    );
                                } else {
                                    ai_response = format!(
                                        "ü§î –ù–µ –Ω–∞—à—ë–ª –±–ª—é–¥ —Å \"{}\", –Ω–æ –≤–æ—Ç –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é:\n\n{}",
                                        ingredient,
                                        GoBackendClient::format_products_list(&products)
                                    );
                                }
                            }
                            Err(e) => {
                                tracing::error!("‚ùå Failed to search products: {}", e);
                                // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ AI
                            }
                        }
                    }
                }

                // ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ - –∏—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
                Intent::ProductInfo => {
                    if let Some(product_name) = Thinker::extract_product(text) {
                        tracing::info!("‚ÑπÔ∏è ProductInfo detected - looking for: {}", product_name);

                        match state.backend.get_products().await {
                            Ok(products) => {
                                use crate::api::go_backend::GoBackendClient;
                                if let Some(product) =
                                    GoBackendClient::find_product_by_name(&products, &product_name)
                                {
                                    ai_response = format!(
                                        "‚ÑπÔ∏è **{}**\n\n\
                                         üí∞ **–¶–µ–Ω–∞:** {}‚ÇΩ\n\
                                         üì¶ **–í–µ—Å/–û–±—ä—ë–º:** {}\n\
                                         üìã **–û–ø–∏—Å–∞–Ω–∏–µ:** {}\n\
                                         üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {}\n\n\
                                         üí° –•–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å? –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ \"–±–µ—Ä—É\" –∏–ª–∏ \"–∑–∞–∫–∞–∂—É {}\"!",
                                        product.name,
                                        product.price as i32,
                                        product.weight.as_deref().unwrap_or("‚Äî"),
                                        product.description.as_deref().unwrap_or("–í–∫—É—Å–Ω–µ–π—à–µ–µ –±–ª—é–¥–æ –∏–∑ —Å–≤–µ–∂–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"),
                                        product.category.as_deref().unwrap_or("–î—Ä—É–≥–æ–µ"),
                                        product.name
                                    );
                                    tracing::info!("‚úÖ Found product: {}", product.name);
                                }
                            }
                            Err(e) => {
                                tracing::error!("‚ùå Failed to get product info: {}", e);
                            }
                        }
                    }
                }

                // üí∞ –¶–µ–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
                Intent::PriceInquiry => {
                    tracing::info!("üí∞ PriceInquiry detected - fetching prices");

                    match state.backend.get_products().await {
                        Ok(products) => {
                            use crate::api::go_backend::GoBackendClient;
                            ai_response = format!(
                                "üí∞ **–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:**\n\n{}",
                                GoBackendClient::format_products_list(&products)
                            );
                            tracing::info!("‚úÖ Loaded prices for {} products", products.len());
                        }
                        Err(e) => {
                            tracing::error!("‚ùå Failed to load prices: {}", e);
                        }
                    }
                }

                _ => {
                    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π AI-–æ—Ç–≤–µ—Ç
                }
            }

            tracing::info!("ü§ñ AI response: {}", ai_response);
            let response = OutgoingMessage::ChatResponse {
                text: ai_response,
                from_ai: true,
            };
            let _ = tx.send(response.to_json());
        }
        Err(e) => {
            tracing::error!("‚ùå AI processing error: {}", e);
            let response = OutgoingMessage::ChatResponse {
                text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è üòî".to_string(),
                from_ai: true,
            };
            let _ = tx.send(response.to_json());
        }
    }
}

async fn handle_command(
    state: &AppState,
    user_id: &str,
    role: &UserRole,
    action: &str,
    params: Option<serde_json::Value>,
    tx: &mpsc::UnboundedSender<String>,
) {
    tracing::info!("User {} command: {} {:?}", user_id, action, params);

    match action {
        "get_menu" => match state.backend.get_products().await {
            Ok(products) => {
                let response = OutgoingMessage::CommandResponse {
                    action: action.to_string(),
                    data: serde_json::to_value(products).unwrap_or_default(),
                    success: true,
                };
                let _ = tx.send(response.to_json());
            }
            Err(e) => {
                tracing::error!("Command failed: {}", e);
                let response = OutgoingMessage::Error {
                    message: format!("Failed to execute command: {}", e),
                };
                let _ = tx.send(response.to_json());
            }
        },

        "get_orders" if role.is_staff() => match state.backend.get_orders().await {
            Ok(orders) => {
                let response = OutgoingMessage::CommandResponse {
                    action: action.to_string(),
                    data: serde_json::to_value(orders).unwrap_or_default(),
                    success: true,
                };
                let _ = tx.send(response.to_json());
            }
            Err(e) => {
                tracing::error!("Command failed: {}", e);
            }
        },

        "create_order" => {
            if let Some(params) = params {
                // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Go backend
                match state.backend.create_order(params.clone()).await {
                    Ok(order) => {
                        tracing::info!(
                            "‚úÖ –ó–∞–∫–∞–∑ #{} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞ —Å—É–º–º—É {:.2}‚ÇΩ",
                            order.id,
                            order.total
                        );

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
                        if let Err(e) = crate::api::go_backend::send_order_to_backend(
                            &order.id.to_string(),
                            order.total,
                        )
                        .await
                        {
                            tracing::warn!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {}", e);
                        }

                        let response = OutgoingMessage::CommandResponse {
                            action: action.to_string(),
                            data: serde_json::to_value(order).unwrap_or_default(),
                            success: true,
                        };
                        let _ = tx.send(response.to_json());
                    }
                    Err(e) => {
                        tracing::error!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {}", e);
                        let response = OutgoingMessage::Error {
                            message: format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑: {}", e),
                        };
                        let _ = tx.send(response.to_json());
                    }
                }
            } else {
                let response = OutgoingMessage::Error {
                    message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞".to_string(),
                };
                let _ = tx.send(response.to_json());
            }
        }

        _ => {
            let response = OutgoingMessage::Error {
                message: format!("Unknown command: {}", action),
            };
            let _ = tx.send(response.to_json());
        }
    }
}
